
Nehehe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  08005420  08005420  00015420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  08005b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a0  20000090  08005bd8  00020090  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20000130  08005bd8  00020130  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000083db  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001794  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ad8  00000000  00000000  00029c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009d0  00000000  00000000  0002a700  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000039e2  00000000  00000000  0002b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000324b  00000000  00000000  0002eab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00031cfd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000303c  00000000  00000000  00031d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00034db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000090 	.word	0x20000090
 800015c:	00000000 	.word	0x00000000
 8000160:	08005408 	.word	0x08005408

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000094 	.word	0x20000094
 800017c:	08005408 	.word	0x08005408

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_frsub>:
 8000b00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b04:	e002      	b.n	8000b0c <__addsf3>
 8000b06:	bf00      	nop

08000b08 <__aeabi_fsub>:
 8000b08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b0c <__addsf3>:
 8000b0c:	0042      	lsls	r2, r0, #1
 8000b0e:	bf1f      	itttt	ne
 8000b10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b14:	ea92 0f03 	teqne	r2, r3
 8000b18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b20:	d06a      	beq.n	8000bf8 <__addsf3+0xec>
 8000b22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2a:	bfc1      	itttt	gt
 8000b2c:	18d2      	addgt	r2, r2, r3
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	4048      	eorgt	r0, r1
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	2b19      	cmp	r3, #25
 8000b3a:	bf88      	it	hi
 8000b3c:	4770      	bxhi	lr
 8000b3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4249      	negne	r1, r1
 8000b5e:	ea92 0f03 	teq	r2, r3
 8000b62:	d03f      	beq.n	8000be4 <__addsf3+0xd8>
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	fa41 fc03 	asr.w	ip, r1, r3
 8000b6c:	eb10 000c 	adds.w	r0, r0, ip
 8000b70:	f1c3 0320 	rsb	r3, r3, #32
 8000b74:	fa01 f103 	lsl.w	r1, r1, r3
 8000b78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__addsf3+0x78>
 8000b7e:	4249      	negs	r1, r1
 8000b80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b88:	d313      	bcc.n	8000bb2 <__addsf3+0xa6>
 8000b8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8e:	d306      	bcc.n	8000b9e <__addsf3+0x92>
 8000b90:	0840      	lsrs	r0, r0, #1
 8000b92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b96:	f102 0201 	add.w	r2, r2, #1
 8000b9a:	2afe      	cmp	r2, #254	; 0xfe
 8000b9c:	d251      	bcs.n	8000c42 <__addsf3+0x136>
 8000b9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	ea40 0003 	orr.w	r0, r0, r3
 8000bb0:	4770      	bx	lr
 8000bb2:	0049      	lsls	r1, r1, #1
 8000bb4:	eb40 0000 	adc.w	r0, r0, r0
 8000bb8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	d1ed      	bne.n	8000b9e <__addsf3+0x92>
 8000bc2:	fab0 fc80 	clz	ip, r0
 8000bc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bca:	ebb2 020c 	subs.w	r2, r2, ip
 8000bce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd2:	bfaa      	itet	ge
 8000bd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd8:	4252      	neglt	r2, r2
 8000bda:	4318      	orrge	r0, r3
 8000bdc:	bfbc      	itt	lt
 8000bde:	40d0      	lsrlt	r0, r2
 8000be0:	4318      	orrlt	r0, r3
 8000be2:	4770      	bx	lr
 8000be4:	f092 0f00 	teq	r2, #0
 8000be8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bec:	bf06      	itte	eq
 8000bee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bf2:	3201      	addeq	r2, #1
 8000bf4:	3b01      	subne	r3, #1
 8000bf6:	e7b5      	b.n	8000b64 <__addsf3+0x58>
 8000bf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c00:	bf18      	it	ne
 8000c02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c06:	d021      	beq.n	8000c4c <__addsf3+0x140>
 8000c08:	ea92 0f03 	teq	r2, r3
 8000c0c:	d004      	beq.n	8000c18 <__addsf3+0x10c>
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	bf08      	it	eq
 8000c14:	4608      	moveq	r0, r1
 8000c16:	4770      	bx	lr
 8000c18:	ea90 0f01 	teq	r0, r1
 8000c1c:	bf1c      	itt	ne
 8000c1e:	2000      	movne	r0, #0
 8000c20:	4770      	bxne	lr
 8000c22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c26:	d104      	bne.n	8000c32 <__addsf3+0x126>
 8000c28:	0040      	lsls	r0, r0, #1
 8000c2a:	bf28      	it	cs
 8000c2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c36:	bf3c      	itt	cc
 8000c38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bxcc	lr
 8000c3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4a:	4770      	bx	lr
 8000c4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c50:	bf16      	itet	ne
 8000c52:	4608      	movne	r0, r1
 8000c54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c58:	4601      	movne	r1, r0
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	bf06      	itte	eq
 8000c5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c62:	ea90 0f01 	teqeq	r0, r1
 8000c66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_ui2f>:
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e004      	b.n	8000c7c <__aeabi_i2f+0x8>
 8000c72:	bf00      	nop

08000c74 <__aeabi_i2f>:
 8000c74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c78:	bf48      	it	mi
 8000c7a:	4240      	negmi	r0, r0
 8000c7c:	ea5f 0c00 	movs.w	ip, r0
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c88:	4601      	mov	r1, r0
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	e01c      	b.n	8000cca <__aeabi_l2f+0x2a>

08000c90 <__aeabi_ul2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e00a      	b.n	8000cb4 <__aeabi_l2f+0x14>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_l2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_l2f+0x14>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	ea5f 0c01 	movs.w	ip, r1
 8000cb8:	bf02      	ittt	eq
 8000cba:	4684      	moveq	ip, r0
 8000cbc:	4601      	moveq	r1, r0
 8000cbe:	2000      	moveq	r0, #0
 8000cc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc4:	bf08      	it	eq
 8000cc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cce:	fabc f28c 	clz	r2, ip
 8000cd2:	3a08      	subs	r2, #8
 8000cd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd8:	db10      	blt.n	8000cfc <__aeabi_l2f+0x5c>
 8000cda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cde:	4463      	add	r3, ip
 8000ce0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce4:	f1c2 0220 	rsb	r2, r2, #32
 8000ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	eb43 0002 	adc.w	r0, r3, r2
 8000cf4:	bf08      	it	eq
 8000cf6:	f020 0001 	biceq.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	f102 0220 	add.w	r2, r2, #32
 8000d00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fmul>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d06f      	beq.n	8000e14 <__aeabi_fmul+0xf8>
 8000d34:	441a      	add	r2, r3
 8000d36:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3a:	0240      	lsls	r0, r0, #9
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d42:	d01e      	beq.n	8000d82 <__aeabi_fmul+0x66>
 8000d44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d50:	fba0 3101 	umull	r3, r1, r0, r1
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d5c:	bf3e      	ittt	cc
 8000d5e:	0049      	lslcc	r1, r1, #1
 8000d60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d64:	005b      	lslcc	r3, r3, #1
 8000d66:	ea40 0001 	orr.w	r0, r0, r1
 8000d6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6e:	2afd      	cmp	r2, #253	; 0xfd
 8000d70:	d81d      	bhi.n	8000dae <__aeabi_fmul+0x92>
 8000d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7a:	bf08      	it	eq
 8000d7c:	f020 0001 	biceq.w	r0, r0, #1
 8000d80:	4770      	bx	lr
 8000d82:	f090 0f00 	teq	r0, #0
 8000d86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d8a:	bf08      	it	eq
 8000d8c:	0249      	lsleq	r1, r1, #9
 8000d8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d96:	3a7f      	subs	r2, #127	; 0x7f
 8000d98:	bfc2      	ittt	gt
 8000d9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000da2:	4770      	bxgt	lr
 8000da4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	3a01      	subs	r2, #1
 8000dae:	dc5d      	bgt.n	8000e6c <__aeabi_fmul+0x150>
 8000db0:	f112 0f19 	cmn.w	r2, #25
 8000db4:	bfdc      	itt	le
 8000db6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dba:	4770      	bxle	lr
 8000dbc:	f1c2 0200 	rsb	r2, r2, #0
 8000dc0:	0041      	lsls	r1, r0, #1
 8000dc2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc6:	f1c2 0220 	rsb	r2, r2, #32
 8000dca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dce:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dd2:	f140 0000 	adc.w	r0, r0, #0
 8000dd6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dda:	bf08      	it	eq
 8000ddc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de0:	4770      	bx	lr
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0040      	lsleq	r0, r0, #1
 8000dee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df2:	3a01      	subeq	r2, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xce>
 8000df6:	ea40 000c 	orr.w	r0, r0, ip
 8000dfa:	f093 0f00 	teq	r3, #0
 8000dfe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0049      	lsleq	r1, r1, #1
 8000e06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0a:	3b01      	subeq	r3, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xe6>
 8000e0e:	ea41 010c 	orr.w	r1, r1, ip
 8000e12:	e78f      	b.n	8000d34 <__aeabi_fmul+0x18>
 8000e14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	bf18      	it	ne
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d00a      	beq.n	8000e3a <__aeabi_fmul+0x11e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1d8      	bne.n	8000de2 <__aeabi_fmul+0xc6>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	4770      	bx	lr
 8000e3a:	f090 0f00 	teq	r0, #0
 8000e3e:	bf17      	itett	ne
 8000e40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e44:	4608      	moveq	r0, r1
 8000e46:	f091 0f00 	teqne	r1, #0
 8000e4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4e:	d014      	beq.n	8000e7a <__aeabi_fmul+0x15e>
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d101      	bne.n	8000e5a <__aeabi_fmul+0x13e>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	d10f      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e5a:	ea93 0f0c 	teq	r3, ip
 8000e5e:	d103      	bne.n	8000e68 <__aeabi_fmul+0x14c>
 8000e60:	024b      	lsls	r3, r1, #9
 8000e62:	bf18      	it	ne
 8000e64:	4608      	movne	r0, r1
 8000e66:	d108      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e78:	4770      	bx	lr
 8000e7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_fdiv>:
 8000e84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e8c:	bf1e      	ittt	ne
 8000e8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e92:	ea92 0f0c 	teqne	r2, ip
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d069      	beq.n	8000f70 <__aeabi_fdiv+0xec>
 8000e9c:	eba2 0203 	sub.w	r2, r2, r3
 8000ea0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea4:	0249      	lsls	r1, r1, #9
 8000ea6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eaa:	d037      	beq.n	8000f1c <__aeabi_fdiv+0x98>
 8000eac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	bf38      	it	cc
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	bf24      	itt	cs
 8000ece:	1a5b      	subcs	r3, r3, r1
 8000ed0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed8:	bf24      	itt	cs
 8000eda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ede:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ee2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee6:	bf24      	itt	cs
 8000ee8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef4:	bf24      	itt	cs
 8000ef6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000efa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	bf18      	it	ne
 8000f02:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f06:	d1e0      	bne.n	8000eca <__aeabi_fdiv+0x46>
 8000f08:	2afd      	cmp	r2, #253	; 0xfd
 8000f0a:	f63f af50 	bhi.w	8000dae <__aeabi_fmul+0x92>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f14:	bf08      	it	eq
 8000f16:	f020 0001 	biceq.w	r0, r0, #1
 8000f1a:	4770      	bx	lr
 8000f1c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f20:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f24:	327f      	adds	r2, #127	; 0x7f
 8000f26:	bfc2      	ittt	gt
 8000f28:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f2c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f30:	4770      	bxgt	lr
 8000f32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	e737      	b.n	8000dae <__aeabi_fmul+0x92>
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xc2>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xda>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e795      	b.n	8000e9c <__aeabi_fdiv+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	d108      	bne.n	8000f8c <__aeabi_fdiv+0x108>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	f47f af7d 	bne.w	8000e7a <__aeabi_fmul+0x15e>
 8000f80:	ea93 0f0c 	teq	r3, ip
 8000f84:	f47f af70 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e776      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f8c:	ea93 0f0c 	teq	r3, ip
 8000f90:	d104      	bne.n	8000f9c <__aeabi_fdiv+0x118>
 8000f92:	024b      	lsls	r3, r1, #9
 8000f94:	f43f af4c 	beq.w	8000e30 <__aeabi_fmul+0x114>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e76e      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fa0:	bf18      	it	ne
 8000fa2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa6:	d1ca      	bne.n	8000f3e <__aeabi_fdiv+0xba>
 8000fa8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fac:	f47f af5c 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000fb0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb4:	f47f af3c 	bne.w	8000e30 <__aeabi_fmul+0x114>
 8000fb8:	e75f      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000fba:	bf00      	nop

08000fbc <__gesf2>:
 8000fbc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc0:	e006      	b.n	8000fd0 <__cmpsf2+0x4>
 8000fc2:	bf00      	nop

08000fc4 <__lesf2>:
 8000fc4:	f04f 0c01 	mov.w	ip, #1
 8000fc8:	e002      	b.n	8000fd0 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__cmpsf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe0:	bf18      	it	ne
 8000fe2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe6:	d011      	beq.n	800100c <__cmpsf2+0x40>
 8000fe8:	b001      	add	sp, #4
 8000fea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fee:	bf18      	it	ne
 8000ff0:	ea90 0f01 	teqne	r0, r1
 8000ff4:	bf58      	it	pl
 8000ff6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ffa:	bf88      	it	hi
 8000ffc:	17c8      	asrhi	r0, r1, #31
 8000ffe:	bf38      	it	cc
 8001000:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001004:	bf18      	it	ne
 8001006:	f040 0001 	orrne.w	r0, r0, #1
 800100a:	4770      	bx	lr
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	d102      	bne.n	8001018 <__cmpsf2+0x4c>
 8001012:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001016:	d105      	bne.n	8001024 <__cmpsf2+0x58>
 8001018:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800101c:	d1e4      	bne.n	8000fe8 <__cmpsf2+0x1c>
 800101e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001022:	d0e1      	beq.n	8000fe8 <__cmpsf2+0x1c>
 8001024:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__aeabi_cfrcmple>:
 800102c:	4684      	mov	ip, r0
 800102e:	4608      	mov	r0, r1
 8001030:	4661      	mov	r1, ip
 8001032:	e7ff      	b.n	8001034 <__aeabi_cfcmpeq>

08001034 <__aeabi_cfcmpeq>:
 8001034:	b50f      	push	{r0, r1, r2, r3, lr}
 8001036:	f7ff ffc9 	bl	8000fcc <__cmpsf2>
 800103a:	2800      	cmp	r0, #0
 800103c:	bf48      	it	mi
 800103e:	f110 0f00 	cmnmi.w	r0, #0
 8001042:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001044 <__aeabi_fcmpeq>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff fff4 	bl	8001034 <__aeabi_cfcmpeq>
 800104c:	bf0c      	ite	eq
 800104e:	2001      	moveq	r0, #1
 8001050:	2000      	movne	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmplt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffea 	bl	8001034 <__aeabi_cfcmpeq>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmple>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffe0 	bl	8001034 <__aeabi_cfcmpeq>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpge>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffd2 	bl	800102c <__aeabi_cfrcmple>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpgt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffc8 	bl	800102c <__aeabi_cfrcmple>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_f2iz>:
 80010a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b0:	d30f      	bcc.n	80010d2 <__aeabi_f2iz+0x2a>
 80010b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ba:	d90d      	bls.n	80010d8 <__aeabi_f2iz+0x30>
 80010bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c8:	fa23 f002 	lsr.w	r0, r3, r2
 80010cc:	bf18      	it	ne
 80010ce:	4240      	negne	r0, r0
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	4770      	bx	lr
 80010d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010dc:	d101      	bne.n	80010e2 <__aeabi_f2iz+0x3a>
 80010de:	0242      	lsls	r2, r0, #9
 80010e0:	d105      	bne.n	80010ee <__aeabi_f2iz+0x46>
 80010e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e6:	bf08      	it	eq
 80010e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295
 8001104:	f04f 30ff 	movne.w	r0, #4294967295
 8001108:	f000 b982 	b.w	8001410 <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f806 	bl	8001124 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__udivmoddi4>:
 8001124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001128:	468c      	mov	ip, r1
 800112a:	460c      	mov	r4, r1
 800112c:	4605      	mov	r5, r0
 800112e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001130:	2b00      	cmp	r3, #0
 8001132:	d14f      	bne.n	80011d4 <__udivmoddi4+0xb0>
 8001134:	428a      	cmp	r2, r1
 8001136:	4617      	mov	r7, r2
 8001138:	d96b      	bls.n	8001212 <__udivmoddi4+0xee>
 800113a:	fab2 fe82 	clz	lr, r2
 800113e:	f1be 0f00 	cmp.w	lr, #0
 8001142:	d00b      	beq.n	800115c <__udivmoddi4+0x38>
 8001144:	f1ce 0520 	rsb	r5, lr, #32
 8001148:	fa20 f505 	lsr.w	r5, r0, r5
 800114c:	fa01 f30e 	lsl.w	r3, r1, lr
 8001150:	ea45 0c03 	orr.w	ip, r5, r3
 8001154:	fa02 f70e 	lsl.w	r7, r2, lr
 8001158:	fa00 f50e 	lsl.w	r5, r0, lr
 800115c:	0c39      	lsrs	r1, r7, #16
 800115e:	fbbc f0f1 	udiv	r0, ip, r1
 8001162:	b2ba      	uxth	r2, r7
 8001164:	fb01 c310 	mls	r3, r1, r0, ip
 8001168:	fb00 f802 	mul.w	r8, r0, r2
 800116c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8001170:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8001174:	45a0      	cmp	r8, r4
 8001176:	d909      	bls.n	800118c <__udivmoddi4+0x68>
 8001178:	19e4      	adds	r4, r4, r7
 800117a:	f100 33ff 	add.w	r3, r0, #4294967295
 800117e:	f080 8128 	bcs.w	80013d2 <__udivmoddi4+0x2ae>
 8001182:	45a0      	cmp	r8, r4
 8001184:	f240 8125 	bls.w	80013d2 <__udivmoddi4+0x2ae>
 8001188:	3802      	subs	r0, #2
 800118a:	443c      	add	r4, r7
 800118c:	ebc8 0404 	rsb	r4, r8, r4
 8001190:	fbb4 f3f1 	udiv	r3, r4, r1
 8001194:	fb01 4c13 	mls	ip, r1, r3, r4
 8001198:	fb03 f202 	mul.w	r2, r3, r2
 800119c:	b2ac      	uxth	r4, r5
 800119e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80011a2:	428a      	cmp	r2, r1
 80011a4:	d909      	bls.n	80011ba <__udivmoddi4+0x96>
 80011a6:	19c9      	adds	r1, r1, r7
 80011a8:	f103 34ff 	add.w	r4, r3, #4294967295
 80011ac:	f080 810f 	bcs.w	80013ce <__udivmoddi4+0x2aa>
 80011b0:	428a      	cmp	r2, r1
 80011b2:	f240 810c 	bls.w	80013ce <__udivmoddi4+0x2aa>
 80011b6:	3b02      	subs	r3, #2
 80011b8:	4439      	add	r1, r7
 80011ba:	1a8a      	subs	r2, r1, r2
 80011bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011c0:	2100      	movs	r1, #0
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d063      	beq.n	800128e <__udivmoddi4+0x16a>
 80011c6:	fa22 f20e 	lsr.w	r2, r2, lr
 80011ca:	2300      	movs	r3, #0
 80011cc:	e886 000c 	stmia.w	r6, {r2, r3}
 80011d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d4:	428b      	cmp	r3, r1
 80011d6:	d907      	bls.n	80011e8 <__udivmoddi4+0xc4>
 80011d8:	2e00      	cmp	r6, #0
 80011da:	d056      	beq.n	800128a <__udivmoddi4+0x166>
 80011dc:	2100      	movs	r1, #0
 80011de:	e886 0011 	stmia.w	r6, {r0, r4}
 80011e2:	4608      	mov	r0, r1
 80011e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011e8:	fab3 f183 	clz	r1, r3
 80011ec:	2900      	cmp	r1, #0
 80011ee:	f040 8093 	bne.w	8001318 <__udivmoddi4+0x1f4>
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	d302      	bcc.n	80011fc <__udivmoddi4+0xd8>
 80011f6:	4282      	cmp	r2, r0
 80011f8:	f200 80fe 	bhi.w	80013f8 <__udivmoddi4+0x2d4>
 80011fc:	1a85      	subs	r5, r0, r2
 80011fe:	eb64 0303 	sbc.w	r3, r4, r3
 8001202:	469c      	mov	ip, r3
 8001204:	2001      	movs	r0, #1
 8001206:	2e00      	cmp	r6, #0
 8001208:	d041      	beq.n	800128e <__udivmoddi4+0x16a>
 800120a:	e886 1020 	stmia.w	r6, {r5, ip}
 800120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001212:	b912      	cbnz	r2, 800121a <__udivmoddi4+0xf6>
 8001214:	2701      	movs	r7, #1
 8001216:	fbb7 f7f2 	udiv	r7, r7, r2
 800121a:	fab7 fe87 	clz	lr, r7
 800121e:	f1be 0f00 	cmp.w	lr, #0
 8001222:	d136      	bne.n	8001292 <__udivmoddi4+0x16e>
 8001224:	1be4      	subs	r4, r4, r7
 8001226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800122a:	fa1f f987 	uxth.w	r9, r7
 800122e:	2101      	movs	r1, #1
 8001230:	fbb4 f3f8 	udiv	r3, r4, r8
 8001234:	fb08 4413 	mls	r4, r8, r3, r4
 8001238:	fb09 f203 	mul.w	r2, r9, r3
 800123c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8001240:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8001244:	42a2      	cmp	r2, r4
 8001246:	d907      	bls.n	8001258 <__udivmoddi4+0x134>
 8001248:	19e4      	adds	r4, r4, r7
 800124a:	f103 30ff 	add.w	r0, r3, #4294967295
 800124e:	d202      	bcs.n	8001256 <__udivmoddi4+0x132>
 8001250:	42a2      	cmp	r2, r4
 8001252:	f200 80d3 	bhi.w	80013fc <__udivmoddi4+0x2d8>
 8001256:	4603      	mov	r3, r0
 8001258:	1aa4      	subs	r4, r4, r2
 800125a:	fbb4 f0f8 	udiv	r0, r4, r8
 800125e:	fb08 4810 	mls	r8, r8, r0, r4
 8001262:	fb09 f900 	mul.w	r9, r9, r0
 8001266:	b2ac      	uxth	r4, r5
 8001268:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 800126c:	4591      	cmp	r9, r2
 800126e:	d907      	bls.n	8001280 <__udivmoddi4+0x15c>
 8001270:	19d2      	adds	r2, r2, r7
 8001272:	f100 34ff 	add.w	r4, r0, #4294967295
 8001276:	d202      	bcs.n	800127e <__udivmoddi4+0x15a>
 8001278:	4591      	cmp	r9, r2
 800127a:	f200 80ba 	bhi.w	80013f2 <__udivmoddi4+0x2ce>
 800127e:	4620      	mov	r0, r4
 8001280:	ebc9 0202 	rsb	r2, r9, r2
 8001284:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001288:	e79b      	b.n	80011c2 <__udivmoddi4+0x9e>
 800128a:	4631      	mov	r1, r6
 800128c:	4630      	mov	r0, r6
 800128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001292:	fa07 f70e 	lsl.w	r7, r7, lr
 8001296:	f1ce 0c20 	rsb	ip, lr, #32
 800129a:	fa24 f30c 	lsr.w	r3, r4, ip
 800129e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80012a2:	fbb3 faf8 	udiv	sl, r3, r8
 80012a6:	fa1f f987 	uxth.w	r9, r7
 80012aa:	fb08 351a 	mls	r5, r8, sl, r3
 80012ae:	fa20 fc0c 	lsr.w	ip, r0, ip
 80012b2:	fa04 f40e 	lsl.w	r4, r4, lr
 80012b6:	fb0a fb09 	mul.w	fp, sl, r9
 80012ba:	ea4c 0c04 	orr.w	ip, ip, r4
 80012be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80012c2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80012c6:	459b      	cmp	fp, r3
 80012c8:	fa00 f50e 	lsl.w	r5, r0, lr
 80012cc:	d90a      	bls.n	80012e4 <__udivmoddi4+0x1c0>
 80012ce:	19db      	adds	r3, r3, r7
 80012d0:	f10a 32ff 	add.w	r2, sl, #4294967295
 80012d4:	f080 808b 	bcs.w	80013ee <__udivmoddi4+0x2ca>
 80012d8:	459b      	cmp	fp, r3
 80012da:	f240 8088 	bls.w	80013ee <__udivmoddi4+0x2ca>
 80012de:	f1aa 0a02 	sub.w	sl, sl, #2
 80012e2:	443b      	add	r3, r7
 80012e4:	ebcb 0303 	rsb	r3, fp, r3
 80012e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80012ec:	fb08 3310 	mls	r3, r8, r0, r3
 80012f0:	fb00 f409 	mul.w	r4, r0, r9
 80012f4:	fa1f fc8c 	uxth.w	ip, ip
 80012f8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80012fc:	429c      	cmp	r4, r3
 80012fe:	d907      	bls.n	8001310 <__udivmoddi4+0x1ec>
 8001300:	19db      	adds	r3, r3, r7
 8001302:	f100 32ff 	add.w	r2, r0, #4294967295
 8001306:	d26e      	bcs.n	80013e6 <__udivmoddi4+0x2c2>
 8001308:	429c      	cmp	r4, r3
 800130a:	d96c      	bls.n	80013e6 <__udivmoddi4+0x2c2>
 800130c:	3802      	subs	r0, #2
 800130e:	443b      	add	r3, r7
 8001310:	1b1c      	subs	r4, r3, r4
 8001312:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8001316:	e78b      	b.n	8001230 <__udivmoddi4+0x10c>
 8001318:	f1c1 0e20 	rsb	lr, r1, #32
 800131c:	408b      	lsls	r3, r1
 800131e:	fa22 fc0e 	lsr.w	ip, r2, lr
 8001322:	ea4c 0c03 	orr.w	ip, ip, r3
 8001326:	fa24 f70e 	lsr.w	r7, r4, lr
 800132a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800132e:	fbb7 faf9 	udiv	sl, r7, r9
 8001332:	fa1f f38c 	uxth.w	r3, ip
 8001336:	fb09 771a 	mls	r7, r9, sl, r7
 800133a:	fa20 f80e 	lsr.w	r8, r0, lr
 800133e:	408c      	lsls	r4, r1
 8001340:	fb0a f503 	mul.w	r5, sl, r3
 8001344:	ea48 0404 	orr.w	r4, r8, r4
 8001348:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800134c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8001350:	42bd      	cmp	r5, r7
 8001352:	fa02 f201 	lsl.w	r2, r2, r1
 8001356:	fa00 fb01 	lsl.w	fp, r0, r1
 800135a:	d909      	bls.n	8001370 <__udivmoddi4+0x24c>
 800135c:	eb17 070c 	adds.w	r7, r7, ip
 8001360:	f10a 30ff 	add.w	r0, sl, #4294967295
 8001364:	d241      	bcs.n	80013ea <__udivmoddi4+0x2c6>
 8001366:	42bd      	cmp	r5, r7
 8001368:	d93f      	bls.n	80013ea <__udivmoddi4+0x2c6>
 800136a:	f1aa 0a02 	sub.w	sl, sl, #2
 800136e:	4467      	add	r7, ip
 8001370:	1b7f      	subs	r7, r7, r5
 8001372:	fbb7 f5f9 	udiv	r5, r7, r9
 8001376:	fb09 7715 	mls	r7, r9, r5, r7
 800137a:	fb05 f303 	mul.w	r3, r5, r3
 800137e:	b2a4      	uxth	r4, r4
 8001380:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8001384:	42bb      	cmp	r3, r7
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x276>
 8001388:	eb17 070c 	adds.w	r7, r7, ip
 800138c:	f105 30ff 	add.w	r0, r5, #4294967295
 8001390:	d227      	bcs.n	80013e2 <__udivmoddi4+0x2be>
 8001392:	42bb      	cmp	r3, r7
 8001394:	d925      	bls.n	80013e2 <__udivmoddi4+0x2be>
 8001396:	3d02      	subs	r5, #2
 8001398:	4467      	add	r7, ip
 800139a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 800139e:	fba0 8902 	umull	r8, r9, r0, r2
 80013a2:	1aff      	subs	r7, r7, r3
 80013a4:	454f      	cmp	r7, r9
 80013a6:	4645      	mov	r5, r8
 80013a8:	464c      	mov	r4, r9
 80013aa:	d314      	bcc.n	80013d6 <__udivmoddi4+0x2b2>
 80013ac:	d029      	beq.n	8001402 <__udivmoddi4+0x2de>
 80013ae:	b366      	cbz	r6, 800140a <__udivmoddi4+0x2e6>
 80013b0:	ebbb 0305 	subs.w	r3, fp, r5
 80013b4:	eb67 0704 	sbc.w	r7, r7, r4
 80013b8:	fa07 fe0e 	lsl.w	lr, r7, lr
 80013bc:	40cb      	lsrs	r3, r1
 80013be:	40cf      	lsrs	r7, r1
 80013c0:	ea4e 0303 	orr.w	r3, lr, r3
 80013c4:	e886 0088 	stmia.w	r6, {r3, r7}
 80013c8:	2100      	movs	r1, #0
 80013ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ce:	4623      	mov	r3, r4
 80013d0:	e6f3      	b.n	80011ba <__udivmoddi4+0x96>
 80013d2:	4618      	mov	r0, r3
 80013d4:	e6da      	b.n	800118c <__udivmoddi4+0x68>
 80013d6:	ebb8 0502 	subs.w	r5, r8, r2
 80013da:	eb69 040c 	sbc.w	r4, r9, ip
 80013de:	3801      	subs	r0, #1
 80013e0:	e7e5      	b.n	80013ae <__udivmoddi4+0x28a>
 80013e2:	4605      	mov	r5, r0
 80013e4:	e7d9      	b.n	800139a <__udivmoddi4+0x276>
 80013e6:	4610      	mov	r0, r2
 80013e8:	e792      	b.n	8001310 <__udivmoddi4+0x1ec>
 80013ea:	4682      	mov	sl, r0
 80013ec:	e7c0      	b.n	8001370 <__udivmoddi4+0x24c>
 80013ee:	4692      	mov	sl, r2
 80013f0:	e778      	b.n	80012e4 <__udivmoddi4+0x1c0>
 80013f2:	3802      	subs	r0, #2
 80013f4:	443a      	add	r2, r7
 80013f6:	e743      	b.n	8001280 <__udivmoddi4+0x15c>
 80013f8:	4608      	mov	r0, r1
 80013fa:	e704      	b.n	8001206 <__udivmoddi4+0xe2>
 80013fc:	3b02      	subs	r3, #2
 80013fe:	443c      	add	r4, r7
 8001400:	e72a      	b.n	8001258 <__udivmoddi4+0x134>
 8001402:	45c3      	cmp	fp, r8
 8001404:	d3e7      	bcc.n	80013d6 <__udivmoddi4+0x2b2>
 8001406:	463c      	mov	r4, r7
 8001408:	e7d1      	b.n	80013ae <__udivmoddi4+0x28a>
 800140a:	4631      	mov	r1, r6
 800140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001410 <__aeabi_idiv0>:
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	2300      	movs	r3, #0
 8001422:	73bb      	strb	r3, [r7, #14]
 8001424:	230f      	movs	r3, #15
 8001426:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	78db      	ldrb	r3, [r3, #3]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d038      	beq.n	80014a2 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <NVIC_Init+0xb8>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	43db      	mvns	r3, r3
 8001436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	f1c3 0304 	rsb	r3, r3, #4
 8001444:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001446:	7b7a      	ldrb	r2, [r7, #13]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	fa42 f303 	asr.w	r3, r2, r3
 800144e:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	785b      	ldrb	r3, [r3, #1]
 8001454:	461a      	mov	r2, r3
 8001456:	7bbb      	ldrb	r3, [r7, #14]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	789a      	ldrb	r2, [r3, #2]
 8001462:	7b7b      	ldrb	r3, [r7, #13]
 8001464:	4013      	ands	r3, r2
 8001466:	b2da      	uxtb	r2, r3
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	4313      	orrs	r3, r2
 800146c:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001474:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <NVIC_Init+0xbc>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <NVIC_Init+0xbc>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	095b      	lsrs	r3, r3, #5
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800149c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80014a0:	e00f      	b.n	80014c2 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014a2:	490b      	ldr	r1, [pc, #44]	; (80014d0 <NVIC_Init+0xbc>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	095b      	lsrs	r3, r3, #5
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	2201      	movs	r2, #1
 80014b8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80014ba:	f100 0320 	add.w	r3, r0, #32
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80014f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	021a      	lsls	r2, r3, #8
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4313      	orrs	r3, r2
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <ADC_Init+0xa4>)
 800151a:	4013      	ands	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 800152c:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	795b      	ldrb	r3, [r3, #5]
 8001532:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8001534:	4313      	orrs	r3, r2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 800154e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	7d1b      	ldrb	r3, [r3, #20]
 8001554:	3b01      	subs	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	4313      	orrs	r3, r2
 800155c:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800155e:	7afb      	ldrb	r3, [r7, #11]
 8001560:	051b      	lsls	r3, r3, #20
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	c0fff7fd 	.word	0xc0fff7fd

0800157c <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80015a2:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	751a      	strb	r2, [r3, #20]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80015da:	e005      	b.n	80015e8 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 0201 	bic.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
  }
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	70fb      	strb	r3, [r7, #3]
 8001606:	460b      	mov	r3, r1
 8001608:	70bb      	strb	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	2b1d      	cmp	r3, #29
 800161a:	d923      	bls.n	8001664 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	f1a3 021e 	sub.w	r2, r3, #30
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	43db      	mvns	r3, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 8001640:	7879      	ldrb	r1, [r7, #1]
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f1a3 021e 	sub.w	r2, r3, #30
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4313      	orrs	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	65da      	str	r2, [r3, #92]	; 0x5c
 8001662:	e06c      	b.n	800173e <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2b13      	cmp	r3, #19
 8001668:	d923      	bls.n	80016b2 <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f1a3 0214 	sub.w	r2, r3, #20
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	2207      	movs	r2, #7
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	43db      	mvns	r3, r3
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800168e:	7879      	ldrb	r1, [r7, #1]
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	f1a3 0214 	sub.w	r2, r3, #20
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	e045      	b.n	800173e <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d923      	bls.n	8001700 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	f1a3 020a 	sub.w	r2, r3, #10
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	2207      	movs	r2, #7
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80016dc:	7879      	ldrb	r1, [r7, #1]
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	f1a3 020a 	sub.w	r2, r3, #10
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	e01e      	b.n	800173e <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8001706:	78fa      	ldrb	r2, [r7, #3]
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	43db      	mvns	r3, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001720:	7879      	ldrb	r1, [r7, #1]
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800173e:	78bb      	ldrb	r3, [r7, #2]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d821      	bhi.n	8001788 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 800174a:	78bb      	ldrb	r3, [r7, #2]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	221f      	movs	r2, #31
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	43db      	mvns	r3, r3
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4013      	ands	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8001766:	78f9      	ldrb	r1, [r7, #3]
 8001768:	78bb      	ldrb	r3, [r7, #2]
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	4313      	orrs	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8001786:	e095      	b.n	80018b4 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8001788:	78bb      	ldrb	r3, [r7, #2]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d821      	bhi.n	80017d2 <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001792:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8001794:	78bb      	ldrb	r3, [r7, #2]
 8001796:	1fda      	subs	r2, r3, #7
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	221f      	movs	r2, #31
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80017b0:	78f9      	ldrb	r1, [r7, #3]
 80017b2:	78bb      	ldrb	r3, [r7, #2]
 80017b4:	1fda      	subs	r2, r3, #7
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80017d0:	e070      	b.n	80018b4 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 80017d2:	78bb      	ldrb	r3, [r7, #2]
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	d823      	bhi.n	8001820 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 80017de:	78bb      	ldrb	r3, [r7, #2]
 80017e0:	f1a3 020d 	sub.w	r2, r3, #13
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	221f      	movs	r2, #31
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80017fc:	78f9      	ldrb	r1, [r7, #3]
 80017fe:	78bb      	ldrb	r3, [r7, #2]
 8001800:	f1a3 020d 	sub.w	r2, r3, #13
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	4313      	orrs	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800181e:	e049      	b.n	80018b4 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	2b18      	cmp	r3, #24
 8001824:	d823      	bhi.n	800186e <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 800182c:	78bb      	ldrb	r3, [r7, #2]
 800182e:	f1a3 0213 	sub.w	r2, r3, #19
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	221f      	movs	r2, #31
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	43db      	mvns	r3, r3
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 800184a:	78f9      	ldrb	r1, [r7, #3]
 800184c:	78bb      	ldrb	r3, [r7, #2]
 800184e:	f1a3 0213 	sub.w	r2, r3, #19
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800186c:	e022      	b.n	80018b4 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8001874:	78bb      	ldrb	r3, [r7, #2]
 8001876:	f1a3 0219 	sub.w	r2, r3, #25
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	221f      	movs	r2, #31
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	43db      	mvns	r3, r3
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8001892:	78f9      	ldrb	r1, [r7, #3]
 8001894:	78bb      	ldrb	r3, [r7, #2]
 8001896:	f1a3 0219 	sub.w	r2, r3, #25
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	609a      	str	r2, [r3, #8]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop

080018e0 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 80018fe:	e005      	b.n	800190c <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
  }
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop

08001918 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= ADC_CR2_DDS;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)~ADC_CR2_DDS;
  }
}
 8001936:	e005      	b.n	8001944 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)~ADC_CR2_DDS;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]
  }
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 800196a:	2201      	movs	r2, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8001986:	e006      	b.n	8001996 <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43db      	mvns	r3, r3
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	605a      	str	r2, [r3, #4]
  }
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e001      	b.n	80019c6 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f2:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001a02:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001a0e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001a1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60da      	str	r2, [r3, #12]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001a6e:	e006      	b.n	8001a7e <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001a78:	4013      	ands	r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	4613      	mov	r3, r2
 8001a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8001aa8:	e006      	b.n	8001ab8 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	601a      	str	r2, [r3, #0]
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <DMA_GetITStatus>:
  *    DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
 
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_MASK) == (uint32_t)RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <DMA_GetITStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <DMA_GetITStatus+0x48>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	e002      	b.n	8001aec <DMA_GetITStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <DMA_GetITStatus+0x4c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60bb      	str	r3, [r7, #8]
  }
  
  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <DMA_GetITStatus+0x38>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e001      	b.n	8001b00 <DMA_GetITStatus+0x3c>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMAy_IT status */
  return  bitstatus;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40026000 	.word	0x40026000
 8001b10:	40026400 	.word	0x40026400

08001b14 <DMA_ClearITPendingBit>:
  *    DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_MASK) == (uint32_t)RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 8001b26:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <DMA_ClearITPendingBit+0x2c>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
  }  
}
 8001b2c:	e002      	b.n	8001b34 <DMA_ClearITPendingBit+0x20>
    DMA1->IFCR = DMAy_IT;
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <DMA_ClearITPendingBit+0x30>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6053      	str	r3, [r2, #4]
  }  
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40026000 	.word	0x40026000
 8001b44:	40026400 	.word	0x40026400

08001b48 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e07e      	b.n	8001c62 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001b64:	2201      	movs	r2, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d16d      	bne.n	8001c5c <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2103      	movs	r1, #3
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	401a      	ands	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	791b      	ldrb	r3, [r3, #4]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	791b      	ldrb	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d003      	beq.n	8001bbe <GPIO_Init+0x76>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d136      	bne.n	8001c2c <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2103      	movs	r1, #3
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	795b      	ldrb	r3, [r3, #5]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	889b      	ldrh	r3, [r3, #4]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4013      	ands	r3, r2
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	889b      	ldrh	r3, [r3, #4]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b21a      	sxth	r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	799b      	ldrb	r3, [r3, #6]
 8001c16:	4619      	mov	r1, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2103      	movs	r1, #3
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	401a      	ands	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	79db      	ldrb	r3, [r3, #7]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	f67f af7d 	bls.w	8001b64 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001c8c:	787a      	ldrb	r2, [r7, #1]
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	08db      	lsrs	r3, r3, #3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	08db      	lsrs	r3, r3, #3
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	210f      	movs	r1, #15
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	ea02 0103 	and.w	r1, r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f100 0208 	add.w	r2, r0, #8
 8001cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	08db      	lsrs	r3, r3, #3
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <RCC_HSICmd+0x1c>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	42470000 	.word	0x42470000

08001d24 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001d36:	4909      	ldr	r1, [pc, #36]	; (8001d5c <RCC_AHBPeriphClockCmd+0x38>)
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <RCC_AHBPeriphClockCmd+0x38>)
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001d42:	e006      	b.n	8001d52 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001d44:	4905      	ldr	r1, [pc, #20]	; (8001d5c <RCC_AHBPeriphClockCmd+0x38>)
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <RCC_AHBPeriphClockCmd+0x38>)
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61cb      	str	r3, [r1, #28]
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	40023800 	.word	0x40023800

08001d60 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001d72:	4909      	ldr	r1, [pc, #36]	; (8001d98 <RCC_APB2PeriphClockCmd+0x38>)
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <RCC_APB2PeriphClockCmd+0x38>)
 8001d76:	6a1a      	ldr	r2, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001d7e:	e006      	b.n	8001d8e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001d80:	4905      	ldr	r1, [pc, #20]	; (8001d98 <RCC_APB2PeriphClockCmd+0x38>)
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <RCC_APB2PeriphClockCmd+0x38>)
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	620b      	str	r3, [r1, #32]
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40023800 	.word	0x40023800

08001d9c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d103      	bne.n	8001dc8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <RCC_GetFlagStatus+0x60>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e002      	b.n	8001dce <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <RCC_GetFlagStatus+0x60>)
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8001de6:	2301      	movs	r3, #1
 8001de8:	74fb      	strb	r3, [r7, #19]
 8001dea:	e001      	b.n	8001df0 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	40023800 	.word	0x40023800

08001e00 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001e1a:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	881a      	ldrh	r2, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	885b      	ldrh	r3, [r3, #2]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e44:	4313      	orrs	r3, r2
 8001e46:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	89fb      	ldrh	r3, [r7, #14]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	89fa      	ldrh	r2, [r7, #14]
 8001e62:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	8b9b      	ldrh	r3, [r3, #28]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	8a1a      	ldrh	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	821a      	strh	r2, [r3, #16]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8001eaa:	e007      	b.n	8001ebc <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	801a      	strh	r2, [r3, #0]
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop

08001ec8 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	891b      	ldrh	r3, [r3, #8]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop

08001f00 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	81bb      	strh	r3, [r7, #12]
 8001f14:	2300      	movs	r3, #0
 8001f16:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	8a1b      	ldrh	r3, [r3, #16]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	4013      	ands	r3, r2
 8001f22:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	899b      	ldrh	r3, [r3, #12]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001f30:	89bb      	ldrh	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <TIM_GetITStatus+0x42>
 8001f36:	897b      	ldrh	r3, [r7, #10]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop

08001f54 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	821a      	strh	r2, [r3, #16]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8001f78:	f000 fcd0 	bl	800291c <res_reset>
	Delay(10000);
 8001f7c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f80:	f001 fd6a 	bl	8003a58 <Delay>

	res_set();
 8001f84:	f000 fcbe 	bl	8002904 <res_set>
	Delay(10000);
 8001f88:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f8c:	f001 fd64 	bl	8003a58 <Delay>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8001f9e:	f000 fc87 	bl	80028b0 <cd_reset>

	readWriteSPI2(address);
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fc17 	bl	80027d8 <readWriteSPI2>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop

08001fb4 <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8001fbe:	f000 fc6b 	bl	8002898 <cd_set>

	readWriteSPI2(parameter);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fc07 	bl	80027d8 <readWriteSPI2>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop

08001fd4 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460a      	mov	r2, r1
 8001fde:	71fb      	strb	r3, [r7, #7]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8001fe4:	f000 fc58 	bl	8002898 <cd_set>

	readWriteSPI2(dataByte1);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fbf4 	bl	80027d8 <readWriteSPI2>
	readWriteSPI2(dataByte2);
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fbf0 	bl	80027d8 <readWriteSPI2>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <lcdInitialise>:

// Initialise the display with the require screen orientation
void lcdInitialise(uint8_t orientation)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 800200a:	f7ff ffb3 	bl	8001f74 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 800200e:	2011      	movs	r0, #17
 8002010:	f7ff ffc0 	bl	8001f94 <lcdWriteCommand>
    Delay(10000); // Wait for the screen to wake up
 8002014:	f242 7010 	movw	r0, #10000	; 0x2710
 8002018:	f001 fd1e 	bl	8003a58 <Delay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 800201c:	203a      	movs	r0, #58	; 0x3a
 800201e:	f7ff ffb9 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8002022:	2005      	movs	r0, #5
 8002024:	f7ff ffc6 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8002028:	2026      	movs	r0, #38	; 0x26
 800202a:	f7ff ffb3 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 800202e:	2004      	movs	r0, #4
 8002030:	f7ff ffc0 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8002034:	20f2      	movs	r0, #242	; 0xf2
 8002036:	f7ff ffad 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff ffba 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8002040:	20e0      	movs	r0, #224	; 0xe0
 8002042:	f7ff ffa7 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8002046:	203f      	movs	r0, #63	; 0x3f
 8002048:	f7ff ffb4 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 800204c:	2025      	movs	r0, #37	; 0x25
 800204e:	f7ff ffb1 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8002052:	201c      	movs	r0, #28
 8002054:	f7ff ffae 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8002058:	201e      	movs	r0, #30
 800205a:	f7ff ffab 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 800205e:	2020      	movs	r0, #32
 8002060:	f7ff ffa8 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8002064:	2012      	movs	r0, #18
 8002066:	f7ff ffa5 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 800206a:	202a      	movs	r0, #42	; 0x2a
 800206c:	f7ff ffa2 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8002070:	2090      	movs	r0, #144	; 0x90
 8002072:	f7ff ff9f 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8002076:	2024      	movs	r0, #36	; 0x24
 8002078:	f7ff ff9c 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 800207c:	2011      	movs	r0, #17
 800207e:	f7ff ff99 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff ff96 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff ff93 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff ff90 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff ff8d 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff ff8a 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 80020a0:	20e1      	movs	r0, #225	; 0xe1
 80020a2:	f7ff ff77 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 80020a6:	2020      	movs	r0, #32
 80020a8:	f7ff ff84 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 80020ac:	2020      	movs	r0, #32
 80020ae:	f7ff ff81 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 80020b2:	2020      	movs	r0, #32
 80020b4:	f7ff ff7e 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 80020b8:	2020      	movs	r0, #32
 80020ba:	f7ff ff7b 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 80020be:	2005      	movs	r0, #5
 80020c0:	f7ff ff78 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff ff75 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 80020ca:	2015      	movs	r0, #21
 80020cc:	f7ff ff72 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 80020d0:	20a7      	movs	r0, #167	; 0xa7
 80020d2:	f7ff ff6f 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 80020d6:	203d      	movs	r0, #61	; 0x3d
 80020d8:	f7ff ff6c 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 80020dc:	2018      	movs	r0, #24
 80020de:	f7ff ff69 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 80020e2:	2025      	movs	r0, #37	; 0x25
 80020e4:	f7ff ff66 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 80020e8:	202a      	movs	r0, #42	; 0x2a
 80020ea:	f7ff ff63 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 80020ee:	202b      	movs	r0, #43	; 0x2b
 80020f0:	f7ff ff60 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 80020f4:	202b      	movs	r0, #43	; 0x2b
 80020f6:	f7ff ff5d 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 80020fa:	203a      	movs	r0, #58	; 0x3a
 80020fc:	f7ff ff5a 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8002100:	20b1      	movs	r0, #177	; 0xb1
 8002102:	f7ff ff47 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8002106:	2008      	movs	r0, #8
 8002108:	f7ff ff54 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 800210c:	2008      	movs	r0, #8
 800210e:	f7ff ff51 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8002112:	20b4      	movs	r0, #180	; 0xb4
 8002114:	f7ff ff3e 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8002118:	2007      	movs	r0, #7
 800211a:	f7ff ff4b 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 800211e:	20c0      	movs	r0, #192	; 0xc0
 8002120:	f7ff ff38 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8002124:	200a      	movs	r0, #10
 8002126:	f7ff ff45 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 800212a:	2002      	movs	r0, #2
 800212c:	f7ff ff42 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8002130:	20c1      	movs	r0, #193	; 0xc1
 8002132:	f7ff ff2f 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8002136:	2002      	movs	r0, #2
 8002138:	f7ff ff3c 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 800213c:	20c5      	movs	r0, #197	; 0xc5
 800213e:	f7ff ff29 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8002142:	2050      	movs	r0, #80	; 0x50
 8002144:	f7ff ff36 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8002148:	205b      	movs	r0, #91	; 0x5b
 800214a:	f7ff ff33 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 800214e:	20c7      	movs	r0, #199	; 0xc7
 8002150:	f7ff ff20 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8002154:	2040      	movs	r0, #64	; 0x40
 8002156:	f7ff ff2d 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 800215a:	202a      	movs	r0, #42	; 0x2a
 800215c:	f7ff ff1a 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff ff27 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff ff24 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff ff21 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 8002172:	207f      	movs	r0, #127	; 0x7f
 8002174:	f7ff ff1e 	bl	8001fb4 <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8002178:	202b      	movs	r0, #43	; 0x2b
 800217a:	f7ff ff0b 	bl	8001f94 <lcdWriteCommand>
    lcdWriteParameter(0x00);
 800217e:	2000      	movs	r0, #0
 8002180:	f7ff ff18 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff ff15 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 800218a:	2000      	movs	r0, #0
 800218c:	f7ff ff12 	bl	8001fb4 <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 8002190:	207f      	movs	r0, #127	; 0x7f
 8002192:	f7ff ff0f 	bl	8001fb4 <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8002196:	2036      	movs	r0, #54	; 0x36
 8002198:	f7ff fefc 	bl	8001f94 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff08 	bl	8001fb4 <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 80021a4:	2029      	movs	r0, #41	; 0x29
 80021a6:	f7ff fef5 	bl	8001f94 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 80021aa:	202c      	movs	r0, #44	; 0x2c
 80021ac:	f7ff fef2 	bl	8001f94 <lcdWriteCommand>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80021c2:	202a      	movs	r0, #42	; 0x2a
 80021c4:	f7ff fee6 	bl	8001f94 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff fef3 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff fef0 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff feed 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80021da:	207f      	movs	r0, #127	; 0x7f
 80021dc:	f7ff feea 	bl	8001fb4 <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 80021e0:	202b      	movs	r0, #43	; 0x2b
 80021e2:	f7ff fed7 	bl	8001f94 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff fee4 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff fee1 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff fede 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80021f8:	207f      	movs	r0, #127	; 0x7f
 80021fa:	f7ff fedb 	bl	8001fb4 <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 80021fe:	202c      	movs	r0, #44	; 0x2c
 8002200:	f7ff fec8 	bl	8001f94 <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++) lcdWriteData(colour >> 8, colour);
 8002204:	2300      	movs	r3, #0
 8002206:	81fb      	strh	r3, [r7, #14]
 8002208:	e00c      	b.n	8002224 <lcdClearDisplay+0x6c>
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	b29b      	uxth	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fedb 	bl	8001fd4 <lcdWriteData>
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	3301      	adds	r3, #1
 8002222:	81fb      	strh	r3, [r7, #14]
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800222a:	d9ee      	bls.n	800220a <lcdClearDisplay+0x52>
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <lcdPlot>:

void lcdPlot(uint8_t x, uint8_t y, uint16_t colour)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	460b      	mov	r3, r1
 8002240:	71bb      	strb	r3, [r7, #6]
 8002242:	4613      	mov	r3, r2
 8002244:	80bb      	strh	r3, [r7, #4]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8002246:	202a      	movs	r0, #42	; 0x2a
 8002248:	f7ff fea4 	bl	8001f94 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff feb1 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(x);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fead 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff feaa 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8002260:	207f      	movs	r0, #127	; 0x7f
 8002262:	f7ff fea7 	bl	8001fb4 <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8002266:	202b      	movs	r0, #43	; 0x2b
 8002268:	f7ff fe94 	bl	8001f94 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff fea1 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(y);
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fe9d 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800227a:	2000      	movs	r0, #0
 800227c:	f7ff fe9a 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x7f);//7f
 8002280:	207f      	movs	r0, #127	; 0x7f
 8002282:	f7ff fe97 	bl	8001fb4 <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 8002286:	202c      	movs	r0, #44	; 0x2c
 8002288:	f7ff fe84 	bl	8001f94 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 800228c:	88bb      	ldrh	r3, [r7, #4]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	b29b      	uxth	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	88ba      	ldrh	r2, [r7, #4]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fe9a 	bl	8001fd4 <lcdWriteData>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <lcdLine>:

// Draw a line from x0, y0 to x1, y1
// Note:	This is a version of Bresenham's line drawing algorithm
//			It only draws lines from left to right!
void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4604      	mov	r4, r0
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4623      	mov	r3, r4
 80022b8:	80fb      	strh	r3, [r7, #6]
 80022ba:	4603      	mov	r3, r0
 80022bc:	80bb      	strh	r3, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]
 80022c2:	4613      	mov	r3, r2
 80022c4:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 80022c6:	883a      	ldrh	r2, [r7, #0]
 80022c8:	88bb      	ldrh	r3, [r7, #4]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	82fb      	strh	r3, [r7, #22]
	int16_t dx = x1 - x0;
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	82bb      	strh	r3, [r7, #20]
	int16_t stepx, stepy;

	if (dy < 0)
 80022da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da07      	bge.n	80022f2 <lcdLine+0x4a>
	{
		dy = -dy; stepy = -1;
 80022e2:	8afb      	ldrh	r3, [r7, #22]
 80022e4:	425b      	negs	r3, r3
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	82fb      	strh	r3, [r7, #22]
 80022ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ee:	823b      	strh	r3, [r7, #16]
 80022f0:	e001      	b.n	80022f6 <lcdLine+0x4e>
	}
	else stepy = 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	823b      	strh	r3, [r7, #16]

 	if (dx < 0)
 80022f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da07      	bge.n	800230e <lcdLine+0x66>
	{
		dx = -dx; stepx = -1;
 80022fe:	8abb      	ldrh	r3, [r7, #20]
 8002300:	425b      	negs	r3, r3
 8002302:	b29b      	uxth	r3, r3
 8002304:	82bb      	strh	r3, [r7, #20]
 8002306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800230a:	827b      	strh	r3, [r7, #18]
 800230c:	e001      	b.n	8002312 <lcdLine+0x6a>
	}
	else stepx = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	827b      	strh	r3, [r7, #18]

	dy <<= 1; 							// dy is now 2*dy
 8002312:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	82fb      	strh	r3, [r7, #22]
	dx <<= 1; 							// dx is now 2*dx
 800231a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	82bb      	strh	r3, [r7, #20]

	lcdPlot(x0, y0, colour);
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	88ba      	ldrh	r2, [r7, #4]
 8002328:	b2d1      	uxtb	r1, r2
 800232a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff81 	bl	8002234 <lcdPlot>

	if (dx > dy) {
 8002332:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002336:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800233a:	429a      	cmp	r2, r3
 800233c:	dd2e      	ble.n	800239c <lcdLine+0xf4>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 800233e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002342:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002346:	1052      	asrs	r2, r2, #1
 8002348:	b212      	sxth	r2, r2
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
		while (x0 != x1)
 800234e:	e01e      	b.n	800238e <lcdLine+0xe6>
		{
			if (fraction >= 0)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db09      	blt.n	800236a <lcdLine+0xc2>
			{
				y0 += stepy;
 8002356:	88ba      	ldrh	r2, [r7, #4]
 8002358:	8a3b      	ldrh	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	b29b      	uxth	r3, r3
 800235e:	80bb      	strh	r3, [r7, #4]
				fraction -= dx; 		// same as fraction -= 2*dx
 8002360:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	60fb      	str	r3, [r7, #12]
			}

   			x0 += stepx;
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	8a7b      	ldrh	r3, [r7, #18]
 800236e:	4413      	add	r3, r2
 8002370:	b29b      	uxth	r3, r3
 8002372:	80fb      	strh	r3, [r7, #6]
   			fraction += dy; 				// same as fraction -= 2*dy
 8002374:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
   			lcdPlot(x0, y0, colour);
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	88ba      	ldrh	r2, [r7, #4]
 8002384:	b2d1      	uxtb	r1, r2
 8002386:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff53 	bl	8002234 <lcdPlot>

	lcdPlot(x0, y0, colour);

	if (dx > dy) {
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
		while (x0 != x1)
 800238e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002396:	429a      	cmp	r2, r3
 8002398:	d1da      	bne.n	8002350 <lcdLine+0xa8>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 800239a:	e02d      	b.n	80023f8 <lcdLine+0x150>
   			lcdPlot(x0, y0, colour);
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
 800239c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80023a4:	1052      	asrs	r2, r2, #1
 80023a6:	b212      	sxth	r2, r2
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
		while (y0 != y1)
 80023ac:	e01e      	b.n	80023ec <lcdLine+0x144>
		{
			if (fraction >= 0)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db09      	blt.n	80023c8 <lcdLine+0x120>
			{
				x0 += stepx;
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	8a7b      	ldrh	r3, [r7, #18]
 80023b8:	4413      	add	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 80023be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	60bb      	str	r3, [r7, #8]
			}

			y0 += stepy;
 80023c8:	88ba      	ldrh	r2, [r7, #4]
 80023ca:	8a3b      	ldrh	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 80023d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
			lcdPlot(x0, y0, colour);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	88ba      	ldrh	r2, [r7, #4]
 80023e2:	b2d1      	uxtb	r1, r2
 80023e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff ff24 	bl	8002234 <lcdPlot>
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
		while (y0 != y1)
 80023ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80023f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1da      	bne.n	80023ae <lcdLine+0x106>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 80023f8:	bf00      	nop
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd90      	pop	{r4, r7, pc}

08002400 <lcdPlnyTrojuholnik>:
		lcdWriteData(colour >> 8, colour);;
}

// x0 posunutie od kraja displeja
// funkcia kresli len rovnoramenny trojuholnik
int16_t lcdPlnyTrojuholnik(int16_t x0, int16_t A, int16_t B, uint16_t colour){
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b087      	sub	sp, #28
 8002404:	af02      	add	r7, sp, #8
 8002406:	4604      	mov	r4, r0
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4623      	mov	r3, r4
 8002410:	80fb      	strh	r3, [r7, #6]
 8002412:	4603      	mov	r3, r0
 8002414:	80bb      	strh	r3, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
 800241a:	4613      	mov	r3, r2
 800241c:	803b      	strh	r3, [r7, #0]
	uint16_t pixels;
	uint16_t c = (B-A)/2;
 800241e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002422:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	0fda      	lsrs	r2, r3, #31
 800242a:	4413      	add	r3, r2
 800242c:	105b      	asrs	r3, r3, #1
 800242e:	81bb      	strh	r3, [r7, #12]
	for(pixels = 0; pixels < c+1; pixels++){
 8002430:	2300      	movs	r3, #0
 8002432:	81fb      	strh	r3, [r7, #14]
 8002434:	e01c      	b.n	8002470 <lcdPlnyTrojuholnik+0x70>
		lcdLine(x0+pixels, B-pixels, x0+pixels, A+pixels, colour);
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	4413      	add	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	b218      	sxth	r0, r3
 8002440:	887a      	ldrh	r2, [r7, #2]
 8002442:	89fb      	ldrh	r3, [r7, #14]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	b29b      	uxth	r3, r3
 8002448:	b219      	sxth	r1, r3
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	4413      	add	r3, r2
 8002450:	b29b      	uxth	r3, r3
 8002452:	b21c      	sxth	r4, r3
 8002454:	88ba      	ldrh	r2, [r7, #4]
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	4413      	add	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	b21a      	sxth	r2, r3
 800245e:	883b      	ldrh	r3, [r7, #0]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	4622      	mov	r2, r4
 8002466:	f7ff ff1f 	bl	80022a8 <lcdLine>
// x0 posunutie od kraja displeja
// funkcia kresli len rovnoramenny trojuholnik
int16_t lcdPlnyTrojuholnik(int16_t x0, int16_t A, int16_t B, uint16_t colour){
	uint16_t pixels;
	uint16_t c = (B-A)/2;
	for(pixels = 0; pixels < c+1; pixels++){
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	3301      	adds	r3, #1
 800246e:	81fb      	strh	r3, [r7, #14]
 8002470:	89fa      	ldrh	r2, [r7, #14]
 8002472:	89bb      	ldrh	r3, [r7, #12]
 8002474:	3301      	adds	r3, #1
 8002476:	429a      	cmp	r2, r3
 8002478:	dbdd      	blt.n	8002436 <lcdPlnyTrojuholnik+0x36>
		lcdLine(x0+pixels, B-pixels, x0+pixels, A+pixels, colour);
	}
	return A;
 800247a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	bf00      	nop

08002488 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	4604      	mov	r4, r0
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4623      	mov	r3, r4
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	4603      	mov	r3, r0
 800249c:	71bb      	strb	r3, [r7, #6]
 800249e:	460b      	mov	r3, r1
 80024a0:	717b      	strb	r3, [r7, #5]
 80024a2:	4613      	mov	r3, r2
 80024a4:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 80024a6:	202a      	movs	r0, #42	; 0x2a
 80024a8:	f7ff fd74 	bl	8001f94 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7ff fd81 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(x);
 80024b2:	79bb      	ldrb	r3, [r7, #6]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fd7d 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fd7a 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(x+5);
 80024c0:	79bb      	ldrb	r3, [r7, #6]
 80024c2:	3305      	adds	r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 80024cc:	202b      	movs	r0, #43	; 0x2b
 80024ce:	f7ff fd61 	bl	8001f94 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7ff fd6e 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(y);
 80024d8:	797b      	ldrb	r3, [r7, #5]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fd6a 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7ff fd67 	bl	8001fb4 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80024e6:	207f      	movs	r0, #127	; 0x7f
 80024e8:	f7ff fd64 	bl	8001fb4 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 80024ec:	202c      	movs	r0, #44	; 0x2c
 80024ee:	f7ff fd51 	bl	8001f94 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e032      	b.n	800255e <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 80024f8:	2300      	movs	r3, #0
 80024fa:	73bb      	strb	r3, [r7, #14]
 80024fc:	e029      	b.n	8002552 <lcdPutCh+0xca>
		{
			if ((font5x8[character][column]) & (1 << row))
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	7bb9      	ldrb	r1, [r7, #14]
 8002502:	481a      	ldr	r0, [pc, #104]	; (800256c <lcdPutCh+0xe4>)
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4403      	add	r3, r0
 800250e:	440b      	add	r3, r1
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	fa42 f303 	asr.w	r3, r2, r3
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b29b      	uxth	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd4f 	bl	8001fd4 <lcdWriteData>
 8002536:	e009      	b.n	800254c <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 8002538:	8c3b      	ldrh	r3, [r7, #32]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	b29b      	uxth	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	8c3a      	ldrh	r2, [r7, #32]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fd44 	bl	8001fd4 <lcdWriteData>
	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
	{
		for (column = 0; column < 6; column++)
 800254c:	7bbb      	ldrb	r3, [r7, #14]
 800254e:	3301      	adds	r3, #1
 8002550:	73bb      	strb	r3, [r7, #14]
 8002552:	7bbb      	ldrb	r3, [r7, #14]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d9d2      	bls.n	80024fe <lcdPutCh+0x76>
	lcdWriteParameter(0x7f);

	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	3301      	adds	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b07      	cmp	r3, #7
 8002562:	d9c9      	bls.n	80024f8 <lcdPutCh+0x70>
			if ((font5x8[character][column]) & (1 << row))
				lcdWriteData(fgColour>>8, fgColour);
			else lcdWriteData(bgColour >> 8, bgColour);
		}
	}
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	080054f0 	.word	0x080054f0

08002570 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
 800257a:	460b      	mov	r3, r1
 800257c:	71bb      	strb	r3, [r7, #6]
 800257e:	4613      	mov	r3, r2
 8002580:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 8002582:	797b      	ldrb	r3, [r7, #5]
 8002584:	02db      	lsls	r3, r3, #11
 8002586:	b21a      	sxth	r2, r3
 8002588:	79bb      	ldrb	r3, [r7, #6]
 800258a:	019b      	lsls	r3, r3, #6
 800258c:	b21b      	sxth	r3, r3
 800258e:	4313      	orrs	r3, r2
 8002590:	b21a      	sxth	r2, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	b21b      	sxth	r3, r3
 8002596:	4313      	orrs	r3, r2
 8002598:	b21b      	sxth	r3, r3
 800259a:	b29b      	uxth	r3, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop

080025a8 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	70fb      	strb	r3, [r7, #3]
 80025ba:	460b      	mov	r3, r1
 80025bc:	70bb      	strb	r3, [r7, #2]
 80025be:	4613      	mov	r3, r2
 80025c0:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e01c      	b.n	8002606 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	2b79      	cmp	r3, #121	; 0x79
 80025d0:	d904      	bls.n	80025dc <lcdPutS+0x34>
		{
			x = origin;
 80025d2:	7bbb      	ldrb	r3, [r7, #14]
 80025d4:	70fb      	strb	r3, [r7, #3]
			y += 8;
 80025d6:	78bb      	ldrb	r3, [r7, #2]
 80025d8:	3308      	adds	r3, #8
 80025da:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 80025dc:	78bb      	ldrb	r3, [r7, #2]
 80025de:	2b78      	cmp	r3, #120	; 0x78
 80025e0:	d819      	bhi.n	8002616 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	7818      	ldrb	r0, [r3, #0]
 80025ea:	883c      	ldrh	r4, [r7, #0]
 80025ec:	78ba      	ldrb	r2, [r7, #2]
 80025ee:	78f9      	ldrb	r1, [r7, #3]
 80025f0:	8c3b      	ldrh	r3, [r7, #32]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4623      	mov	r3, r4
 80025f6:	f7ff ff47 	bl	8002488 <lcdPutCh>
		x += 6;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	3306      	adds	r3, #6
 80025fe:	70fb      	strb	r3, [r7, #3]
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
	uint8_t origin = x;
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	3301      	adds	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	7bfc      	ldrb	r4, [r7, #15]
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fd fdb9 	bl	8000180 <strlen>
 800260e:	4603      	mov	r3, r0
 8002610:	429c      	cmp	r4, r3
 8002612:	d3db      	bcc.n	80025cc <lcdPutS+0x24>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 8002614:	e000      	b.n	8002618 <lcdPutS+0x70>
			x = origin;
			y += 8;
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 8002616:	bf00      	nop

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}

08002620 <DMA1_Channel1_IRQHandler>:
		klavesnica = ADC1->DR;
		}
}*/

void DMA1_Channel1_IRQHandler(void) 	//ked dojde k preruseniu, hodnoty z ADC sa ulozia pomocou DMA do pola ADC1ConvertedValue
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  if (DMA_GetITStatus(DMA1_IT_TC1))
 8002624:	2002      	movs	r0, #2
 8002626:	f7ff fa4d 	bl	8001ac4 <DMA_GetITStatus>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <DMA1_Channel1_IRQHandler+0x48>
  {
	  klavesnica = ADC1ConvertedValue[4];
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <DMA1_Channel1_IRQHandler+0x4c>)
 8002632:	891b      	ldrh	r3, [r3, #8]
 8002634:	b29a      	uxth	r2, r3
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <DMA1_Channel1_IRQHandler+0x50>)
 8002638:	801a      	strh	r2, [r3, #0]
	  kridielko = ADC1ConvertedValue[0];
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <DMA1_Channel1_IRQHandler+0x4c>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <DMA1_Channel1_IRQHandler+0x54>)
 8002642:	801a      	strh	r2, [r3, #0]
	  vyskovka = ADC1ConvertedValue[1];
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <DMA1_Channel1_IRQHandler+0x4c>)
 8002646:	885b      	ldrh	r3, [r3, #2]
 8002648:	b29a      	uxth	r2, r3
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <DMA1_Channel1_IRQHandler+0x58>)
 800264c:	801a      	strh	r2, [r3, #0]
	  plyn = ADC1ConvertedValue[2];
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <DMA1_Channel1_IRQHandler+0x4c>)
 8002650:	889b      	ldrh	r3, [r3, #4]
 8002652:	b29a      	uxth	r2, r3
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <DMA1_Channel1_IRQHandler+0x5c>)
 8002656:	801a      	strh	r2, [r3, #0]
	  smerovka = ADC1ConvertedValue[3];
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <DMA1_Channel1_IRQHandler+0x4c>)
 800265a:	88db      	ldrh	r3, [r3, #6]
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <DMA1_Channel1_IRQHandler+0x60>)
 8002660:	801a      	strh	r2, [r3, #0]

	  DMA_ClearITPendingBit(DMA1_IT_TC1);   //mazanie bitu, ktory hovori, ze prenos dat bol ukonceny
 8002662:	2002      	movs	r0, #2
 8002664:	f7ff fa56 	bl	8001b14 <DMA_ClearITPendingBit>
  }
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	200000f0 	.word	0x200000f0
 8002670:	200000e8 	.word	0x200000e8
 8002674:	200000fa 	.word	0x200000fa
 8002678:	200000ea 	.word	0x200000ea
 800267c:	200000e4 	.word	0x200000e4
 8002680:	200000e0 	.word	0x200000e0

08002684 <main>:

int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	initSPI2();  //inicializujem zbernicu SPI
 8002688:	f000 f856 	bl	8002738 <initSPI2>
	dma_init();	 //inicializujem DMA
 800268c:	f001 fcc4 	bl	8004018 <dma_init>
	initGPIO();  //Inicializujem GPIO
 8002690:	f001 fc78 	bl	8003f84 <initGPIO>
	initCD_Pin();  //
 8002694:	f000 f8e2 	bl	800285c <initCD_Pin>
	initCS_Pin();
 8002698:	f000 f8c2 	bl	8002820 <initCS_Pin>
	initRES_Pin();
 800269c:	f000 f914 	bl	80028c8 <initRES_Pin>
	initMenu();  //inicializujem uvodne menu
 80026a0:	f001 fbfc 	bl	8003e9c <initMenu>
	adc_init(); //inicializujem ADC
 80026a4:	f001 fcea 	bl	800407c <adc_init>
	nvic_init();  //inicializujem NVIC
 80026a8:	f001 fd48 	bl	800413c <nvic_init>
	while (1)
	{
		pohybMenu(klavesnica);  //funkcia, ktora sleduje zvolenu polozku v menu, podla toho sa spustaju jednotlive submenu
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <main+0x38>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f9e4 	bl	8003a80 <pohybMenu>
		//Delay(50);
	}
 80026b8:	e7f8      	b.n	80026ac <main+0x28>
 80026ba:	bf00      	nop
 80026bc:	200000e8 	.word	0x200000e8

080026c0 <TIM7_IRQHandler>:
static uint16_t backlitModulo = 0;
static uint16_t shimmerModulo = 0;
static uint16_t shimmerDutyCycle = SHIMMER_DUTY_CYCLE;

void TIM7_IRQHandler(void)
{
 80026c0:	b598      	push	{r3, r4, r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) == SET)
 80026c4:	2101      	movs	r1, #1
 80026c6:	4817      	ldr	r0, [pc, #92]	; (8002724 <TIM7_IRQHandler+0x64>)
 80026c8:	f7ff fc1a 	bl	8001f00 <TIM_GetITStatus>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d126      	bne.n	8002720 <TIM7_IRQHandler+0x60>
	{
		backlitTimer++;
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <TIM7_IRQHandler+0x68>)
 80026d4:	cb18      	ldmia	r3, {r3, r4}
 80026d6:	3301      	adds	r3, #1
 80026d8:	f144 0400 	adc.w	r4, r4, #0
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <TIM7_IRQHandler+0x68>)
 80026de:	e882 0018 	stmia.w	r2, {r3, r4}

		shimmerModulo = backlitTimer % SHIMMER_PERIOD;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <TIM7_IRQHandler+0x68>)
 80026e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f7fe fd00 	bl	80010f4 <__aeabi_uldivmod>
 80026f4:	461c      	mov	r4, r3
 80026f6:	4613      	mov	r3, r2
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <TIM7_IRQHandler+0x6c>)
 80026fc:	801a      	strh	r2, [r3, #0]

		if(shimmerDutyCycle < shimmerModulo)
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <TIM7_IRQHandler+0x70>)
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <TIM7_IRQHandler+0x6c>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d203      	bcs.n	8002712 <TIM7_IRQHandler+0x52>
		{
			gShimmerFlag = 0;
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <TIM7_IRQHandler+0x74>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e002      	b.n	8002718 <TIM7_IRQHandler+0x58>
		}
		else
		{
			gShimmerFlag = 1;
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <TIM7_IRQHandler+0x74>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
				GPIOB->BSRRH = GPIO_Pin_0;
				GPIOA->BSRRH = GPIO_Pin_7;
			}
		}*/

		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8002718:	2101      	movs	r1, #1
 800271a:	4802      	ldr	r0, [pc, #8]	; (8002724 <TIM7_IRQHandler+0x64>)
 800271c:	f7ff fc1a 	bl	8001f54 <TIM_ClearITPendingBit>
	}
}
 8002720:	bf00      	nop
 8002722:	bd98      	pop	{r3, r4, r7, pc}
 8002724:	40001400 	.word	0x40001400
 8002728:	200000b0 	.word	0x200000b0
 800272c:	200000b8 	.word	0x200000b8
 8002730:	20000000 	.word	0x20000000
 8002734:	200000ac 	.word	0x200000ac

08002738 <initSPI2>:
#include "mcu.h"

//TODO rework to STM32L mcu's

void initSPI2(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800273e:	2101      	movs	r1, #1
 8002740:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002744:	f7ff fb0c 	bl	8001d60 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002748:	2101      	movs	r1, #1
 800274a:	2002      	movs	r0, #2
 800274c:	f7ff faea 	bl	8001d24 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002750:	2302      	movs	r3, #2
 8002752:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002754:	2300      	movs	r3, #0
 8002756:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002758:	2303      	movs	r3, #3
 800275a:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	77fb      	strb	r3, [r7, #31]

	//PB3 - SPI2_SCK
	//PB4 - SPI2_MISO
	//PB5 - SPI2_MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;
 8002760:	2338      	movs	r3, #56	; 0x38
 8002762:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002764:	f107 0318 	add.w	r3, r7, #24
 8002768:	4619      	mov	r1, r3
 800276a:	4819      	ldr	r0, [pc, #100]	; (80027d0 <initSPI2+0x98>)
 800276c:	f7ff f9ec 	bl	8001b48 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
 8002770:	2205      	movs	r2, #5
 8002772:	2103      	movs	r1, #3
 8002774:	4816      	ldr	r0, [pc, #88]	; (80027d0 <initSPI2+0x98>)
 8002776:	f7ff fa7d 	bl	8001c74 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_SPI1);
 800277a:	2205      	movs	r2, #5
 800277c:	2104      	movs	r1, #4
 800277e:	4814      	ldr	r0, [pc, #80]	; (80027d0 <initSPI2+0x98>)
 8002780:	f7ff fa78 	bl	8001c74 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_SPI1);
 8002784:	2205      	movs	r2, #5
 8002786:	2105      	movs	r1, #5
 8002788:	4811      	ldr	r0, [pc, #68]	; (80027d0 <initSPI2+0x98>)
 800278a:	f7ff fa73 	bl	8001c74 <GPIO_PinAFConfig>

	SPI_InitTypeDef  SPI_InitStructure;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800278e:	2300      	movs	r3, #0
 8002790:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8002792:	2300      	movs	r3, #0
 8002794:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8002796:	2300      	movs	r3, #0
 8002798:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 800279a:	2301      	movs	r3, #1
 800279c:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800279e:	2300      	movs	r3, #0
 80027a0:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80027a2:	2300      	movs	r3, #0
 80027a4:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80027a6:	2300      	movs	r3, #0
 80027a8:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80027aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80027ae:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80027b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b4:	81fb      	strh	r3, [r7, #14]

	/* Apply SPI configuration after enabling it */
	SPI_Init(SPI1, &SPI_InitStructure);
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	4806      	ldr	r0, [pc, #24]	; (80027d4 <initSPI2+0x9c>)
 80027bc:	f7ff fb20 	bl	8001e00 <SPI_Init>
	/* SPI Peripheral Enable */
	SPI_Cmd(SPI1, ENABLE);
 80027c0:	2101      	movs	r1, #1
 80027c2:	4804      	ldr	r0, [pc, #16]	; (80027d4 <initSPI2+0x9c>)
 80027c4:	f7ff fb60 	bl	8001e88 <SPI_Cmd>
}
 80027c8:	bf00      	nop
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40013000 	.word	0x40013000

080027d8 <readWriteSPI2>:

unsigned char readWriteSPI2(unsigned char txData)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	SPI1->DR = txData;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <readWriteSPI2+0x44>)
 80027e4:	79fa      	ldrb	r2, [r7, #7]
 80027e6:	b292      	uxth	r2, r2
 80027e8:	819a      	strh	r2, [r3, #12]
	// wait until TXE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 80027ea:	bf00      	nop
 80027ec:	2102      	movs	r1, #2
 80027ee:	480b      	ldr	r0, [pc, #44]	; (800281c <readWriteSPI2+0x44>)
 80027f0:	f7ff fb6a 	bl	8001ec8 <SPI_I2S_GetFlagStatus>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d1f8      	bne.n	80027ec <readWriteSPI2+0x14>
	// wait until RXNE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 80027fa:	bf00      	nop
 80027fc:	2101      	movs	r1, #1
 80027fe:	4807      	ldr	r0, [pc, #28]	; (800281c <readWriteSPI2+0x44>)
 8002800:	f7ff fb62 	bl	8001ec8 <SPI_I2S_GetFlagStatus>
 8002804:	4603      	mov	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d1f8      	bne.n	80027fc <readWriteSPI2+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = SPI1->DR;
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <readWriteSPI2+0x44>)
 800280c:	899b      	ldrh	r3, [r3, #12]
 800280e:	b29b      	uxth	r3, r3
 8002810:	73fb      	strb	r3, [r7, #15]

	return rxData;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40013000 	.word	0x40013000

08002820 <initCS_Pin>:

void initCS_Pin(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8002826:	2101      	movs	r1, #1
 8002828:	2002      	movs	r0, #2
 800282a:	f7ff fa7b 	bl	8001d24 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800282e:	2300      	movs	r3, #0
 8002830:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002832:	2303      	movs	r3, #3
 8002834:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 800283a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800283e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002840:	2301      	movs	r3, #1
 8002842:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002844:	463b      	mov	r3, r7
 8002846:	4619      	mov	r1, r3
 8002848:	4803      	ldr	r0, [pc, #12]	; (8002858 <initCS_Pin+0x38>)
 800284a:	f7ff f97d 	bl	8001b48 <GPIO_Init>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40020400 	.word	0x40020400

0800285c <initCD_Pin>:

void initCD_Pin(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002862:	2101      	movs	r1, #1
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff fa5d 	bl	8001d24 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800286a:	2300      	movs	r3, #0
 800286c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800286e:	2303      	movs	r3, #3
 8002870:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8002876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800287a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800287c:	2301      	movs	r3, #1
 800287e:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002880:	463b      	mov	r3, r7
 8002882:	4619      	mov	r1, r3
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <initCD_Pin+0x38>)
 8002886:	f7ff f95f 	bl	8001b48 <GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40020000 	.word	0x40020000

08002898 <cd_set>:

void cd_set(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_8;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <cd_set+0x14>)
 800289e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a2:	831a      	strh	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40020000 	.word	0x40020000

080028b0 <cd_reset>:

void cd_reset(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_8;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <cd_reset+0x14>)
 80028b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ba:	835a      	strh	r2, [r3, #26]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	40020000 	.word	0x40020000

080028c8 <initRES_Pin>:

void initRES_Pin(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80028ce:	2101      	movs	r1, #1
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7ff fa27 	bl	8001d24 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80028d6:	2300      	movs	r3, #0
 80028d8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80028da:	2303      	movs	r3, #3
 80028dc:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80028e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80028e8:	2301      	movs	r3, #1
 80028ea:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80028ec:	463b      	mov	r3, r7
 80028ee:	4619      	mov	r1, r3
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <initRES_Pin+0x38>)
 80028f2:	f7ff f929 	bl	8001b48 <GPIO_Init>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40020000 	.word	0x40020000

08002904 <res_set>:

void res_set(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_9;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <res_set+0x14>)
 800290a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290e:	831a      	strh	r2, [r3, #24]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40020000 	.word	0x40020000

0800291c <res_reset>:

void res_reset(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_9;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <res_reset+0x14>)
 8002922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002926:	835a      	strh	r2, [r3, #26]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40020000 	.word	0x40020000

08002934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800296c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002938:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800293a:	e003      	b.n	8002944 <LoopCopyDataInit>

0800293c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 800293e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002940:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002942:	3104      	adds	r1, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002944:	480b      	ldr	r0, [pc, #44]	; (8002974 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8002948:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800294a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800294c:	d3f6      	bcc.n	800293c <CopyDataInit>
  ldr r2, =_sbss
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8002950:	e002      	b.n	8002958 <LoopFillZerobss>

08002952 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002954:	f842 3b04 	str.w	r3, [r2], #4

08002958 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800295a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800295c:	d3f9      	bcc.n	8002952 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800295e:	f000 ffb7 	bl	80038d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002962:	f001 fd05 	bl	8004370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002966:	f7ff fe8d 	bl	8002684 <main>
  bx lr
 800296a:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800296c:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8002970:	08005b4c 	.word	0x08005b4c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002978:	2000008c 	.word	0x2000008c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800297c:	20000090 	.word	0x20000090
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8002980:	20000130 	.word	0x20000130

08002984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC1_IRQHandler>
	...

08002988 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8002998:	e7fe      	b.n	8002998 <HardFault_Handler+0x4>
 800299a:	bf00      	nop

0800299c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80029a0:	e7fe      	b.n	80029a0 <MemManage_Handler+0x4>
 80029a2:	bf00      	nop

080029a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80029a8:	e7fe      	b.n	80029a8 <BusFault_Handler+0x4>
 80029aa:	bf00      	nop

080029ac <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80029b0:	e7fe      	b.n	80029b0 <UsageFault_Handler+0x4>
 80029b2:	bf00      	nop

080029b4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <normalizuj>:
float plynMIN=883, plynMAX=3135, vyskovkaMIN=568, vyskovkaMAX=3705, smerovkaMIN=487, smerovkaMAX=3128, kridielkoMIN=496, kridielkoMAX=3408;
float plynNORM, plynNORMdiff, NORM, NORMdiff;
int plynNORMint, plynNORMint2, NORMint, NORMint2;
float kridielkoNORM, vyskovkaNORM, smerovkaNORM, plynNORM, MIX, trim=0;

float normalizuj(float hodnota,float hodnotaMIN,float hodnotaMAX){ //normalizovanie hodnot od -1 do 1
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
	NORM =(((hodnota-hodnotaMIN)/(hodnotaMAX-hodnotaMIN))*(1-(-1)))+(-1);
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7fe f888 	bl	8000b08 <__aeabi_fsub>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461c      	mov	r4, r3
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe f882 	bl	8000b08 <__aeabi_fsub>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4619      	mov	r1, r3
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7fe fa3b 	bl	8000e84 <__aeabi_fdiv>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4619      	mov	r1, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe f87a 	bl	8000b0c <__addsf3>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f872 	bl	8000b08 <__aeabi_fsub>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <normalizuj+0x54>)
 8002a2a:	601a      	str	r2, [r3, #0]
	return NORM;
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <normalizuj+0x54>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd90      	pop	{r4, r7, pc}
 8002a38:	20000118 	.word	0x20000118

08002a3c <FloatToString>:

char *FloatToString(float NORM){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	NORMint=(int)NORM;
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fe fb2f 	bl	80010a8 <__aeabi_f2iz>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <FloatToString+0xd0>)
 8002a4e:	601a      	str	r2, [r3, #0]
	NORMdiff=NORM-(float)NORMint;
 8002a50:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <FloatToString+0xd0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe f90d 	bl	8000c74 <__aeabi_i2f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f852 	bl	8000b08 <__aeabi_fsub>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <FloatToString+0xd4>)
 8002a6a:	601a      	str	r2, [r3, #0]
	NORMint2=(int)(NORMdiff*100);
 8002a6c:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <FloatToString+0xd4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4928      	ldr	r1, [pc, #160]	; (8002b14 <FloatToString+0xd8>)
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe f952 	bl	8000d1c <__aeabi_fmul>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fb14 	bl	80010a8 <__aeabi_f2iz>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <FloatToString+0xdc>)
 8002a84:	601a      	str	r2, [r3, #0]
	if (NORM < 0){
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe fae4 	bl	8001058 <__aeabi_fcmplt>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01c      	beq.n	8002ad0 <FloatToString+0x94>
		static char str[6];
		if(NORMint2 < 10) sprintf(str,"-%d.%d", NORMint, abs(NORMint2));
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <FloatToString+0xdc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b09      	cmp	r3, #9
 8002a9c:	dc0b      	bgt.n	8002ab6 <FloatToString+0x7a>
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <FloatToString+0xd0>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <FloatToString+0xdc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bfb8      	it	lt
 8002aaa:	425b      	neglt	r3, r3
 8002aac:	491b      	ldr	r1, [pc, #108]	; (8002b1c <FloatToString+0xe0>)
 8002aae:	481c      	ldr	r0, [pc, #112]	; (8002b20 <FloatToString+0xe4>)
 8002ab0:	f001 fc48 	bl	8004344 <siprintf>
 8002ab4:	e00a      	b.n	8002acc <FloatToString+0x90>
		else sprintf(str,"-%d.%d", NORMint, abs(NORMint2));
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <FloatToString+0xd0>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <FloatToString+0xdc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bfb8      	it	lt
 8002ac2:	425b      	neglt	r3, r3
 8002ac4:	4915      	ldr	r1, [pc, #84]	; (8002b1c <FloatToString+0xe0>)
 8002ac6:	4816      	ldr	r0, [pc, #88]	; (8002b20 <FloatToString+0xe4>)
 8002ac8:	f001 fc3c 	bl	8004344 <siprintf>
			return str;
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <FloatToString+0xe4>)
 8002ace:	e018      	b.n	8002b02 <FloatToString+0xc6>
		}
	else{
		static char str[5];
		if(NORMint2 < 10) sprintf(str,"%d.0%d", NORMint, abs(NORMint2));
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <FloatToString+0xdc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	dc0b      	bgt.n	8002af0 <FloatToString+0xb4>
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <FloatToString+0xd0>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <FloatToString+0xdc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bfb8      	it	lt
 8002ae4:	425b      	neglt	r3, r3
 8002ae6:	490f      	ldr	r1, [pc, #60]	; (8002b24 <FloatToString+0xe8>)
 8002ae8:	480f      	ldr	r0, [pc, #60]	; (8002b28 <FloatToString+0xec>)
 8002aea:	f001 fc2b 	bl	8004344 <siprintf>
 8002aee:	e007      	b.n	8002b00 <FloatToString+0xc4>
		else sprintf(str,"%d.%d", NORMint, NORMint2);
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <FloatToString+0xd0>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <FloatToString+0xdc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <FloatToString+0xf0>)
 8002afa:	480b      	ldr	r0, [pc, #44]	; (8002b28 <FloatToString+0xec>)
 8002afc:	f001 fc22 	bl	8004344 <siprintf>
			return str;
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <FloatToString+0xec>)
		}

}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000124 	.word	0x20000124
 8002b10:	20000110 	.word	0x20000110
 8002b14:	42c80000 	.word	0x42c80000
 8002b18:	20000128 	.word	0x20000128
 8002b1c:	08005420 	.word	0x08005420
 8002b20:	200000c0 	.word	0x200000c0
 8002b24:	08005428 	.word	0x08005428
 8002b28:	200000c8 	.word	0x200000c8
 8002b2c:	08005430 	.word	0x08005430

08002b30 <FloatToStringReverz>:

char *FloatToStringReverz(float NORM){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	NORMint=(int)NORM;
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe fab5 	bl	80010a8 <__aeabi_f2iz>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <FloatToStringReverz+0xd0>)
 8002b42:	601a      	str	r2, [r3, #0]
	NORMdiff=NORM-(float)NORMint;
 8002b44:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <FloatToStringReverz+0xd0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe f893 	bl	8000c74 <__aeabi_i2f>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4619      	mov	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd ffd8 	bl	8000b08 <__aeabi_fsub>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <FloatToStringReverz+0xd4>)
 8002b5e:	601a      	str	r2, [r3, #0]
	NORMint2=(int)(NORMdiff*100);
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <FloatToStringReverz+0xd4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4928      	ldr	r1, [pc, #160]	; (8002c08 <FloatToStringReverz+0xd8>)
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe f8d8 	bl	8000d1c <__aeabi_fmul>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fa9a 	bl	80010a8 <__aeabi_f2iz>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <FloatToStringReverz+0xdc>)
 8002b78:	601a      	str	r2, [r3, #0]
	if (NORM < 0){
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe fa6a 	bl	8001058 <__aeabi_fcmplt>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01c      	beq.n	8002bc4 <FloatToStringReverz+0x94>
		static char str[6];
		if(NORMint2 < 10) sprintf(str,"%d.%d", NORMint, abs(NORMint2));
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <FloatToStringReverz+0xdc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	dc0b      	bgt.n	8002baa <FloatToStringReverz+0x7a>
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <FloatToStringReverz+0xd0>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <FloatToStringReverz+0xdc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bfb8      	it	lt
 8002b9e:	425b      	neglt	r3, r3
 8002ba0:	491b      	ldr	r1, [pc, #108]	; (8002c10 <FloatToStringReverz+0xe0>)
 8002ba2:	481c      	ldr	r0, [pc, #112]	; (8002c14 <FloatToStringReverz+0xe4>)
 8002ba4:	f001 fbce 	bl	8004344 <siprintf>
 8002ba8:	e00a      	b.n	8002bc0 <FloatToStringReverz+0x90>
		else sprintf(str,"%d.%d", NORMint, abs(NORMint2));
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <FloatToStringReverz+0xd0>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <FloatToStringReverz+0xdc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bfb8      	it	lt
 8002bb6:	425b      	neglt	r3, r3
 8002bb8:	4915      	ldr	r1, [pc, #84]	; (8002c10 <FloatToStringReverz+0xe0>)
 8002bba:	4816      	ldr	r0, [pc, #88]	; (8002c14 <FloatToStringReverz+0xe4>)
 8002bbc:	f001 fbc2 	bl	8004344 <siprintf>
			return str;
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <FloatToStringReverz+0xe4>)
 8002bc2:	e018      	b.n	8002bf6 <FloatToStringReverz+0xc6>
		}
	else{
		static char str[5];
		if(NORMint2 < 10) sprintf(str,"-%d.0%d", NORMint, abs(NORMint2));
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <FloatToStringReverz+0xdc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	dc0b      	bgt.n	8002be4 <FloatToStringReverz+0xb4>
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <FloatToStringReverz+0xd0>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <FloatToStringReverz+0xdc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bfb8      	it	lt
 8002bd8:	425b      	neglt	r3, r3
 8002bda:	490f      	ldr	r1, [pc, #60]	; (8002c18 <FloatToStringReverz+0xe8>)
 8002bdc:	480f      	ldr	r0, [pc, #60]	; (8002c1c <FloatToStringReverz+0xec>)
 8002bde:	f001 fbb1 	bl	8004344 <siprintf>
 8002be2:	e007      	b.n	8002bf4 <FloatToStringReverz+0xc4>
		else sprintf(str,"-%d.%d", NORMint, NORMint2);
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <FloatToStringReverz+0xd0>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <FloatToStringReverz+0xdc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	490c      	ldr	r1, [pc, #48]	; (8002c20 <FloatToStringReverz+0xf0>)
 8002bee:	480b      	ldr	r0, [pc, #44]	; (8002c1c <FloatToStringReverz+0xec>)
 8002bf0:	f001 fba8 	bl	8004344 <siprintf>
			return str;
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <FloatToStringReverz+0xec>)
		}

}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000124 	.word	0x20000124
 8002c04:	20000110 	.word	0x20000110
 8002c08:	42c80000 	.word	0x42c80000
 8002c0c:	20000128 	.word	0x20000128
 8002c10:	08005430 	.word	0x08005430
 8002c14:	200000d0 	.word	0x200000d0
 8002c18:	08005438 	.word	0x08005438
 8002c1c:	200000d8 	.word	0x200000d8
 8002c20:	08005420 	.word	0x08005420

08002c24 <otvorInfo>:

void otvorInfo(){ //funkcia, ktora po vyvolani zobrazi jednotlive kanaly, hodnoty su normalizovane, rozsah -1 az 1
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af02      	add	r7, sp, #8
	subMenu = 1;
 8002c2a:	4b5e      	ldr	r3, [pc, #376]	; (8002da4 <otvorInfo+0x180>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255)); //"vycisti" display
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	21ff      	movs	r1, #255	; 0xff
 8002c34:	20ff      	movs	r0, #255	; 0xff
 8002c36:	f7ff fc9b 	bl	8002570 <decodeRgbValue>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fabb 	bl	80021b8 <lcdClearDisplay>
	while(subMenu==1){
 8002c42:	e0a5      	b.n	8002d90 <otvorInfo+0x16c>
		if((klavesnica >= 3200) && (klavesnica <= 3440)){		//-
 8002c44:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <otvorInfo+0x184>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002c4e:	d306      	bcc.n	8002c5e <otvorInfo+0x3a>
 8002c50:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <otvorInfo+0x184>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8002c5a:	f240 809f 	bls.w	8002d9c <otvorInfo+0x178>
				break;
			}
		else{
		lcdPutS("HODNOTY KANALOV",23, 17, 0x0000, 0xFFFF); //zobrazi na LCD
 8002c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	2211      	movs	r2, #17
 8002c68:	2117      	movs	r1, #23
 8002c6a:	4850      	ldr	r0, [pc, #320]	; (8002dac <otvorInfo+0x188>)
 8002c6c:	f7ff fc9c 	bl	80025a8 <lcdPutS>

		kridielkoNORM = normalizuj((float)kridielko,kridielkoMIN,kridielkoMAX); //normalizovanie hodnoty z analogu
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <otvorInfo+0x18c>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fff8 	bl	8000c6c <__aeabi_ui2f>
 8002c7c:	4b4d      	ldr	r3, [pc, #308]	; (8002db4 <otvorInfo+0x190>)
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	4b4d      	ldr	r3, [pc, #308]	; (8002db8 <otvorInfo+0x194>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f7ff fead 	bl	80029e4 <normalizuj>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <otvorInfo+0x198>)
 8002c8e:	601a      	str	r2, [r3, #0]
		sprintf(str,"kridielko: %s", FloatToString(kridielkoNORM)); //prevod cisla na char
 8002c90:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <otvorInfo+0x198>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fed1 	bl	8002a3c <FloatToString>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	4948      	ldr	r1, [pc, #288]	; (8002dc0 <otvorInfo+0x19c>)
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fb4f 	bl	8004344 <siprintf>
		lcdPutS(str, 23, 37, 0x0000, 0xFFFF);	//vypis na displej
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2225      	movs	r2, #37	; 0x25
 8002cb2:	2117      	movs	r1, #23
 8002cb4:	f7ff fc78 	bl	80025a8 <lcdPutS>

		vyskovkaNORM = normalizuj((float)vyskovka,vyskovkaMIN,vyskovkaMAX);
 8002cb8:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <otvorInfo+0x1a0>)
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd ffd4 	bl	8000c6c <__aeabi_ui2f>
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <otvorInfo+0x1a4>)
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <otvorInfo+0x1a8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f7ff fe89 	bl	80029e4 <normalizuj>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <otvorInfo+0x1ac>)
 8002cd6:	601a      	str	r2, [r3, #0]
		sprintf(str,"Vyskovka: %s", FloatToString(vyskovkaNORM));
 8002cd8:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <otvorInfo+0x1ac>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fead 	bl	8002a3c <FloatToString>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	493b      	ldr	r1, [pc, #236]	; (8002dd4 <otvorInfo+0x1b0>)
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fb2b 	bl	8004344 <siprintf>
		lcdPutS(str, 23, 47, 0x0000, 0xFFFF);
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	222f      	movs	r2, #47	; 0x2f
 8002cfa:	2117      	movs	r1, #23
 8002cfc:	f7ff fc54 	bl	80025a8 <lcdPutS>

		plynNORM = normalizuj((float)plyn,plynMIN,plynMAX);
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <otvorInfo+0x1b4>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd ffb0 	bl	8000c6c <__aeabi_ui2f>
 8002d0c:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <otvorInfo+0x1b8>)
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	4b33      	ldr	r3, [pc, #204]	; (8002de0 <otvorInfo+0x1bc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f7ff fe65 	bl	80029e4 <normalizuj>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <otvorInfo+0x1c0>)
 8002d1e:	601a      	str	r2, [r3, #0]
		sprintf(str,"Plyn: %s", FloatToString(plynNORM));
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <otvorInfo+0x1c0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fe89 	bl	8002a3c <FloatToString>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	492e      	ldr	r1, [pc, #184]	; (8002de8 <otvorInfo+0x1c4>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fb07 	bl	8004344 <siprintf>
		lcdPutS(str, 23, 57, 0x0000, 0xFFFF);
 8002d36:	4638      	mov	r0, r7
 8002d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2239      	movs	r2, #57	; 0x39
 8002d42:	2117      	movs	r1, #23
 8002d44:	f7ff fc30 	bl	80025a8 <lcdPutS>

		smerovkaNORM = normalizuj((float)smerovka,smerovkaMIN,smerovkaMAX);
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <otvorInfo+0x1c8>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd ff8c 	bl	8000c6c <__aeabi_ui2f>
 8002d54:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <otvorInfo+0x1cc>)
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <otvorInfo+0x1d0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f7ff fe41 	bl	80029e4 <normalizuj>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <otvorInfo+0x1d4>)
 8002d66:	601a      	str	r2, [r3, #0]
		sprintf(str,"Smerovka: %s", FloatToString(smerovkaNORM));
 8002d68:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <otvorInfo+0x1d4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fe65 	bl	8002a3c <FloatToString>
 8002d72:	4602      	mov	r2, r0
 8002d74:	463b      	mov	r3, r7
 8002d76:	4921      	ldr	r1, [pc, #132]	; (8002dfc <otvorInfo+0x1d8>)
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fae3 	bl	8004344 <siprintf>
		lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
 8002d7e:	4638      	mov	r0, r7
 8002d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2300      	movs	r3, #0
 8002d88:	2243      	movs	r2, #67	; 0x43
 8002d8a:	2117      	movs	r1, #23
 8002d8c:	f7ff fc0c 	bl	80025a8 <lcdPutS>

void otvorInfo(){ //funkcia, ktora po vyvolani zobrazi jednotlive kanaly, hodnoty su normalizovane, rozsah -1 az 1
	subMenu = 1;
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255)); //"vycisti" display
	while(subMenu==1){
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <otvorInfo+0x180>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f43f af55 	beq.w	8002c44 <otvorInfo+0x20>
		smerovkaNORM = normalizuj((float)smerovka,smerovkaMIN,smerovkaMAX);
		sprintf(str,"Smerovka: %s", FloatToString(smerovkaNORM));
		lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
		}
	}
	return;
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
}
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	200000ec 	.word	0x200000ec
 8002da8:	200000e8 	.word	0x200000e8
 8002dac:	08005440 	.word	0x08005440
 8002db0:	200000fa 	.word	0x200000fa
 8002db4:	2000001c 	.word	0x2000001c
 8002db8:	20000020 	.word	0x20000020
 8002dbc:	20000100 	.word	0x20000100
 8002dc0:	08005450 	.word	0x08005450
 8002dc4:	200000ea 	.word	0x200000ea
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	20000010 	.word	0x20000010
 8002dd0:	20000104 	.word	0x20000104
 8002dd4:	08005460 	.word	0x08005460
 8002dd8:	200000e4 	.word	0x200000e4
 8002ddc:	20000004 	.word	0x20000004
 8002de0:	20000008 	.word	0x20000008
 8002de4:	20000114 	.word	0x20000114
 8002de8:	08005470 	.word	0x08005470
 8002dec:	200000e0 	.word	0x200000e0
 8002df0:	20000014 	.word	0x20000014
 8002df4:	20000018 	.word	0x20000018
 8002df8:	20000108 	.word	0x20000108
 8002dfc:	0800547c 	.word	0x0800547c

08002e00 <otvorRevers>:

//DOROBIT
void otvorRevers(){ //funkcia na revers hodnot analogov
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af02      	add	r7, sp, #8
	subMenu = 1;
 8002e06:	4b5e      	ldr	r3, [pc, #376]	; (8002f80 <otvorRevers+0x180>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8002e0c:	22ff      	movs	r2, #255	; 0xff
 8002e0e:	21ff      	movs	r1, #255	; 0xff
 8002e10:	20ff      	movs	r0, #255	; 0xff
 8002e12:	f7ff fbad 	bl	8002570 <decodeRgbValue>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff f9cd 	bl	80021b8 <lcdClearDisplay>
	while(subMenu==1){
 8002e1e:	e0a5      	b.n	8002f6c <otvorRevers+0x16c>
		if((klavesnica >= 3200) && (klavesnica <= 3440)){		//-
 8002e20:	4b58      	ldr	r3, [pc, #352]	; (8002f84 <otvorRevers+0x184>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002e2a:	d306      	bcc.n	8002e3a <otvorRevers+0x3a>
 8002e2c:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <otvorRevers+0x184>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8002e36:	f240 809e 	bls.w	8002f76 <otvorRevers+0x176>
				break;
			}
		else{
	lcdPutS("REVERS",23, 17, 0x0000, 0xFFFF);
 8002e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	2211      	movs	r2, #17
 8002e44:	2117      	movs	r1, #23
 8002e46:	4850      	ldr	r0, [pc, #320]	; (8002f88 <otvorRevers+0x188>)
 8002e48:	f7ff fbae 	bl	80025a8 <lcdPutS>

	kridielkoNORM = normalizuj((float)kridielko,kridielkoMIN,kridielkoMAX);
 8002e4c:	4b4f      	ldr	r3, [pc, #316]	; (8002f8c <otvorRevers+0x18c>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd ff0a 	bl	8000c6c <__aeabi_ui2f>
 8002e58:	4b4d      	ldr	r3, [pc, #308]	; (8002f90 <otvorRevers+0x190>)
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	4b4d      	ldr	r3, [pc, #308]	; (8002f94 <otvorRevers+0x194>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f7ff fdbf 	bl	80029e4 <normalizuj>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b4b      	ldr	r3, [pc, #300]	; (8002f98 <otvorRevers+0x198>)
 8002e6a:	601a      	str	r2, [r3, #0]
	sprintf(str,"kridielko: %s", FloatToStringReverz(kridielkoNORM));
 8002e6c:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <otvorRevers+0x198>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fe5d 	bl	8002b30 <FloatToStringReverz>
 8002e76:	4602      	mov	r2, r0
 8002e78:	463b      	mov	r3, r7
 8002e7a:	4948      	ldr	r1, [pc, #288]	; (8002f9c <otvorRevers+0x19c>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 fa61 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 37, 0x0000, 0xFFFF);
 8002e82:	4638      	mov	r0, r7
 8002e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2225      	movs	r2, #37	; 0x25
 8002e8e:	2117      	movs	r1, #23
 8002e90:	f7ff fb8a 	bl	80025a8 <lcdPutS>

	vyskovkaNORM = normalizuj((float)vyskovka,vyskovkaMIN,vyskovkaMAX);
 8002e94:	4b42      	ldr	r3, [pc, #264]	; (8002fa0 <otvorRevers+0x1a0>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fee6 	bl	8000c6c <__aeabi_ui2f>
 8002ea0:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <otvorRevers+0x1a4>)
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <otvorRevers+0x1a8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f7ff fd9b 	bl	80029e4 <normalizuj>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <otvorRevers+0x1ac>)
 8002eb2:	601a      	str	r2, [r3, #0]
	sprintf(str,"Vyskovka: %s", FloatToStringReverz(vyskovkaNORM));
 8002eb4:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <otvorRevers+0x1ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fe39 	bl	8002b30 <FloatToStringReverz>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	493b      	ldr	r1, [pc, #236]	; (8002fb0 <otvorRevers+0x1b0>)
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fa3d 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 47, 0x0000, 0xFFFF);
 8002eca:	4638      	mov	r0, r7
 8002ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	222f      	movs	r2, #47	; 0x2f
 8002ed6:	2117      	movs	r1, #23
 8002ed8:	f7ff fb66 	bl	80025a8 <lcdPutS>

	plynNORM = normalizuj((float)plyn,plynMIN,plynMAX);
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <otvorRevers+0x1b4>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fec2 	bl	8000c6c <__aeabi_ui2f>
 8002ee8:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <otvorRevers+0x1b8>)
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <otvorRevers+0x1bc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f7ff fd77 	bl	80029e4 <normalizuj>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <otvorRevers+0x1c0>)
 8002efa:	601a      	str	r2, [r3, #0]
	sprintf(str,"Plyn: %s", FloatToStringReverz(plynNORM));
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <otvorRevers+0x1c0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fe15 	bl	8002b30 <FloatToStringReverz>
 8002f06:	4602      	mov	r2, r0
 8002f08:	463b      	mov	r3, r7
 8002f0a:	492e      	ldr	r1, [pc, #184]	; (8002fc4 <otvorRevers+0x1c4>)
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 fa19 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 57, 0x0000, 0xFFFF);
 8002f12:	4638      	mov	r0, r7
 8002f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2239      	movs	r2, #57	; 0x39
 8002f1e:	2117      	movs	r1, #23
 8002f20:	f7ff fb42 	bl	80025a8 <lcdPutS>

	smerovkaNORM = normalizuj((float)smerovka,smerovkaMIN,smerovkaMAX);
 8002f24:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <otvorRevers+0x1c8>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fe9e 	bl	8000c6c <__aeabi_ui2f>
 8002f30:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <otvorRevers+0x1cc>)
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <otvorRevers+0x1d0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f7ff fd53 	bl	80029e4 <normalizuj>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4b24      	ldr	r3, [pc, #144]	; (8002fd4 <otvorRevers+0x1d4>)
 8002f42:	601a      	str	r2, [r3, #0]
	sprintf(str,"Smerovka: %s", FloatToStringReverz(smerovkaNORM));
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <otvorRevers+0x1d4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fdf1 	bl	8002b30 <FloatToStringReverz>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	463b      	mov	r3, r7
 8002f52:	4921      	ldr	r1, [pc, #132]	; (8002fd8 <otvorRevers+0x1d8>)
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 f9f5 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2300      	movs	r3, #0
 8002f64:	2243      	movs	r2, #67	; 0x43
 8002f66:	2117      	movs	r1, #23
 8002f68:	f7ff fb1e 	bl	80025a8 <lcdPutS>
//DOROBIT
void otvorRevers(){ //funkcia na revers hodnot analogov
	subMenu = 1;
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
	while(subMenu==1){
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <otvorRevers+0x180>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f43f af55 	beq.w	8002e20 <otvorRevers+0x20>
	smerovkaNORM = normalizuj((float)smerovka,smerovkaMIN,smerovkaMAX);
	sprintf(str,"Smerovka: %s", FloatToStringReverz(smerovkaNORM));
	lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
		}
	}
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200000ec 	.word	0x200000ec
 8002f84:	200000e8 	.word	0x200000e8
 8002f88:	0800548c 	.word	0x0800548c
 8002f8c:	200000fa 	.word	0x200000fa
 8002f90:	2000001c 	.word	0x2000001c
 8002f94:	20000020 	.word	0x20000020
 8002f98:	20000100 	.word	0x20000100
 8002f9c:	08005450 	.word	0x08005450
 8002fa0:	200000ea 	.word	0x200000ea
 8002fa4:	2000000c 	.word	0x2000000c
 8002fa8:	20000010 	.word	0x20000010
 8002fac:	20000104 	.word	0x20000104
 8002fb0:	08005460 	.word	0x08005460
 8002fb4:	200000e4 	.word	0x200000e4
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	20000008 	.word	0x20000008
 8002fc0:	20000114 	.word	0x20000114
 8002fc4:	08005470 	.word	0x08005470
 8002fc8:	200000e0 	.word	0x200000e0
 8002fcc:	20000014 	.word	0x20000014
 8002fd0:	20000018 	.word	0x20000018
 8002fd4:	20000108 	.word	0x20000108
 8002fd8:	0800547c 	.word	0x0800547c

08002fdc <otvorExpo>:

void otvorExpo(){
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af02      	add	r7, sp, #8
	subMenu = 1;
 8002fe2:	4b9b      	ldr	r3, [pc, #620]	; (8003250 <otvorExpo+0x274>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8002fe8:	22ff      	movs	r2, #255	; 0xff
 8002fea:	21ff      	movs	r1, #255	; 0xff
 8002fec:	20ff      	movs	r0, #255	; 0xff
 8002fee:	f7ff fabf 	bl	8002570 <decodeRgbValue>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f8df 	bl	80021b8 <lcdClearDisplay>
	while(subMenu==1){
 8002ffa:	e1e3      	b.n	80033c4 <otvorExpo+0x3e8>
		if((klavesnica >= 3200) && (klavesnica <= 3440)){		//-
 8002ffc:	4b95      	ldr	r3, [pc, #596]	; (8003254 <otvorExpo+0x278>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8003006:	d306      	bcc.n	8003016 <otvorExpo+0x3a>
 8003008:	4b92      	ldr	r3, [pc, #584]	; (8003254 <otvorExpo+0x278>)
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8003012:	f240 81dc 	bls.w	80033ce <otvorExpo+0x3f2>
				break;
			}
		else{
	lcdPutS("Aktivne EXPO",23, 17, 0x0000, 0xFFFF);
 8003016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2300      	movs	r3, #0
 800301e:	2211      	movs	r2, #17
 8003020:	2117      	movs	r1, #23
 8003022:	488d      	ldr	r0, [pc, #564]	; (8003258 <otvorExpo+0x27c>)
 8003024:	f7ff fac0 	bl	80025a8 <lcdPutS>

	kridielkoNORM = normalizuj((float)kridielko,kridielkoMIN,kridielkoMAX);
 8003028:	4b8c      	ldr	r3, [pc, #560]	; (800325c <otvorExpo+0x280>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	b29b      	uxth	r3, r3
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fe1c 	bl	8000c6c <__aeabi_ui2f>
 8003034:	4b8a      	ldr	r3, [pc, #552]	; (8003260 <otvorExpo+0x284>)
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	4b8a      	ldr	r3, [pc, #552]	; (8003264 <otvorExpo+0x288>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	f7ff fcd1 	bl	80029e4 <normalizuj>
 8003042:	4602      	mov	r2, r0
 8003044:	4b88      	ldr	r3, [pc, #544]	; (8003268 <otvorExpo+0x28c>)
 8003046:	601a      	str	r2, [r3, #0]
	if(kridielkoNORM<0){
 8003048:	4b87      	ldr	r3, [pc, #540]	; (8003268 <otvorExpo+0x28c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f04f 0100 	mov.w	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe f801 	bl	8001058 <__aeabi_fcmplt>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d021      	beq.n	80030a0 <otvorExpo+0xc4>
		kridielkoNORM = exp2(kridielkoNORM*(-1))-1;
 800305c:	4b82      	ldr	r3, [pc, #520]	; (8003268 <otvorExpo+0x28c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd f9f7 	bl	8000458 <__aeabi_f2d>
 800306a:	4603      	mov	r3, r0
 800306c:	460c      	mov	r4, r1
 800306e:	4618      	mov	r0, r3
 8003070:	4621      	mov	r1, r4
 8003072:	f001 f9a3 	bl	80043bc <exp2>
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	4b7c      	ldr	r3, [pc, #496]	; (800326c <otvorExpo+0x290>)
 800307c:	f7fd f88c 	bl	8000198 <__aeabi_dsub>
 8003080:	4603      	mov	r3, r0
 8003082:	460c      	mov	r4, r1
 8003084:	4618      	mov	r0, r3
 8003086:	4621      	mov	r1, r4
 8003088:	f7fd fcea 	bl	8000a60 <__aeabi_d2f>
 800308c:	4602      	mov	r2, r0
 800308e:	4b76      	ldr	r3, [pc, #472]	; (8003268 <otvorExpo+0x28c>)
 8003090:	601a      	str	r2, [r3, #0]
		kridielkoNORM = kridielkoNORM*(-1);
 8003092:	4b75      	ldr	r3, [pc, #468]	; (8003268 <otvorExpo+0x28c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800309a:	4a73      	ldr	r2, [pc, #460]	; (8003268 <otvorExpo+0x28c>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e018      	b.n	80030d2 <otvorExpo+0xf6>
	}
	else{kridielkoNORM = exp2(kridielkoNORM)-1;}
 80030a0:	4b71      	ldr	r3, [pc, #452]	; (8003268 <otvorExpo+0x28c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd f9d7 	bl	8000458 <__aeabi_f2d>
 80030aa:	4603      	mov	r3, r0
 80030ac:	460c      	mov	r4, r1
 80030ae:	4618      	mov	r0, r3
 80030b0:	4621      	mov	r1, r4
 80030b2:	f001 f983 	bl	80043bc <exp2>
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	4b6c      	ldr	r3, [pc, #432]	; (800326c <otvorExpo+0x290>)
 80030bc:	f7fd f86c 	bl	8000198 <__aeabi_dsub>
 80030c0:	4603      	mov	r3, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	4618      	mov	r0, r3
 80030c6:	4621      	mov	r1, r4
 80030c8:	f7fd fcca 	bl	8000a60 <__aeabi_d2f>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b66      	ldr	r3, [pc, #408]	; (8003268 <otvorExpo+0x28c>)
 80030d0:	601a      	str	r2, [r3, #0]
	sprintf(str,"kridielko: %s", FloatToString(kridielkoNORM));
 80030d2:	4b65      	ldr	r3, [pc, #404]	; (8003268 <otvorExpo+0x28c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fcb0 	bl	8002a3c <FloatToString>
 80030dc:	4602      	mov	r2, r0
 80030de:	463b      	mov	r3, r7
 80030e0:	4963      	ldr	r1, [pc, #396]	; (8003270 <otvorExpo+0x294>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 f92e 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 37, 0x0000, 0xFFFF);
 80030e8:	4638      	mov	r0, r7
 80030ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2300      	movs	r3, #0
 80030f2:	2225      	movs	r2, #37	; 0x25
 80030f4:	2117      	movs	r1, #23
 80030f6:	f7ff fa57 	bl	80025a8 <lcdPutS>

	vyskovkaNORM = normalizuj((float)vyskovka,vyskovkaMIN,vyskovkaMAX);
 80030fa:	4b5e      	ldr	r3, [pc, #376]	; (8003274 <otvorExpo+0x298>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd fdb3 	bl	8000c6c <__aeabi_ui2f>
 8003106:	4b5c      	ldr	r3, [pc, #368]	; (8003278 <otvorExpo+0x29c>)
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	4b5c      	ldr	r3, [pc, #368]	; (800327c <otvorExpo+0x2a0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	f7ff fc68 	bl	80029e4 <normalizuj>
 8003114:	4602      	mov	r2, r0
 8003116:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <otvorExpo+0x2a4>)
 8003118:	601a      	str	r2, [r3, #0]
	if(vyskovkaNORM<0){
 800311a:	4b59      	ldr	r3, [pc, #356]	; (8003280 <otvorExpo+0x2a4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f04f 0100 	mov.w	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd ff98 	bl	8001058 <__aeabi_fcmplt>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d021      	beq.n	8003172 <otvorExpo+0x196>
		vyskovkaNORM = exp2(vyskovkaNORM*(-1))-1;
 800312e:	4b54      	ldr	r3, [pc, #336]	; (8003280 <otvorExpo+0x2a4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f98e 	bl	8000458 <__aeabi_f2d>
 800313c:	4603      	mov	r3, r0
 800313e:	460c      	mov	r4, r1
 8003140:	4618      	mov	r0, r3
 8003142:	4621      	mov	r1, r4
 8003144:	f001 f93a 	bl	80043bc <exp2>
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <otvorExpo+0x290>)
 800314e:	f7fd f823 	bl	8000198 <__aeabi_dsub>
 8003152:	4603      	mov	r3, r0
 8003154:	460c      	mov	r4, r1
 8003156:	4618      	mov	r0, r3
 8003158:	4621      	mov	r1, r4
 800315a:	f7fd fc81 	bl	8000a60 <__aeabi_d2f>
 800315e:	4602      	mov	r2, r0
 8003160:	4b47      	ldr	r3, [pc, #284]	; (8003280 <otvorExpo+0x2a4>)
 8003162:	601a      	str	r2, [r3, #0]
		vyskovkaNORM = vyskovkaNORM*(-1);
 8003164:	4b46      	ldr	r3, [pc, #280]	; (8003280 <otvorExpo+0x2a4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800316c:	4a44      	ldr	r2, [pc, #272]	; (8003280 <otvorExpo+0x2a4>)
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	e01e      	b.n	80031b0 <otvorExpo+0x1d4>
	}
	else{vyskovkaNORM = exp2(vyskovkaNORM)-1;
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <otvorExpo+0x2a4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd f96e 	bl	8000458 <__aeabi_f2d>
 800317c:	4603      	mov	r3, r0
 800317e:	460c      	mov	r4, r1
 8003180:	4618      	mov	r0, r3
 8003182:	4621      	mov	r1, r4
 8003184:	f001 f91a 	bl	80043bc <exp2>
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <otvorExpo+0x290>)
 800318e:	f7fd f803 	bl	8000198 <__aeabi_dsub>
 8003192:	4603      	mov	r3, r0
 8003194:	460c      	mov	r4, r1
 8003196:	4618      	mov	r0, r3
 8003198:	4621      	mov	r1, r4
 800319a:	f7fd fc61 	bl	8000a60 <__aeabi_d2f>
 800319e:	4602      	mov	r2, r0
 80031a0:	4b37      	ldr	r3, [pc, #220]	; (8003280 <otvorExpo+0x2a4>)
 80031a2:	601a      	str	r2, [r3, #0]
	kridielkoNORM = kridielkoNORM*(-1);}
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <otvorExpo+0x28c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80031ac:	4a2e      	ldr	r2, [pc, #184]	; (8003268 <otvorExpo+0x28c>)
 80031ae:	6013      	str	r3, [r2, #0]
	sprintf(str,"Vyskovka: %s", FloatToString(vyskovkaNORM));
 80031b0:	4b33      	ldr	r3, [pc, #204]	; (8003280 <otvorExpo+0x2a4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fc41 	bl	8002a3c <FloatToString>
 80031ba:	4602      	mov	r2, r0
 80031bc:	463b      	mov	r3, r7
 80031be:	4931      	ldr	r1, [pc, #196]	; (8003284 <otvorExpo+0x2a8>)
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 f8bf 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 47, 0x0000, 0xFFFF);
 80031c6:	4638      	mov	r0, r7
 80031c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2300      	movs	r3, #0
 80031d0:	222f      	movs	r2, #47	; 0x2f
 80031d2:	2117      	movs	r1, #23
 80031d4:	f7ff f9e8 	bl	80025a8 <lcdPutS>

	plynNORM = normalizuj((float)plyn,plynMIN,plynMAX);
 80031d8:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <otvorExpo+0x2ac>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fd44 	bl	8000c6c <__aeabi_ui2f>
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <otvorExpo+0x2b0>)
 80031e6:	6819      	ldr	r1, [r3, #0]
 80031e8:	4b29      	ldr	r3, [pc, #164]	; (8003290 <otvorExpo+0x2b4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	f7ff fbf9 	bl	80029e4 <normalizuj>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <otvorExpo+0x2b8>)
 80031f6:	601a      	str	r2, [r3, #0]
	if(plynNORM<0){
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <otvorExpo+0x2b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd ff29 	bl	8001058 <__aeabi_fcmplt>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d045      	beq.n	8003298 <otvorExpo+0x2bc>
		plynNORM = exp2(plynNORM*(-1))-1;
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <otvorExpo+0x2b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f91f 	bl	8000458 <__aeabi_f2d>
 800321a:	4603      	mov	r3, r0
 800321c:	460c      	mov	r4, r1
 800321e:	4618      	mov	r0, r3
 8003220:	4621      	mov	r1, r4
 8003222:	f001 f8cb 	bl	80043bc <exp2>
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <otvorExpo+0x290>)
 800322c:	f7fc ffb4 	bl	8000198 <__aeabi_dsub>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	4618      	mov	r0, r3
 8003236:	4621      	mov	r1, r4
 8003238:	f7fd fc12 	bl	8000a60 <__aeabi_d2f>
 800323c:	4602      	mov	r2, r0
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <otvorExpo+0x2b8>)
 8003240:	601a      	str	r2, [r3, #0]
		plynNORM = plynNORM*(-1);
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <otvorExpo+0x2b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <otvorExpo+0x2b8>)
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e03c      	b.n	80032ca <otvorExpo+0x2ee>
 8003250:	200000ec 	.word	0x200000ec
 8003254:	200000e8 	.word	0x200000e8
 8003258:	08005494 	.word	0x08005494
 800325c:	200000fa 	.word	0x200000fa
 8003260:	2000001c 	.word	0x2000001c
 8003264:	20000020 	.word	0x20000020
 8003268:	20000100 	.word	0x20000100
 800326c:	3ff00000 	.word	0x3ff00000
 8003270:	08005450 	.word	0x08005450
 8003274:	200000ea 	.word	0x200000ea
 8003278:	2000000c 	.word	0x2000000c
 800327c:	20000010 	.word	0x20000010
 8003280:	20000104 	.word	0x20000104
 8003284:	08005460 	.word	0x08005460
 8003288:	200000e4 	.word	0x200000e4
 800328c:	20000004 	.word	0x20000004
 8003290:	20000008 	.word	0x20000008
 8003294:	20000114 	.word	0x20000114
	}
	else{plynNORM = exp2(plynNORM)-1;}
 8003298:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <otvorExpo+0x3fc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f8db 	bl	8000458 <__aeabi_f2d>
 80032a2:	4603      	mov	r3, r0
 80032a4:	460c      	mov	r4, r1
 80032a6:	4618      	mov	r0, r3
 80032a8:	4621      	mov	r1, r4
 80032aa:	f001 f887 	bl	80043bc <exp2>
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <otvorExpo+0x400>)
 80032b4:	f7fc ff70 	bl	8000198 <__aeabi_dsub>
 80032b8:	4603      	mov	r3, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	4618      	mov	r0, r3
 80032be:	4621      	mov	r1, r4
 80032c0:	f7fd fbce 	bl	8000a60 <__aeabi_d2f>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <otvorExpo+0x3fc>)
 80032c8:	601a      	str	r2, [r3, #0]
	sprintf(str,"Plyn: %s", FloatToString(plynNORM));
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <otvorExpo+0x3fc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fbb4 	bl	8002a3c <FloatToString>
 80032d4:	4602      	mov	r2, r0
 80032d6:	463b      	mov	r3, r7
 80032d8:	4941      	ldr	r1, [pc, #260]	; (80033e0 <otvorExpo+0x404>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 f832 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 57, 0x0000, 0xFFFF);
 80032e0:	4638      	mov	r0, r7
 80032e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2300      	movs	r3, #0
 80032ea:	2239      	movs	r2, #57	; 0x39
 80032ec:	2117      	movs	r1, #23
 80032ee:	f7ff f95b 	bl	80025a8 <lcdPutS>

	smerovkaNORM = normalizuj((float)smerovka,smerovkaMIN,smerovkaMAX);
 80032f2:	4b3c      	ldr	r3, [pc, #240]	; (80033e4 <otvorExpo+0x408>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd fcb7 	bl	8000c6c <__aeabi_ui2f>
 80032fe:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <otvorExpo+0x40c>)
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <otvorExpo+0x410>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	f7ff fb6c 	bl	80029e4 <normalizuj>
 800330c:	4602      	mov	r2, r0
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <otvorExpo+0x414>)
 8003310:	601a      	str	r2, [r3, #0]
	if(smerovkaNORM<0){
 8003312:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <otvorExpo+0x414>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fe9c 	bl	8001058 <__aeabi_fcmplt>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d021      	beq.n	800336a <otvorExpo+0x38e>
		smerovkaNORM = exp2(smerovkaNORM*(-1))-1;
 8003326:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <otvorExpo+0x414>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f892 	bl	8000458 <__aeabi_f2d>
 8003334:	4603      	mov	r3, r0
 8003336:	460c      	mov	r4, r1
 8003338:	4618      	mov	r0, r3
 800333a:	4621      	mov	r1, r4
 800333c:	f001 f83e 	bl	80043bc <exp2>
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <otvorExpo+0x400>)
 8003346:	f7fc ff27 	bl	8000198 <__aeabi_dsub>
 800334a:	4603      	mov	r3, r0
 800334c:	460c      	mov	r4, r1
 800334e:	4618      	mov	r0, r3
 8003350:	4621      	mov	r1, r4
 8003352:	f7fd fb85 	bl	8000a60 <__aeabi_d2f>
 8003356:	4602      	mov	r2, r0
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <otvorExpo+0x414>)
 800335a:	601a      	str	r2, [r3, #0]
		smerovkaNORM = smerovkaNORM*(-1);
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <otvorExpo+0x414>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003364:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <otvorExpo+0x414>)
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	e018      	b.n	800339c <otvorExpo+0x3c0>
	}
	else{smerovkaNORM = exp2(smerovkaNORM)-1;}
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <otvorExpo+0x414>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f872 	bl	8000458 <__aeabi_f2d>
 8003374:	4603      	mov	r3, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4618      	mov	r0, r3
 800337a:	4621      	mov	r1, r4
 800337c:	f001 f81e 	bl	80043bc <exp2>
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <otvorExpo+0x400>)
 8003386:	f7fc ff07 	bl	8000198 <__aeabi_dsub>
 800338a:	4603      	mov	r3, r0
 800338c:	460c      	mov	r4, r1
 800338e:	4618      	mov	r0, r3
 8003390:	4621      	mov	r1, r4
 8003392:	f7fd fb65 	bl	8000a60 <__aeabi_d2f>
 8003396:	4602      	mov	r2, r0
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <otvorExpo+0x414>)
 800339a:	601a      	str	r2, [r3, #0]
	sprintf(str,"Smerovka: %s", FloatToString(smerovkaNORM));
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <otvorExpo+0x414>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fb4b 	bl	8002a3c <FloatToString>
 80033a6:	4602      	mov	r2, r0
 80033a8:	463b      	mov	r3, r7
 80033aa:	4912      	ldr	r1, [pc, #72]	; (80033f4 <otvorExpo+0x418>)
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 ffc9 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
 80033b2:	4638      	mov	r0, r7
 80033b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	2243      	movs	r2, #67	; 0x43
 80033be:	2117      	movs	r1, #23
 80033c0:	f7ff f8f2 	bl	80025a8 <lcdPutS>

void otvorExpo(){
	subMenu = 1;
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
	while(subMenu==1){
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <otvorExpo+0x41c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f43f ae17 	beq.w	8002ffc <otvorExpo+0x20>
	else{smerovkaNORM = exp2(smerovkaNORM)-1;}
	sprintf(str,"Smerovka: %s", FloatToString(smerovkaNORM));
	lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
			}
	}
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000114 	.word	0x20000114
 80033dc:	3ff00000 	.word	0x3ff00000
 80033e0:	08005470 	.word	0x08005470
 80033e4:	200000e0 	.word	0x200000e0
 80033e8:	20000014 	.word	0x20000014
 80033ec:	20000018 	.word	0x20000018
 80033f0:	20000108 	.word	0x20000108
 80033f4:	0800547c 	.word	0x0800547c
 80033f8:	200000ec 	.word	0x200000ec

080033fc <otvorMix>:

void otvorMix(){ //funkcia na mixovanie kanalov, vahy: vyskovka 50%, klapky 50%
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b087      	sub	sp, #28
 8003400:	af02      	add	r7, sp, #8
	subMenu = 1;
 8003402:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <otvorMix+0x1dc>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
	float vahaVyskovky = 0.5;
 8003408:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800340c:	60fb      	str	r3, [r7, #12]
	float vahaKlapky = 0.5;
 800340e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003412:	60bb      	str	r3, [r7, #8]
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8003414:	22ff      	movs	r2, #255	; 0xff
 8003416:	21ff      	movs	r1, #255	; 0xff
 8003418:	20ff      	movs	r0, #255	; 0xff
 800341a:	f7ff f8a9 	bl	8002570 <decodeRgbValue>
 800341e:	4603      	mov	r3, r0
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fec9 	bl	80021b8 <lcdClearDisplay>
	while(subMenu==1){
 8003426:	e168      	b.n	80036fa <otvorMix+0x2fe>
		if((klavesnica >= 3200) && (klavesnica <= 3440)){		//-
 8003428:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <otvorMix+0x1e0>)
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8003432:	d306      	bcc.n	8003442 <otvorMix+0x46>
 8003434:	4b69      	ldr	r3, [pc, #420]	; (80035dc <otvorMix+0x1e0>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 800343e:	f240 8161 	bls.w	8003704 <otvorMix+0x308>
				break;
			}
		else{
	lcdPutS("MIX 50%",23, 17, 0x0000, 0xFFFF);
 8003442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2300      	movs	r3, #0
 800344a:	2211      	movs	r2, #17
 800344c:	2117      	movs	r1, #23
 800344e:	4864      	ldr	r0, [pc, #400]	; (80035e0 <otvorMix+0x1e4>)
 8003450:	f7ff f8aa 	bl	80025a8 <lcdPutS>

	kridielkoNORM = normalizuj((float)kridielko,kridielkoMIN,kridielkoMAX);
 8003454:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <otvorMix+0x1e8>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fc06 	bl	8000c6c <__aeabi_ui2f>
 8003460:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <otvorMix+0x1ec>)
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	4b61      	ldr	r3, [pc, #388]	; (80035ec <otvorMix+0x1f0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	f7ff fabb 	bl	80029e4 <normalizuj>
 800346e:	4602      	mov	r2, r0
 8003470:	4b5f      	ldr	r3, [pc, #380]	; (80035f0 <otvorMix+0x1f4>)
 8003472:	601a      	str	r2, [r3, #0]
	vyskovkaNORM = normalizuj((float)vyskovka,vyskovkaMIN,vyskovkaMAX);
 8003474:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <otvorMix+0x1f8>)
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fbf6 	bl	8000c6c <__aeabi_ui2f>
 8003480:	4b5d      	ldr	r3, [pc, #372]	; (80035f8 <otvorMix+0x1fc>)
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	4b5d      	ldr	r3, [pc, #372]	; (80035fc <otvorMix+0x200>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	f7ff faab 	bl	80029e4 <normalizuj>
 800348e:	4602      	mov	r2, r0
 8003490:	4b5b      	ldr	r3, [pc, #364]	; (8003600 <otvorMix+0x204>)
 8003492:	601a      	str	r2, [r3, #0]

	if(vyskovkaNORM>0){
 8003494:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <otvorMix+0x204>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd fdf9 	bl	8001094 <__aeabi_fcmpgt>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d061      	beq.n	800356c <otvorMix+0x170>
		if(kridielkoNORM>0){
 80034a8:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <otvorMix+0x1f4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd fdef 	bl	8001094 <__aeabi_fcmpgt>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02b      	beq.n	8003514 <otvorMix+0x118>
			MIX = kridielkoNORM*vahaKlapky + vyskovkaNORM*vahaVyskovky;
 80034bc:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <otvorMix+0x1f4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fc2a 	bl	8000d1c <__aeabi_fmul>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461c      	mov	r4, r3
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <otvorMix+0x204>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68f9      	ldr	r1, [r7, #12]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd fc22 	bl	8000d1c <__aeabi_fmul>
 80034d8:	4603      	mov	r3, r0
 80034da:	4619      	mov	r1, r3
 80034dc:	4620      	mov	r0, r4
 80034de:	f7fd fb15 	bl	8000b0c <__addsf3>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <otvorMix+0x208>)
 80034e8:	601a      	str	r2, [r3, #0]
			sprintf(str,"Servo: %s", FloatToString(MIX));
 80034ea:	4b46      	ldr	r3, [pc, #280]	; (8003604 <otvorMix+0x208>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff faa4 	bl	8002a3c <FloatToString>
 80034f4:	4602      	mov	r2, r0
 80034f6:	463b      	mov	r3, r7
 80034f8:	4943      	ldr	r1, [pc, #268]	; (8003608 <otvorMix+0x20c>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 ff22 	bl	8004344 <siprintf>
			lcdPutS(str, 23, 37, 0x0000, 0xFFFF);
 8003500:	4638      	mov	r0, r7
 8003502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2300      	movs	r3, #0
 800350a:	2225      	movs	r2, #37	; 0x25
 800350c:	2117      	movs	r1, #23
 800350e:	f7ff f84b 	bl	80025a8 <lcdPutS>
 8003512:	e0a6      	b.n	8003662 <otvorMix+0x266>
		}
		else{
		MIX = vyskovkaNORM*vahaVyskovky + kridielkoNORM*vahaKlapky;
 8003514:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <otvorMix+0x204>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fbfe 	bl	8000d1c <__aeabi_fmul>
 8003520:	4603      	mov	r3, r0
 8003522:	461c      	mov	r4, r3
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <otvorMix+0x1f4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fbf6 	bl	8000d1c <__aeabi_fmul>
 8003530:	4603      	mov	r3, r0
 8003532:	4619      	mov	r1, r3
 8003534:	4620      	mov	r0, r4
 8003536:	f7fd fae9 	bl	8000b0c <__addsf3>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <otvorMix+0x208>)
 8003540:	601a      	str	r2, [r3, #0]
		sprintf(str,"Servo: %s", FloatToString(MIX));
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <otvorMix+0x208>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fa78 	bl	8002a3c <FloatToString>
 800354c:	4602      	mov	r2, r0
 800354e:	463b      	mov	r3, r7
 8003550:	492d      	ldr	r1, [pc, #180]	; (8003608 <otvorMix+0x20c>)
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fef6 	bl	8004344 <siprintf>
		lcdPutS(str, 23, 37, 0x0000, 0xFFFF);
 8003558:	4638      	mov	r0, r7
 800355a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	2225      	movs	r2, #37	; 0x25
 8003564:	2117      	movs	r1, #23
 8003566:	f7ff f81f 	bl	80025a8 <lcdPutS>
 800356a:	e07a      	b.n	8003662 <otvorMix+0x266>
		}
	}
	else{
		if(kridielkoNORM>0){
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <otvorMix+0x1f4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f04f 0100 	mov.w	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd fd8d 	bl	8001094 <__aeabi_fcmpgt>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d045      	beq.n	800360c <otvorMix+0x210>
			MIX = kridielkoNORM*vahaKlapky + vyskovkaNORM*vahaVyskovky;
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <otvorMix+0x1f4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fbc8 	bl	8000d1c <__aeabi_fmul>
 800358c:	4603      	mov	r3, r0
 800358e:	461c      	mov	r4, r3
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <otvorMix+0x204>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68f9      	ldr	r1, [r7, #12]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fbc0 	bl	8000d1c <__aeabi_fmul>
 800359c:	4603      	mov	r3, r0
 800359e:	4619      	mov	r1, r3
 80035a0:	4620      	mov	r0, r4
 80035a2:	f7fd fab3 	bl	8000b0c <__addsf3>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <otvorMix+0x208>)
 80035ac:	601a      	str	r2, [r3, #0]
			sprintf(str,"Servo: %s", FloatToString(MIX));
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <otvorMix+0x208>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fa42 	bl	8002a3c <FloatToString>
 80035b8:	4602      	mov	r2, r0
 80035ba:	463b      	mov	r3, r7
 80035bc:	4912      	ldr	r1, [pc, #72]	; (8003608 <otvorMix+0x20c>)
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fec0 	bl	8004344 <siprintf>
			lcdPutS(str, 23, 37, 0x0000, 0xFFFF);
 80035c4:	4638      	mov	r0, r7
 80035c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	2225      	movs	r2, #37	; 0x25
 80035d0:	2117      	movs	r1, #23
 80035d2:	f7fe ffe9 	bl	80025a8 <lcdPutS>
 80035d6:	e044      	b.n	8003662 <otvorMix+0x266>
 80035d8:	200000ec 	.word	0x200000ec
 80035dc:	200000e8 	.word	0x200000e8
 80035e0:	080054a4 	.word	0x080054a4
 80035e4:	200000fa 	.word	0x200000fa
 80035e8:	2000001c 	.word	0x2000001c
 80035ec:	20000020 	.word	0x20000020
 80035f0:	20000100 	.word	0x20000100
 80035f4:	200000ea 	.word	0x200000ea
 80035f8:	2000000c 	.word	0x2000000c
 80035fc:	20000010 	.word	0x20000010
 8003600:	20000104 	.word	0x20000104
 8003604:	2000012c 	.word	0x2000012c
 8003608:	080054ac 	.word	0x080054ac
		}
		else{
		MIX = kridielkoNORM*vahaKlapky + vyskovkaNORM*vahaVyskovky;
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <otvorMix+0x310>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fb82 	bl	8000d1c <__aeabi_fmul>
 8003618:	4603      	mov	r3, r0
 800361a:	461c      	mov	r4, r3
 800361c:	4b3c      	ldr	r3, [pc, #240]	; (8003710 <otvorMix+0x314>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fd fb7a 	bl	8000d1c <__aeabi_fmul>
 8003628:	4603      	mov	r3, r0
 800362a:	4619      	mov	r1, r3
 800362c:	4620      	mov	r0, r4
 800362e:	f7fd fa6d 	bl	8000b0c <__addsf3>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <otvorMix+0x318>)
 8003638:	601a      	str	r2, [r3, #0]
		sprintf(str,"Servo: %s", FloatToString(MIX));
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <otvorMix+0x318>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f9fc 	bl	8002a3c <FloatToString>
 8003644:	4602      	mov	r2, r0
 8003646:	463b      	mov	r3, r7
 8003648:	4933      	ldr	r1, [pc, #204]	; (8003718 <otvorMix+0x31c>)
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fe7a 	bl	8004344 <siprintf>
		lcdPutS(str, 23, 37, 0x0000, 0xFFFF);
 8003650:	4638      	mov	r0, r7
 8003652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2300      	movs	r3, #0
 800365a:	2225      	movs	r2, #37	; 0x25
 800365c:	2117      	movs	r1, #23
 800365e:	f7fe ffa3 	bl	80025a8 <lcdPutS>
		}
	}
	plynNORM = normalizuj((float)plyn,plynMIN,plynMAX);
 8003662:	4b2e      	ldr	r3, [pc, #184]	; (800371c <otvorMix+0x320>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	4618      	mov	r0, r3
 800366a:	f7fd faff 	bl	8000c6c <__aeabi_ui2f>
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <otvorMix+0x324>)
 8003670:	6819      	ldr	r1, [r3, #0]
 8003672:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <otvorMix+0x328>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	f7ff f9b4 	bl	80029e4 <normalizuj>
 800367c:	4602      	mov	r2, r0
 800367e:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <otvorMix+0x32c>)
 8003680:	601a      	str	r2, [r3, #0]
	sprintf(str,"kridielko: %s", FloatToString(kridielkoNORM));
 8003682:	4b22      	ldr	r3, [pc, #136]	; (800370c <otvorMix+0x310>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f9d8 	bl	8002a3c <FloatToString>
 800368c:	4602      	mov	r2, r0
 800368e:	463b      	mov	r3, r7
 8003690:	4926      	ldr	r1, [pc, #152]	; (800372c <otvorMix+0x330>)
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fe56 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 47, 0x0000, 0xFFFF);
 8003698:	4638      	mov	r0, r7
 800369a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	222f      	movs	r2, #47	; 0x2f
 80036a4:	2117      	movs	r1, #23
 80036a6:	f7fe ff7f 	bl	80025a8 <lcdPutS>
	sprintf(str,"Vyskovka: %s", FloatToString(vyskovkaNORM));
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <otvorMix+0x314>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f9c4 	bl	8002a3c <FloatToString>
 80036b4:	4602      	mov	r2, r0
 80036b6:	463b      	mov	r3, r7
 80036b8:	491d      	ldr	r1, [pc, #116]	; (8003730 <otvorMix+0x334>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fe42 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 57, 0x0000, 0xFFFF);
 80036c0:	4638      	mov	r0, r7
 80036c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	2239      	movs	r2, #57	; 0x39
 80036cc:	2117      	movs	r1, #23
 80036ce:	f7fe ff6b 	bl	80025a8 <lcdPutS>
	sprintf(str,"Plyn: %s", FloatToString(plynNORM));
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <otvorMix+0x32c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f9b0 	bl	8002a3c <FloatToString>
 80036dc:	4602      	mov	r2, r0
 80036de:	463b      	mov	r3, r7
 80036e0:	4914      	ldr	r1, [pc, #80]	; (8003734 <otvorMix+0x338>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fe2e 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
 80036e8:	4638      	mov	r0, r7
 80036ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	2243      	movs	r2, #67	; 0x43
 80036f4:	2117      	movs	r1, #23
 80036f6:	f7fe ff57 	bl	80025a8 <lcdPutS>
	subMenu = 1;
	float vahaVyskovky = 0.5;
	float vahaKlapky = 0.5;
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
	while(subMenu==1){
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <otvorMix+0x33c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f43f ae92 	beq.w	8003428 <otvorMix+0x2c>
	lcdPutS(str, 23, 57, 0x0000, 0xFFFF);
	sprintf(str,"Plyn: %s", FloatToString(plynNORM));
	lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
			}
	}
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	bd90      	pop	{r4, r7, pc}
 800370c:	20000100 	.word	0x20000100
 8003710:	20000104 	.word	0x20000104
 8003714:	2000012c 	.word	0x2000012c
 8003718:	080054ac 	.word	0x080054ac
 800371c:	200000e4 	.word	0x200000e4
 8003720:	20000004 	.word	0x20000004
 8003724:	20000008 	.word	0x20000008
 8003728:	20000114 	.word	0x20000114
 800372c:	08005450 	.word	0x08005450
 8003730:	08005460 	.word	0x08005460
 8003734:	08005470 	.word	0x08005470
 8003738:	200000ec 	.word	0x200000ec
 800373c:	00000000 	.word	0x00000000

08003740 <otvorEPA>:

void otvorEPA(){
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b085      	sub	sp, #20
 8003744:	af02      	add	r7, sp, #8
	subMenu = 1;
 8003746:	4b58      	ldr	r3, [pc, #352]	; (80038a8 <otvorEPA+0x168>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	21ff      	movs	r1, #255	; 0xff
 8003750:	20ff      	movs	r0, #255	; 0xff
 8003752:	f7fe ff0d 	bl	8002570 <decodeRgbValue>
 8003756:	4603      	mov	r3, r0
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe fd2d 	bl	80021b8 <lcdClearDisplay>
	while(subMenu==1){
 800375e:	e095      	b.n	800388c <otvorEPA+0x14c>
		if((klavesnica >= 3200) && (klavesnica <= 3440)){		//-
 8003760:	4b52      	ldr	r3, [pc, #328]	; (80038ac <otvorEPA+0x16c>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800376a:	d306      	bcc.n	800377a <otvorEPA+0x3a>
 800376c:	4b4f      	ldr	r3, [pc, #316]	; (80038ac <otvorEPA+0x16c>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8003776:	f240 808e 	bls.w	8003896 <otvorEPA+0x156>
				break;
			}
		else{
	lcdPutS("TRIMOVANIE",23, 17, 0x0000, 0xFFFF); //zobrazi na LCD
 800377a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	2300      	movs	r3, #0
 8003782:	2211      	movs	r2, #17
 8003784:	2117      	movs	r1, #23
 8003786:	484a      	ldr	r0, [pc, #296]	; (80038b0 <otvorEPA+0x170>)
 8003788:	f7fe ff0e 	bl	80025a8 <lcdPutS>

	if((klavesnica >= 2600) && (klavesnica <= 3000)){	//+
 800378c:	4b47      	ldr	r3, [pc, #284]	; (80038ac <otvorEPA+0x16c>)
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f640 2227 	movw	r2, #2599	; 0xa27
 8003796:	4293      	cmp	r3, r2
 8003798:	d919      	bls.n	80037ce <otvorEPA+0x8e>
 800379a:	4b44      	ldr	r3, [pc, #272]	; (80038ac <otvorEPA+0x16c>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d812      	bhi.n	80037ce <otvorEPA+0x8e>
		trim += 0.01;
 80037a8:	4b42      	ldr	r3, [pc, #264]	; (80038b4 <otvorEPA+0x174>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fe53 	bl	8000458 <__aeabi_f2d>
 80037b2:	a33b      	add	r3, pc, #236	; (adr r3, 80038a0 <otvorEPA+0x160>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc fcf0 	bl	800019c <__adddf3>
 80037bc:	4603      	mov	r3, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	4618      	mov	r0, r3
 80037c2:	4621      	mov	r1, r4
 80037c4:	f7fd f94c 	bl	8000a60 <__aeabi_d2f>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <otvorEPA+0x174>)
 80037cc:	601a      	str	r2, [r3, #0]
	}
	if((klavesnica >= 3200) && (klavesnica <= 3440)){	//-
 80037ce:	4b37      	ldr	r3, [pc, #220]	; (80038ac <otvorEPA+0x16c>)
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80037d8:	d318      	bcc.n	800380c <otvorEPA+0xcc>
 80037da:	4b34      	ldr	r3, [pc, #208]	; (80038ac <otvorEPA+0x16c>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 80037e4:	d812      	bhi.n	800380c <otvorEPA+0xcc>
		trim -= 0.01;
 80037e6:	4b33      	ldr	r3, [pc, #204]	; (80038b4 <otvorEPA+0x174>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fc fe34 	bl	8000458 <__aeabi_f2d>
 80037f0:	a32b      	add	r3, pc, #172	; (adr r3, 80038a0 <otvorEPA+0x160>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f7fc fccf 	bl	8000198 <__aeabi_dsub>
 80037fa:	4603      	mov	r3, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	4618      	mov	r0, r3
 8003800:	4621      	mov	r1, r4
 8003802:	f7fd f92d 	bl	8000a60 <__aeabi_d2f>
 8003806:	4602      	mov	r2, r0
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <otvorEPA+0x174>)
 800380a:	601a      	str	r2, [r3, #0]
	}

	plynNORM = normalizuj((float)plyn,plynMIN,plynMAX) + trim;
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <otvorEPA+0x178>)
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fa2a 	bl	8000c6c <__aeabi_ui2f>
 8003818:	4b28      	ldr	r3, [pc, #160]	; (80038bc <otvorEPA+0x17c>)
 800381a:	6819      	ldr	r1, [r3, #0]
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <otvorEPA+0x180>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	f7ff f8df 	bl	80029e4 <normalizuj>
 8003826:	4602      	mov	r2, r0
 8003828:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <otvorEPA+0x174>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f7fd f96c 	bl	8000b0c <__addsf3>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <otvorEPA+0x184>)
 800383a:	601a      	str	r2, [r3, #0]

	sprintf(str,"Plyn: %s", FloatToString(plynNORM));
 800383c:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <otvorEPA+0x184>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff f8fb 	bl	8002a3c <FloatToString>
 8003846:	4602      	mov	r2, r0
 8003848:	463b      	mov	r3, r7
 800384a:	491f      	ldr	r1, [pc, #124]	; (80038c8 <otvorEPA+0x188>)
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fd79 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 57, 0x0000, 0xFFFF);
 8003852:	4638      	mov	r0, r7
 8003854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	2300      	movs	r3, #0
 800385c:	2239      	movs	r2, #57	; 0x39
 800385e:	2117      	movs	r1, #23
 8003860:	f7fe fea2 	bl	80025a8 <lcdPutS>
	sprintf(str,"Trim: %s", FloatToString(trim));
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <otvorEPA+0x174>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f8e7 	bl	8002a3c <FloatToString>
 800386e:	4602      	mov	r2, r0
 8003870:	463b      	mov	r3, r7
 8003872:	4916      	ldr	r1, [pc, #88]	; (80038cc <otvorEPA+0x18c>)
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fd65 	bl	8004344 <siprintf>
	lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
 800387a:	4638      	mov	r0, r7
 800387c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	2300      	movs	r3, #0
 8003884:	2243      	movs	r2, #67	; 0x43
 8003886:	2117      	movs	r1, #23
 8003888:	f7fe fe8e 	bl	80025a8 <lcdPutS>

void otvorEPA(){
	subMenu = 1;
	char str[5];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
	while(subMenu==1){
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <otvorEPA+0x168>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	f43f af65 	beq.w	8003760 <otvorEPA+0x20>
	lcdPutS(str, 23, 57, 0x0000, 0xFFFF);
	sprintf(str,"Trim: %s", FloatToString(trim));
	lcdPutS(str, 23, 67, 0x0000, 0xFFFF);
			}
	}
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bd90      	pop	{r4, r7, pc}
 800389e:	bf00      	nop
 80038a0:	47ae147b 	.word	0x47ae147b
 80038a4:	3f847ae1 	.word	0x3f847ae1
 80038a8:	200000ec 	.word	0x200000ec
 80038ac:	200000e8 	.word	0x200000e8
 80038b0:	080054b8 	.word	0x080054b8
 80038b4:	200000bc 	.word	0x200000bc
 80038b8:	200000e4 	.word	0x200000e4
 80038bc:	20000004 	.word	0x20000004
 80038c0:	20000008 	.word	0x20000008
 80038c4:	20000114 	.word	0x20000114
 80038c8:	08005470 	.word	0x08005470
 80038cc:	080054c4 	.word	0x080054c4

080038d0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80038d4:	4a15      	ldr	r2, [pc, #84]	; (800392c <SystemInit+0x5c>)
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <SystemInit+0x5c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038de:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80038e0:	4912      	ldr	r1, [pc, #72]	; (800392c <SystemInit+0x5c>)
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <SystemInit+0x5c>)
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <SystemInit+0x60>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <SystemInit+0x5c>)
 80038ee:	4b0f      	ldr	r3, [pc, #60]	; (800392c <SystemInit+0x5c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80038f6:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80038fa:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038fc:	4a0b      	ldr	r2, [pc, #44]	; (800392c <SystemInit+0x5c>)
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <SystemInit+0x5c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003906:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8003908:	4a08      	ldr	r2, [pc, #32]	; (800392c <SystemInit+0x5c>)
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <SystemInit+0x5c>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8003912:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <SystemInit+0x5c>)
 8003916:	2200      	movs	r2, #0
 8003918:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800391a:	f000 f80d 	bl	8003938 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <SystemInit+0x64>)
 8003920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003924:	609a      	str	r2, [r3, #8]
#endif
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	88ffc00c 	.word	0x88ffc00c
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003946:	4a41      	ldr	r2, [pc, #260]	; (8003a4c <SetSysClock+0x114>)
 8003948:	4b40      	ldr	r3, [pc, #256]	; (8003a4c <SetSysClock+0x114>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003952:	4b3e      	ldr	r3, [pc, #248]	; (8003a4c <SetSysClock+0x114>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3301      	adds	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <SetSysClock+0x38>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800396e:	d1f0      	bne.n	8003952 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003970:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <SetSysClock+0x114>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800397c:	2301      	movs	r3, #1
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	e001      	b.n	8003986 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003982:	2300      	movs	r3, #0
 8003984:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d15a      	bne.n	8003a42 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 800398c:	4a30      	ldr	r2, [pc, #192]	; (8003a50 <SetSysClock+0x118>)
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <SetSysClock+0x118>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8003998:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <SetSysClock+0x118>)
 800399a:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <SetSysClock+0x118>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f043 0302 	orr.w	r3, r3, #2
 80039a2:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 80039a4:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <SetSysClock+0x118>)
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <SetSysClock+0x118>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80039b0:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <SetSysClock+0x114>)
 80039b2:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <SetSysClock+0x114>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <SetSysClock+0x11c>)
 80039be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c2:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 80039c4:	bf00      	nop
 80039c6:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <SetSysClock+0x11c>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f9      	bne.n	80039c6 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80039d2:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <SetSysClock+0x114>)
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <SetSysClock+0x114>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <SetSysClock+0x114>)
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <SetSysClock+0x114>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80039e2:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <SetSysClock+0x114>)
 80039e4:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <SetSysClock+0x114>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 80039ea:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <SetSysClock+0x114>)
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <SetSysClock+0x114>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80039f4:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <SetSysClock+0x114>)
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <SetSysClock+0x114>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8003a00:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <SetSysClock+0x114>)
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <SetSysClock+0x114>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003a0e:	bf00      	nop
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <SetSysClock+0x114>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f9      	beq.n	8003a10 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003a1c:	4a0b      	ldr	r2, [pc, #44]	; (8003a4c <SetSysClock+0x114>)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <SetSysClock+0x114>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8003a28:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <SetSysClock+0x114>)
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <SetSysClock+0x114>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f043 0303 	orr.w	r3, r3, #3
 8003a32:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8003a34:	bf00      	nop
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <SetSysClock+0x114>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d1f9      	bne.n	8003a36 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40023c00 	.word	0x40023c00
 8003a54:	40007000 	.word	0x40007000

08003a58 <Delay>:
#include "ili9163.h"
#include <stddef.h>
#include "stm32l1xx.h"

void Delay(uint16_t n)  //funkcia pre spomalenie
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
	uint32_t nl = n*2;
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
	while(nl--);
 8003a68:	bf00      	nop
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	60fa      	str	r2, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1fa      	bne.n	8003a6a <Delay+0x12>
	return;
 8003a74:	bf00      	nop
}
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop

08003a80 <pohybMenu>:

void pohybMenu(uint16_t klavesnica){  //funkcia, ktora sleduje zvolene polozky v menu uzivatelom
 8003a80:	b5b0      	push	{r4, r5, r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	4603      	mov	r3, r0
 8003a88:	80fb      	strh	r3, [r7, #6]
	if (subMenu == 0){  //ochrana aby sa nedalo pohybovat v menu ked uz je otvorene niektore submenu
 8003a8a:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <pohybMenu+0x168>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d154      	bne.n	8003b3c <pohybMenu+0xbc>
		if ((klavesnica >= 1800) && (klavesnica <= 2100)){ //posun v menu smerom nahor sipkou na klavesnici
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003a98:	d307      	bcc.n	8003aaa <pohybMenu+0x2a>
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	f640 0234 	movw	r2, #2100	; 0x834
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d802      	bhi.n	8003aaa <pohybMenu+0x2a>
			posunSipkyHore(); //posuvanie sipky (trojuholniku) na displeji smerom hore
 8003aa4:	f000 f95e 	bl	8003d64 <posunSipkyHore>
 8003aa8:	e048      	b.n	8003b3c <pohybMenu+0xbc>
		}
		else if ((klavesnica >= 2600) && (klavesnica <= 3000)){  //vstup do submenu
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	f640 2227 	movw	r2, #2599	; 0xa27
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d936      	bls.n	8003b22 <pohybMenu+0xa2>
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d831      	bhi.n	8003b22 <pohybMenu+0xa2>
			if ((aktualneA == 0 && defaultA == 12) || aktualneA == 12){
 8003abe:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <pohybMenu+0x16c>)
 8003ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <pohybMenu+0x52>
 8003ac8:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <pohybMenu+0x170>)
 8003aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d004      	beq.n	8003adc <pohybMenu+0x5c>
 8003ad2:	4b46      	ldr	r3, [pc, #280]	; (8003bec <pohybMenu+0x16c>)
 8003ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	d102      	bne.n	8003ae2 <pohybMenu+0x62>
				otvorInfo();
 8003adc:	f7ff f8a2 	bl	8002c24 <otvorInfo>
	if (subMenu == 0){  //ochrana aby sa nedalo pohybovat v menu ked uz je otvorene niektore submenu
		if ((klavesnica >= 1800) && (klavesnica <= 2100)){ //posun v menu smerom nahor sipkou na klavesnici
			posunSipkyHore(); //posuvanie sipky (trojuholniku) na displeji smerom hore
		}
		else if ((klavesnica >= 2600) && (klavesnica <= 3000)){  //vstup do submenu
			if ((aktualneA == 0 && defaultA == 12) || aktualneA == 12){
 8003ae0:	e02b      	b.n	8003b3a <pohybMenu+0xba>
				otvorInfo();
			}
			else if (aktualneA == 32){
 8003ae2:	4b42      	ldr	r3, [pc, #264]	; (8003bec <pohybMenu+0x16c>)
 8003ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d102      	bne.n	8003af2 <pohybMenu+0x72>
				otvorRevers();
 8003aec:	f7ff f988 	bl	8002e00 <otvorRevers>
	if (subMenu == 0){  //ochrana aby sa nedalo pohybovat v menu ked uz je otvorene niektore submenu
		if ((klavesnica >= 1800) && (klavesnica <= 2100)){ //posun v menu smerom nahor sipkou na klavesnici
			posunSipkyHore(); //posuvanie sipky (trojuholniku) na displeji smerom hore
		}
		else if ((klavesnica >= 2600) && (klavesnica <= 3000)){  //vstup do submenu
			if ((aktualneA == 0 && defaultA == 12) || aktualneA == 12){
 8003af0:	e023      	b.n	8003b3a <pohybMenu+0xba>
				otvorInfo();
			}
			else if (aktualneA == 32){
				otvorRevers();
			}
			else if (aktualneA == 52){
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <pohybMenu+0x16c>)
 8003af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af8:	2b34      	cmp	r3, #52	; 0x34
 8003afa:	d102      	bne.n	8003b02 <pohybMenu+0x82>
				otvorExpo();
 8003afc:	f7ff fa6e 	bl	8002fdc <otvorExpo>
	if (subMenu == 0){  //ochrana aby sa nedalo pohybovat v menu ked uz je otvorene niektore submenu
		if ((klavesnica >= 1800) && (klavesnica <= 2100)){ //posun v menu smerom nahor sipkou na klavesnici
			posunSipkyHore(); //posuvanie sipky (trojuholniku) na displeji smerom hore
		}
		else if ((klavesnica >= 2600) && (klavesnica <= 3000)){  //vstup do submenu
			if ((aktualneA == 0 && defaultA == 12) || aktualneA == 12){
 8003b00:	e01b      	b.n	8003b3a <pohybMenu+0xba>
				otvorRevers();
			}
			else if (aktualneA == 52){
				otvorExpo();
			}
			else if (aktualneA == 72){
 8003b02:	4b3a      	ldr	r3, [pc, #232]	; (8003bec <pohybMenu+0x16c>)
 8003b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b08:	2b48      	cmp	r3, #72	; 0x48
 8003b0a:	d102      	bne.n	8003b12 <pohybMenu+0x92>
				otvorMix();
 8003b0c:	f7ff fc76 	bl	80033fc <otvorMix>
	if (subMenu == 0){  //ochrana aby sa nedalo pohybovat v menu ked uz je otvorene niektore submenu
		if ((klavesnica >= 1800) && (klavesnica <= 2100)){ //posun v menu smerom nahor sipkou na klavesnici
			posunSipkyHore(); //posuvanie sipky (trojuholniku) na displeji smerom hore
		}
		else if ((klavesnica >= 2600) && (klavesnica <= 3000)){  //vstup do submenu
			if ((aktualneA == 0 && defaultA == 12) || aktualneA == 12){
 8003b10:	e013      	b.n	8003b3a <pohybMenu+0xba>
				otvorExpo();
			}
			else if (aktualneA == 72){
				otvorMix();
			}
			else if (aktualneA == 92){
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <pohybMenu+0x16c>)
 8003b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b18:	2b5c      	cmp	r3, #92	; 0x5c
 8003b1a:	d10e      	bne.n	8003b3a <pohybMenu+0xba>
				otvorEPA();
 8003b1c:	f7ff fe10 	bl	8003740 <otvorEPA>
	if (subMenu == 0){  //ochrana aby sa nedalo pohybovat v menu ked uz je otvorene niektore submenu
		if ((klavesnica >= 1800) && (klavesnica <= 2100)){ //posun v menu smerom nahor sipkou na klavesnici
			posunSipkyHore(); //posuvanie sipky (trojuholniku) na displeji smerom hore
		}
		else if ((klavesnica >= 2600) && (klavesnica <= 3000)){  //vstup do submenu
			if ((aktualneA == 0 && defaultA == 12) || aktualneA == 12){
 8003b20:	e00b      	b.n	8003b3a <pohybMenu+0xba>
			}
			else if (aktualneA == 92){
				otvorEPA();
			}
		}
		else if ((klavesnica >= 3450) && (klavesnica <= 3600)){
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	f640 5279 	movw	r2, #3449	; 0xd79
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d907      	bls.n	8003b3c <pohybMenu+0xbc>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003b32:	d803      	bhi.n	8003b3c <pohybMenu+0xbc>
			posunSipkyDole(); //posuvanie sipky (trojuholniku) na displeji smerom dole
 8003b34:	f000 f86a 	bl	8003c0c <posunSipkyDole>
 8003b38:	e000      	b.n	8003b3c <pohybMenu+0xbc>
	if (subMenu == 0){  //ochrana aby sa nedalo pohybovat v menu ked uz je otvorene niektore submenu
		if ((klavesnica >= 1800) && (klavesnica <= 2100)){ //posun v menu smerom nahor sipkou na klavesnici
			posunSipkyHore(); //posuvanie sipky (trojuholniku) na displeji smerom hore
		}
		else if ((klavesnica >= 2600) && (klavesnica <= 3000)){  //vstup do submenu
			if ((aktualneA == 0 && defaultA == 12) || aktualneA == 12){
 8003b3a:	bf00      	nop
		else if ((klavesnica >= 3450) && (klavesnica <= 3600)){
			posunSipkyDole(); //posuvanie sipky (trojuholniku) na displeji smerom dole
		}
	}
//	else if (subMenu == 1){
		if ((klavesnica >= 3200) && (klavesnica <= 3440)){  //opustenie submenu a navrat do hlavneho menu (klavesa minus)
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8003b42:	d34d      	bcc.n	8003be0 <pohybMenu+0x160>
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8003b4a:	d849      	bhi.n	8003be0 <pohybMenu+0x160>
			lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8003b4c:	22ff      	movs	r2, #255	; 0xff
 8003b4e:	21ff      	movs	r1, #255	; 0xff
 8003b50:	20ff      	movs	r0, #255	; 0xff
 8003b52:	f7fe fd0d 	bl	8002570 <decodeRgbValue>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fb2d 	bl	80021b8 <lcdClearDisplay>
			lcdPutS("Info", 20, 17, 0x0000, 0xFFFF); 		//aktualneA 12, aktualneB 27
 8003b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2300      	movs	r3, #0
 8003b66:	2211      	movs	r2, #17
 8003b68:	2114      	movs	r1, #20
 8003b6a:	4822      	ldr	r0, [pc, #136]	; (8003bf4 <pohybMenu+0x174>)
 8003b6c:	f7fe fd1c 	bl	80025a8 <lcdPutS>
			lcdPutS("Revers", 20, 37, 0x0000, 0xFFFF); 	//aktualneA 32, aktualneB 47
 8003b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	2225      	movs	r2, #37	; 0x25
 8003b7a:	2114      	movs	r1, #20
 8003b7c:	481e      	ldr	r0, [pc, #120]	; (8003bf8 <pohybMenu+0x178>)
 8003b7e:	f7fe fd13 	bl	80025a8 <lcdPutS>
			lcdPutS("Expo", 20, 57, 0x0000, 0xFFFF); 		//aktualneA 52, aktualneB 67
 8003b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2239      	movs	r2, #57	; 0x39
 8003b8c:	2114      	movs	r1, #20
 8003b8e:	481b      	ldr	r0, [pc, #108]	; (8003bfc <pohybMenu+0x17c>)
 8003b90:	f7fe fd0a 	bl	80025a8 <lcdPutS>
			lcdPutS("Mix", 20, 77, 0x0000, 0xFFFF); 		//aktualneA 72, aktualneB 87
 8003b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	224d      	movs	r2, #77	; 0x4d
 8003b9e:	2114      	movs	r1, #20
 8003ba0:	4817      	ldr	r0, [pc, #92]	; (8003c00 <pohybMenu+0x180>)
 8003ba2:	f7fe fd01 	bl	80025a8 <lcdPutS>
			lcdPutS("EPA", 20, 97, 0x0000, 0xFFFF); 		//aktualneA 92, aktualneB 107
 8003ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	2261      	movs	r2, #97	; 0x61
 8003bb0:	2114      	movs	r1, #20
 8003bb2:	4814      	ldr	r0, [pc, #80]	; (8003c04 <pohybMenu+0x184>)
 8003bb4:	f7fe fcf8 	bl	80025a8 <lcdPutS>
			lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <pohybMenu+0x16c>)
 8003bba:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <pohybMenu+0x188>)
 8003bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7fe fcd1 	bl	8002570 <decodeRgbValue>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	462a      	mov	r2, r5
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	2005      	movs	r0, #5
 8003bd6:	f7fe fc13 	bl	8002400 <lcdPlnyTrojuholnik>
			subMenu = 0;
 8003bda:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <pohybMenu+0x168>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
		 }
	//}
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bdb0      	pop	{r4, r5, r7, pc}
 8003be8:	200000ec 	.word	0x200000ec
 8003bec:	200000fc 	.word	0x200000fc
 8003bf0:	200000fe 	.word	0x200000fe
 8003bf4:	080054d0 	.word	0x080054d0
 8003bf8:	080054d8 	.word	0x080054d8
 8003bfc:	080054e0 	.word	0x080054e0
 8003c00:	080054e8 	.word	0x080054e8
 8003c04:	080054ec 	.word	0x080054ec
 8003c08:	200000e6 	.word	0x200000e6

08003c0c <posunSipkyDole>:

void posunSipkyDole(){  //posuvanie trojuholniku po displeju smerom dole, aktivne len pri stlaceni sipky dole na klavesnici
 8003c0c:	b5b0      	push	{r4, r5, r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	if (aktualneA == 0){ //ak je sipka v povodnej polohe
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <posunSipkyDole+0x148>)
 8003c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d134      	bne.n	8003c84 <posunSipkyDole+0x78>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31)); //funkcia, ktora vymaze trojuholnik
 8003c1a:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <posunSipkyDole+0x14c>)
 8003c1c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003c20:	4b4e      	ldr	r3, [pc, #312]	; (8003d5c <posunSipkyDole+0x150>)
 8003c22:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c26:	221f      	movs	r2, #31
 8003c28:	211f      	movs	r1, #31
 8003c2a:	201f      	movs	r0, #31
 8003c2c:	f7fe fca0 	bl	8002570 <decodeRgbValue>
 8003c30:	4603      	mov	r3, r0
 8003c32:	462a      	mov	r2, r5
 8003c34:	4621      	mov	r1, r4
 8003c36:	2005      	movs	r0, #5
 8003c38:	f7fe fbe2 	bl	8002400 <lcdPlnyTrojuholnik>
		aktualneA = defaultA + 20;
 8003c3c:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <posunSipkyDole+0x14c>)
 8003c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3314      	adds	r3, #20
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	b21a      	sxth	r2, r3
 8003c4a:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <posunSipkyDole+0x148>)
 8003c4c:	801a      	strh	r2, [r3, #0]
		aktualneB = defaultB + 20;
 8003c4e:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <posunSipkyDole+0x150>)
 8003c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3314      	adds	r3, #20
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	b21a      	sxth	r2, r3
 8003c5c:	4b40      	ldr	r3, [pc, #256]	; (8003d60 <posunSipkyDole+0x154>)
 8003c5e:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));  //nakresli sa rovnoramenny trojuholnik na novu poziciu
 8003c60:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <posunSipkyDole+0x148>)
 8003c62:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003c66:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <posunSipkyDole+0x154>)
 8003c68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2100      	movs	r1, #0
 8003c70:	2000      	movs	r0, #0
 8003c72:	f7fe fc7d 	bl	8002570 <decodeRgbValue>
 8003c76:	4603      	mov	r3, r0
 8003c78:	462a      	mov	r2, r5
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	2005      	movs	r0, #5
 8003c7e:	f7fe fbbf 	bl	8002400 <lcdPlnyTrojuholnik>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));  //funkcia, ktora vymaze trojuholnik
		aktualneA = aktualneA + 20;
		aktualneB = aktualneB + 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));  //nakresli sa rovnoramenny trojuholnik na novu poziciu
	}
}
 8003c82:	e065      	b.n	8003d50 <posunSipkyDole+0x144>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31)); //funkcia, ktora vymaze trojuholnik
		aktualneA = defaultA + 20;
		aktualneB = defaultB + 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));  //nakresli sa rovnoramenny trojuholnik na novu poziciu
	}
	else if (aktualneB >= 100){  //ak je trojuholnik na konci displeja tak sa vykresli hore k prvej polozke v menu
 8003c84:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <posunSipkyDole+0x154>)
 8003c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c8a:	2b63      	cmp	r3, #99	; 0x63
 8003c8c:	dd2c      	ble.n	8003ce8 <posunSipkyDole+0xdc>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));  //funkcia, ktora vymaze trojuholnik
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <posunSipkyDole+0x148>)
 8003c90:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <posunSipkyDole+0x154>)
 8003c96:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c9a:	221f      	movs	r2, #31
 8003c9c:	211f      	movs	r1, #31
 8003c9e:	201f      	movs	r0, #31
 8003ca0:	f7fe fc66 	bl	8002570 <decodeRgbValue>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	462a      	mov	r2, r5
 8003ca8:	4621      	mov	r1, r4
 8003caa:	2005      	movs	r0, #5
 8003cac:	f7fe fba8 	bl	8002400 <lcdPlnyTrojuholnik>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0)); //nakresli sa rovnoramenny trojuholnik na novu poziciu
 8003cb0:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <posunSipkyDole+0x14c>)
 8003cb2:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <posunSipkyDole+0x150>)
 8003cb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	f7fe fc55 	bl	8002570 <decodeRgbValue>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	462a      	mov	r2, r5
 8003cca:	4621      	mov	r1, r4
 8003ccc:	2005      	movs	r0, #5
 8003cce:	f7fe fb97 	bl	8002400 <lcdPlnyTrojuholnik>
		aktualneA = defaultA;
 8003cd2:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <posunSipkyDole+0x14c>)
 8003cd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003cd8:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <posunSipkyDole+0x148>)
 8003cda:	801a      	strh	r2, [r3, #0]
		aktualneB = defaultB;
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <posunSipkyDole+0x150>)
 8003cde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <posunSipkyDole+0x154>)
 8003ce4:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));  //funkcia, ktora vymaze trojuholnik
		aktualneA = aktualneA + 20;
		aktualneB = aktualneB + 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));  //nakresli sa rovnoramenny trojuholnik na novu poziciu
	}
}
 8003ce6:	e033      	b.n	8003d50 <posunSipkyDole+0x144>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0)); //nakresli sa rovnoramenny trojuholnik na novu poziciu
		aktualneA = defaultA;
		aktualneB = defaultB;
	}
	else{
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));  //funkcia, ktora vymaze trojuholnik
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <posunSipkyDole+0x148>)
 8003cea:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <posunSipkyDole+0x154>)
 8003cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cf4:	221f      	movs	r2, #31
 8003cf6:	211f      	movs	r1, #31
 8003cf8:	201f      	movs	r0, #31
 8003cfa:	f7fe fc39 	bl	8002570 <decodeRgbValue>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	462a      	mov	r2, r5
 8003d02:	4621      	mov	r1, r4
 8003d04:	2005      	movs	r0, #5
 8003d06:	f7fe fb7b 	bl	8002400 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA + 20;
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <posunSipkyDole+0x148>)
 8003d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3314      	adds	r3, #20
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	b21a      	sxth	r2, r3
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <posunSipkyDole+0x148>)
 8003d1a:	801a      	strh	r2, [r3, #0]
		aktualneB = aktualneB + 20;
 8003d1c:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <posunSipkyDole+0x154>)
 8003d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3314      	adds	r3, #20
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	b21a      	sxth	r2, r3
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <posunSipkyDole+0x154>)
 8003d2c:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));  //nakresli sa rovnoramenny trojuholnik na novu poziciu
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <posunSipkyDole+0x148>)
 8003d30:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <posunSipkyDole+0x154>)
 8003d36:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7fe fc16 	bl	8002570 <decodeRgbValue>
 8003d44:	4603      	mov	r3, r0
 8003d46:	462a      	mov	r2, r5
 8003d48:	4621      	mov	r1, r4
 8003d4a:	2005      	movs	r0, #5
 8003d4c:	f7fe fb58 	bl	8002400 <lcdPlnyTrojuholnik>
	}
}
 8003d50:	bf00      	nop
 8003d52:	bdb0      	pop	{r4, r5, r7, pc}
 8003d54:	200000fc 	.word	0x200000fc
 8003d58:	200000fe 	.word	0x200000fe
 8003d5c:	200000e2 	.word	0x200000e2
 8003d60:	200000e6 	.word	0x200000e6

08003d64 <posunSipkyHore>:

void posunSipkyHore(){   //posuvanie trojuholniku po displeju smerom hore, aktivne len pri stlaceni sipky hore na klavesnici
 8003d64:	b5b0      	push	{r4, r5, r7, lr}
 8003d66:	af00      	add	r7, sp, #0
	if (aktualneA == 0){
 8003d68:	4b48      	ldr	r3, [pc, #288]	; (8003e8c <posunSipkyHore+0x128>)
 8003d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d128      	bne.n	8003dc4 <posunSipkyHore+0x60>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31)); //funkcia, ktora vymaze trojuholnik
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <posunSipkyHore+0x12c>)
 8003d74:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003d78:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <posunSipkyHore+0x130>)
 8003d7a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d7e:	221f      	movs	r2, #31
 8003d80:	211f      	movs	r1, #31
 8003d82:	201f      	movs	r0, #31
 8003d84:	f7fe fbf4 	bl	8002570 <decodeRgbValue>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	462a      	mov	r2, r5
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	2005      	movs	r0, #5
 8003d90:	f7fe fb36 	bl	8002400 <lcdPlnyTrojuholnik>
		aktualneA = 92;
 8003d94:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <posunSipkyHore+0x128>)
 8003d96:	225c      	movs	r2, #92	; 0x5c
 8003d98:	801a      	strh	r2, [r3, #0]
		aktualneB = 107;
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <posunSipkyHore+0x134>)
 8003d9c:	226b      	movs	r2, #107	; 0x6b
 8003d9e:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));   //nakresli sa rovnoramenny trojuholnik na novu poziciu
 8003da0:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <posunSipkyHore+0x128>)
 8003da2:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003da6:	4b3c      	ldr	r3, [pc, #240]	; (8003e98 <posunSipkyHore+0x134>)
 8003da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dac:	2200      	movs	r2, #0
 8003dae:	2100      	movs	r1, #0
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7fe fbdd 	bl	8002570 <decodeRgbValue>
 8003db6:	4603      	mov	r3, r0
 8003db8:	462a      	mov	r2, r5
 8003dba:	4621      	mov	r1, r4
 8003dbc:	2005      	movs	r0, #5
 8003dbe:	f7fe fb1f 	bl	8002400 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
		aktualneB = aktualneB - 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}

}
 8003dc2:	e061      	b.n	8003e88 <posunSipkyHore+0x124>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31)); //funkcia, ktora vymaze trojuholnik
		aktualneA = 92;
		aktualneB = 107;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));   //nakresli sa rovnoramenny trojuholnik na novu poziciu
	}
	else if (aktualneB <= 30){ //ak sa uzivatel pohne sipkou smerom nahor, tak sa sipka nakresli k poslednej polozke v menu
 8003dc4:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <posunSipkyHore+0x134>)
 8003dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dca:	2b1e      	cmp	r3, #30
 8003dcc:	dc28      	bgt.n	8003e20 <posunSipkyHore+0xbc>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));  //funkcia, ktora vymaze trojuholnik
 8003dce:	4b2f      	ldr	r3, [pc, #188]	; (8003e8c <posunSipkyHore+0x128>)
 8003dd0:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <posunSipkyHore+0x134>)
 8003dd6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dda:	221f      	movs	r2, #31
 8003ddc:	211f      	movs	r1, #31
 8003dde:	201f      	movs	r0, #31
 8003de0:	f7fe fbc6 	bl	8002570 <decodeRgbValue>
 8003de4:	4603      	mov	r3, r0
 8003de6:	462a      	mov	r2, r5
 8003de8:	4621      	mov	r1, r4
 8003dea:	2005      	movs	r0, #5
 8003dec:	f7fe fb08 	bl	8002400 <lcdPlnyTrojuholnik>
		aktualneA = 92;
 8003df0:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <posunSipkyHore+0x128>)
 8003df2:	225c      	movs	r2, #92	; 0x5c
 8003df4:	801a      	strh	r2, [r3, #0]
		aktualneB = 107;
 8003df6:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <posunSipkyHore+0x134>)
 8003df8:	226b      	movs	r2, #107	; 0x6b
 8003dfa:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));   //nakresli sa rovnoramenny trojuholnik na novu poziciu
 8003dfc:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <posunSipkyHore+0x128>)
 8003dfe:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003e02:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <posunSipkyHore+0x134>)
 8003e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7fe fbaf 	bl	8002570 <decodeRgbValue>
 8003e12:	4603      	mov	r3, r0
 8003e14:	462a      	mov	r2, r5
 8003e16:	4621      	mov	r1, r4
 8003e18:	2005      	movs	r0, #5
 8003e1a:	f7fe faf1 	bl	8002400 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
		aktualneB = aktualneB - 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}

}
 8003e1e:	e033      	b.n	8003e88 <posunSipkyHore+0x124>
		aktualneA = 92;
		aktualneB = 107;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));   //nakresli sa rovnoramenny trojuholnik na novu poziciu
	}
	else{
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <posunSipkyHore+0x128>)
 8003e22:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003e26:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <posunSipkyHore+0x134>)
 8003e28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e2c:	221f      	movs	r2, #31
 8003e2e:	211f      	movs	r1, #31
 8003e30:	201f      	movs	r0, #31
 8003e32:	f7fe fb9d 	bl	8002570 <decodeRgbValue>
 8003e36:	4603      	mov	r3, r0
 8003e38:	462a      	mov	r2, r5
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	2005      	movs	r0, #5
 8003e3e:	f7fe fadf 	bl	8002400 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <posunSipkyHore+0x128>)
 8003e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b14      	subs	r3, #20
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	b21a      	sxth	r2, r3
 8003e50:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <posunSipkyHore+0x128>)
 8003e52:	801a      	strh	r2, [r3, #0]
		aktualneB = aktualneB - 20;
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <posunSipkyHore+0x134>)
 8003e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b14      	subs	r3, #20
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	b21a      	sxth	r2, r3
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <posunSipkyHore+0x134>)
 8003e64:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <posunSipkyHore+0x128>)
 8003e68:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <posunSipkyHore+0x134>)
 8003e6e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	2000      	movs	r0, #0
 8003e78:	f7fe fb7a 	bl	8002570 <decodeRgbValue>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	462a      	mov	r2, r5
 8003e80:	4621      	mov	r1, r4
 8003e82:	2005      	movs	r0, #5
 8003e84:	f7fe fabc 	bl	8002400 <lcdPlnyTrojuholnik>
	}

}
 8003e88:	bf00      	nop
 8003e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e8c:	200000fc 	.word	0x200000fc
 8003e90:	200000fe 	.word	0x200000fe
 8003e94:	200000e2 	.word	0x200000e2
 8003e98:	200000e6 	.word	0x200000e6

08003e9c <initMenu>:
void initMenu(){  //zobrazi sa hlavne menu a vypisu sa polozky
 8003e9c:	b5b0      	push	{r4, r5, r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af02      	add	r7, sp, #8
	defaultA = 12;
 8003ea2:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <initMenu+0xc0>)
 8003ea4:	220c      	movs	r2, #12
 8003ea6:	801a      	strh	r2, [r3, #0]
	defaultB = 27;
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	; (8003f60 <initMenu+0xc4>)
 8003eaa:	221b      	movs	r2, #27
 8003eac:	801a      	strh	r2, [r3, #0]
	aktualneA = 0;
 8003eae:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <initMenu+0xc8>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	801a      	strh	r2, [r3, #0]
	aktualneB = 0;
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	; (8003f68 <initMenu+0xcc>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	801a      	strh	r2, [r3, #0]
	subMenu = 0;
 8003eba:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <initMenu+0xd0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
	lcdInitialise(LCD_ORIENTATION2); //menim orientaciu displeja
 8003ec0:	20a0      	movs	r0, #160	; 0xa0
 8003ec2:	f7fe f89d 	bl	8002000 <lcdInitialise>
	lcdClearDisplay(decodeRgbValue(255, 255, 255));  //mazem obrazovku a nastavim biele pozadie
 8003ec6:	22ff      	movs	r2, #255	; 0xff
 8003ec8:	21ff      	movs	r1, #255	; 0xff
 8003eca:	20ff      	movs	r0, #255	; 0xff
 8003ecc:	f7fe fb50 	bl	8002570 <decodeRgbValue>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe f970 	bl	80021b8 <lcdClearDisplay>
	  lcdPutS("Info", 20, 17, 0x0000, 0xFFFF); 		//aktualneA 12, aktualneB 27
 8003ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2211      	movs	r2, #17
 8003ee2:	2114      	movs	r1, #20
 8003ee4:	4822      	ldr	r0, [pc, #136]	; (8003f70 <initMenu+0xd4>)
 8003ee6:	f7fe fb5f 	bl	80025a8 <lcdPutS>
	  lcdPutS("Revers", 20, 37, 0x0000, 0xFFFF); 	//aktualneA 32, aktualneB 47
 8003eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2225      	movs	r2, #37	; 0x25
 8003ef4:	2114      	movs	r1, #20
 8003ef6:	481f      	ldr	r0, [pc, #124]	; (8003f74 <initMenu+0xd8>)
 8003ef8:	f7fe fb56 	bl	80025a8 <lcdPutS>
	  lcdPutS("Expo", 20, 57, 0x0000, 0xFFFF); 		//aktualneA 52, aktualneB 67
 8003efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	2239      	movs	r2, #57	; 0x39
 8003f06:	2114      	movs	r1, #20
 8003f08:	481b      	ldr	r0, [pc, #108]	; (8003f78 <initMenu+0xdc>)
 8003f0a:	f7fe fb4d 	bl	80025a8 <lcdPutS>
	  lcdPutS("Mix", 20, 77, 0x0000, 0xFFFF); 		//aktualneA 72, aktualneB 87
 8003f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2300      	movs	r3, #0
 8003f16:	224d      	movs	r2, #77	; 0x4d
 8003f18:	2114      	movs	r1, #20
 8003f1a:	4818      	ldr	r0, [pc, #96]	; (8003f7c <initMenu+0xe0>)
 8003f1c:	f7fe fb44 	bl	80025a8 <lcdPutS>
	  lcdPutS("EPA", 20, 97, 0x0000, 0xFFFF); 		//aktualneA 92, aktualneB 107
 8003f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	2300      	movs	r3, #0
 8003f28:	2261      	movs	r2, #97	; 0x61
 8003f2a:	2114      	movs	r1, #20
 8003f2c:	4814      	ldr	r0, [pc, #80]	; (8003f80 <initMenu+0xe4>)
 8003f2e:	f7fe fb3b 	bl	80025a8 <lcdPutS>
	lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0)); //vykreslim sipku v prvej polozke
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <initMenu+0xc0>)
 8003f34:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <initMenu+0xc4>)
 8003f3a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2100      	movs	r1, #0
 8003f42:	2000      	movs	r0, #0
 8003f44:	f7fe fb14 	bl	8002570 <decodeRgbValue>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	462a      	mov	r2, r5
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	2005      	movs	r0, #5
 8003f50:	f7fe fa56 	bl	8002400 <lcdPlnyTrojuholnik>
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bdb0      	pop	{r4, r5, r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200000fe 	.word	0x200000fe
 8003f60:	200000e2 	.word	0x200000e2
 8003f64:	200000fc 	.word	0x200000fc
 8003f68:	200000e6 	.word	0x200000e6
 8003f6c:	200000ec 	.word	0x200000ec
 8003f70:	080054d0 	.word	0x080054d0
 8003f74:	080054d8 	.word	0x080054d8
 8003f78:	080054e0 	.word	0x080054e0
 8003f7c:	080054e8 	.word	0x080054e8
 8003f80:	080054ec 	.word	0x080054ec

08003f84 <initGPIO>:

void initGPIO(){			// inicalizujem GPIO piny
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0

  	GPIO_InitTypeDef GPIO_InitStructure;

  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f7fd fec9 	bl	8001d24 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8003f92:	2101      	movs	r1, #1
 8003f94:	2002      	movs	r0, #2
 8003f96:	f7fd fec5 	bl	8001d24 <RCC_AHBPeriphClockCmd>
  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	2004      	movs	r0, #4
 8003f9e:	f7fd fec1 	bl	8001d24 <RCC_AHBPeriphClockCmd>
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	603b      	str	r3, [r7, #0]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	713b      	strb	r3, [r7, #4]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8003faa:	2300      	movs	r3, #0
 8003fac:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003fae:	463b      	mov	r3, r7
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4816      	ldr	r0, [pc, #88]	; (800400c <initGPIO+0x88>)
 8003fb4:	f7fd fdc8 	bl	8001b48 <GPIO_Init>
  		/////
  	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003fb8:	463b      	mov	r3, r7
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4813      	ldr	r0, [pc, #76]	; (800400c <initGPIO+0x88>)
 8003fbe:	f7fd fdc3 	bl	8001b48 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;// PA0, PA1, PA2
 8003fc2:	2313      	movs	r3, #19
 8003fc4:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;//The pins are configured in analog mode
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;//We don't need any pull up or pull down
 8003fca:	2300      	movs	r3, #0
 8003fcc:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);//Initialize GPIOC pins with the configuration
 8003fce:	463b      	mov	r3, r7
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	480f      	ldr	r0, [pc, #60]	; (8004010 <initGPIO+0x8c>)
 8003fd4:	f7fd fdb8 	bl	8001b48 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;//PB1
 8003fd8:	2301      	movs	r3, #1
 8003fda:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;//The pins are configured in analog mode
 8003fdc:	2303      	movs	r3, #3
 8003fde:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;//We don't need any pull up or pull down
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);//Initialize GPIOA pins with the configuration
 8003fe4:	463b      	mov	r3, r7
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	480a      	ldr	r0, [pc, #40]	; (8004014 <initGPIO+0x90>)
 8003fea:	f7fd fdad 	bl	8001b48 <GPIO_Init>

  	RCC_HSICmd(ENABLE);
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f7fd fe88 	bl	8001d04 <RCC_HSICmd>
  	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8003ff4:	bf00      	nop
 8003ff6:	2021      	movs	r0, #33	; 0x21
 8003ff8:	f7fd fed0 	bl	8001d9c <RCC_GetFlagStatus>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f9      	beq.n	8003ff6 <initGPIO+0x72>

}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40020800 	.word	0x40020800
 8004010:	40020000 	.word	0x40020000
 8004014:	40020400 	.word	0x40020400

08004018 <dma_init>:

void dma_init(){  //inicializujem DMA1
 8004018:	b580      	push	{r7, lr}
 800401a:	b08c      	sub	sp, #48	; 0x30
 800401c:	af00      	add	r7, sp, #0
	DMA_InitTypeDef       DMA_InitStruct;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800401e:	2101      	movs	r1, #1
 8004020:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004024:	f7fd fe7e 	bl	8001d24 <RCC_AHBPeriphClockCmd>
	/* DMA1 Stream0 channel0 configuration **************************************/
	DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;//ADC1's data register
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <dma_init+0x58>)
 800402a:	607b      	str	r3, [r7, #4]
	DMA_InitStruct.DMA_MemoryBaseAddr = (uint32_t)&ADC1ConvertedValue[0];
 800402c:	4b11      	ldr	r3, [pc, #68]	; (8004074 <dma_init+0x5c>)
 800402e:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralSRC;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.DMA_BufferSize = 5;
 8004034:	2305      	movs	r3, #5
 8004036:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;//Reads 16 bit values
 8004040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004044:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;//Stores 16 bit values
 8004046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404a:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
 800404c:	2320      	movs	r3, #32
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8004050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init(DMA1_Channel1, &DMA_InitStruct);
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4807      	ldr	r0, [pc, #28]	; (8004078 <dma_init+0x60>)
 800405c:	f7fd fcba 	bl	80019d4 <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE); //Enable the DMA1 - Channel1
 8004060:	2101      	movs	r1, #1
 8004062:	4805      	ldr	r0, [pc, #20]	; (8004078 <dma_init+0x60>)
 8004064:	f7fd fcf4 	bl	8001a50 <DMA_Cmd>
}
 8004068:	bf00      	nop
 800406a:	3730      	adds	r7, #48	; 0x30
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40012458 	.word	0x40012458
 8004074:	200000f0 	.word	0x200000f0
 8004078:	40026008 	.word	0x40026008

0800407c <adc_init>:

void adc_init(void)			// inicalizujem ADC
  {
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  	//RCC_HSICmd(ENABLE);
  	ADC_InitTypeDef ADC_InitStructure;
  	//while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
  	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8004082:	2101      	movs	r1, #1
 8004084:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004088:	f7fd fe6a 	bl	8001d60 <RCC_APB2PeriphClockCmd>
  	ADC_StructInit(&ADC_InitStructure);
 800408c:	463b      	mov	r3, r7
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fa74 	bl	800157c <ADC_StructInit>
  	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8004094:	2300      	movs	r3, #0
 8004096:	603b      	str	r3, [r7, #0]
  	ADC_InitStructure.ADC_ScanConvMode = ENABLE;//The scan is configured in multiple channels
 8004098:	2301      	movs	r3, #1
 800409a:	713b      	strb	r3, [r7, #4]
  	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 800409c:	2301      	movs	r3, #1
 800409e:	717b      	strb	r3, [r7, #5]
  	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  	ADC_InitStructure.ADC_NbrOfConversion = 5;
 80040a8:	2305      	movs	r3, #5
 80040aa:	753b      	strb	r3, [r7, #20]
  	ADC_InitStructure.ADC_ExternalTrigConv = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  	ADC_Init(ADC1, &ADC_InitStructure);
 80040b0:	463b      	mov	r3, r7
 80040b2:	4619      	mov	r1, r3
 80040b4:	4820      	ldr	r0, [pc, #128]	; (8004138 <adc_init+0xbc>)
 80040b6:	f7fd fa0d 	bl	80014d4 <ADC_Init>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_9Cycles);//PC0
 80040ba:	2301      	movs	r3, #1
 80040bc:	2201      	movs	r2, #1
 80040be:	2100      	movs	r1, #0
 80040c0:	481d      	ldr	r0, [pc, #116]	; (8004138 <adc_init+0xbc>)
 80040c2:	f7fd fa97 	bl	80015f4 <ADC_RegularChannelConfig>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_9Cycles);
 80040c6:	2301      	movs	r3, #1
 80040c8:	2202      	movs	r2, #2
 80040ca:	2101      	movs	r1, #1
 80040cc:	481a      	ldr	r0, [pc, #104]	; (8004138 <adc_init+0xbc>)
 80040ce:	f7fd fa91 	bl	80015f4 <ADC_RegularChannelConfig>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 3, ADC_SampleTime_9Cycles);
 80040d2:	2301      	movs	r3, #1
 80040d4:	2203      	movs	r2, #3
 80040d6:	2104      	movs	r1, #4
 80040d8:	4817      	ldr	r0, [pc, #92]	; (8004138 <adc_init+0xbc>)
 80040da:	f7fd fa8b 	bl	80015f4 <ADC_RegularChannelConfig>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 4, ADC_SampleTime_9Cycles);
 80040de:	2301      	movs	r3, #1
 80040e0:	2204      	movs	r2, #4
 80040e2:	2108      	movs	r1, #8
 80040e4:	4814      	ldr	r0, [pc, #80]	; (8004138 <adc_init+0xbc>)
 80040e6:	f7fd fa85 	bl	80015f4 <ADC_RegularChannelConfig>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 5, ADC_SampleTime_9Cycles);
 80040ea:	2301      	movs	r3, #1
 80040ec:	2205      	movs	r2, #5
 80040ee:	210b      	movs	r1, #11
 80040f0:	4811      	ldr	r0, [pc, #68]	; (8004138 <adc_init+0xbc>)
 80040f2:	f7fd fa7f 	bl	80015f4 <ADC_RegularChannelConfig>
  	ADC_Cmd(ADC1, ENABLE);
 80040f6:	2101      	movs	r1, #1
 80040f8:	480f      	ldr	r0, [pc, #60]	; (8004138 <adc_init+0xbc>)
 80040fa:	f7fd fa5f 	bl	80015bc <ADC_Cmd>
  	ADC_ITConfig(ADC1,ADC_IT_EOC,ENABLE);
 80040fe:	2201      	movs	r2, #1
 8004100:	f240 2105 	movw	r1, #517	; 0x205
 8004104:	480c      	ldr	r0, [pc, #48]	; (8004138 <adc_init+0xbc>)
 8004106:	f7fd fc23 	bl	8001950 <ADC_ITConfig>
  	/* Enable DMA request after last transfer (Single-ADC mode) */
  	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 800410a:	2101      	movs	r1, #1
 800410c:	480a      	ldr	r0, [pc, #40]	; (8004138 <adc_init+0xbc>)
 800410e:	f7fd fc03 	bl	8001918 <ADC_DMARequestAfterLastTransferCmd>
  	/* Enable ADC1 DMA */
	ADC_DMACmd(ADC1, ENABLE);
 8004112:	2101      	movs	r1, #1
 8004114:	4808      	ldr	r0, [pc, #32]	; (8004138 <adc_init+0xbc>)
 8004116:	f7fd fbe3 	bl	80018e0 <ADC_DMACmd>
  	/*ADC_ITConfig(ADC1,ADC_IT_OVR,ENABLE);
	ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC);
	ADC_GetFlagStatus(ADC1, ADC_FLAG_OVR);*/
  	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
 800411a:	bf00      	nop
 800411c:	2140      	movs	r1, #64	; 0x40
 800411e:	4806      	ldr	r0, [pc, #24]	; (8004138 <adc_init+0xbc>)
 8004120:	f7fd fc3e 	bl	80019a0 <ADC_GetFlagStatus>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f8      	beq.n	800411c <adc_init+0xa0>
  	ADC_SoftwareStartConv(ADC1);
 800412a:	4803      	ldr	r0, [pc, #12]	; (8004138 <adc_init+0xbc>)
 800412c:	f7fd fbc8 	bl	80018c0 <ADC_SoftwareStartConv>
  }
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40012400 	.word	0x40012400

0800413c <nvic_init>:

void nvic_init(){			// inicializacia prerusenia pre ADC
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
	NVIC_InitTypeDef NVIC_InitStructure;
	//NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8004142:	230b      	movs	r3, #11
 8004144:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800414e:	2301      	movs	r3, #1
 8004150:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd f95d 	bl	8001414 <NVIC_Init>
    DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 800415a:	2201      	movs	r2, #1
 800415c:	2102      	movs	r1, #2
 800415e:	4807      	ldr	r0, [pc, #28]	; (800417c <nvic_init+0x40>)
 8004160:	f7fd fc92 	bl	8001a88 <DMA_ITConfig>
    DMA_Cmd(DMA1_Channel1, ENABLE);
 8004164:	2101      	movs	r1, #1
 8004166:	4805      	ldr	r0, [pc, #20]	; (800417c <nvic_init+0x40>)
 8004168:	f7fd fc72 	bl	8001a50 <DMA_Cmd>
    ADC_DMACmd(ADC1, ENABLE);
 800416c:	2101      	movs	r1, #1
 800416e:	4804      	ldr	r0, [pc, #16]	; (8004180 <nvic_init+0x44>)
 8004170:	f7fd fbb6 	bl	80018e0 <ADC_DMACmd>

}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40026008 	.word	0x40026008
 8004180:	40012400 	.word	0x40012400

08004184 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004190:	2301      	movs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004194:	e004      	b.n	80041a0 <ts_itoa+0x1c>
		div *= base;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d2f3      	bcs.n	8004196 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 80041ae:	e029      	b.n	8004204 <ts_itoa+0x80>
	{
		int num = d/div;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	613b      	str	r3, [r7, #16]
		d = d%div;
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	fbb3 f1f2 	udiv	r1, r3, r2
 80041c2:	fb02 f201 	mul.w	r2, r2, r1
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	60bb      	str	r3, [r7, #8]
		div /= base;
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80041d2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b09      	cmp	r3, #9
 80041d8:	dd0a      	ble.n	80041f0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	6011      	str	r1, [r2, #0]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	3237      	adds	r2, #55	; 0x37
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e009      	b.n	8004204 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	1c59      	adds	r1, r3, #1
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	3230      	adds	r2, #48	; 0x30
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1d2      	bne.n	80041b0 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004224:	e07d      	b.n	8004322 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b25      	cmp	r3, #37	; 0x25
 800422c:	d171      	bne.n	8004312 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3301      	adds	r3, #1
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b64      	cmp	r3, #100	; 0x64
 800423a:	d01e      	beq.n	800427a <ts_formatstring+0x66>
 800423c:	2b64      	cmp	r3, #100	; 0x64
 800423e:	dc06      	bgt.n	800424e <ts_formatstring+0x3a>
 8004240:	2b58      	cmp	r3, #88	; 0x58
 8004242:	d050      	beq.n	80042e6 <ts_formatstring+0xd2>
 8004244:	2b63      	cmp	r3, #99	; 0x63
 8004246:	d00e      	beq.n	8004266 <ts_formatstring+0x52>
 8004248:	2b25      	cmp	r3, #37	; 0x25
 800424a:	d058      	beq.n	80042fe <ts_formatstring+0xea>
 800424c:	e05d      	b.n	800430a <ts_formatstring+0xf6>
 800424e:	2b73      	cmp	r3, #115	; 0x73
 8004250:	d02b      	beq.n	80042aa <ts_formatstring+0x96>
 8004252:	2b73      	cmp	r3, #115	; 0x73
 8004254:	dc02      	bgt.n	800425c <ts_formatstring+0x48>
 8004256:	2b69      	cmp	r3, #105	; 0x69
 8004258:	d00f      	beq.n	800427a <ts_formatstring+0x66>
 800425a:	e056      	b.n	800430a <ts_formatstring+0xf6>
 800425c:	2b75      	cmp	r3, #117	; 0x75
 800425e:	d037      	beq.n	80042d0 <ts_formatstring+0xbc>
 8004260:	2b78      	cmp	r3, #120	; 0x78
 8004262:	d040      	beq.n	80042e6 <ts_formatstring+0xd2>
 8004264:	e051      	b.n	800430a <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	60fa      	str	r2, [r7, #12]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	1d11      	adds	r1, r2, #4
 8004270:	6079      	str	r1, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
				break;
 8004278:	e047      	b.n	800430a <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	1d1a      	adds	r2, r3, #4
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	da07      	bge.n	800429a <ts_formatstring+0x86>
					{
						val *= -1;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	425b      	negs	r3, r3
 800428e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	60fa      	str	r2, [r7, #12]
 8004296:	222d      	movs	r2, #45	; 0x2d
 8004298:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800429a:	69f9      	ldr	r1, [r7, #28]
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	220a      	movs	r2, #10
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ff6e 	bl	8004184 <ts_itoa>
				}
				break;
 80042a8:	e02f      	b.n	800430a <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	1d1a      	adds	r2, r3, #4
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80042b4:	e007      	b.n	80042c6 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	60fa      	str	r2, [r7, #12]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	1c51      	adds	r1, r2, #1
 80042c0:	61b9      	str	r1, [r7, #24]
 80042c2:	7812      	ldrb	r2, [r2, #0]
 80042c4:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f3      	bne.n	80042b6 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 80042ce:	e01c      	b.n	800430a <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	6819      	ldr	r1, [r3, #0]
 80042d8:	f107 030c 	add.w	r3, r7, #12
 80042dc:	220a      	movs	r2, #10
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff ff50 	bl	8004184 <ts_itoa>
				break;
 80042e4:	e011      	b.n	800430a <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1d1a      	adds	r2, r3, #4
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4619      	mov	r1, r3
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	2210      	movs	r2, #16
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff ff44 	bl	8004184 <ts_itoa>
				break;
 80042fc:	e005      	b.n	800430a <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	60fa      	str	r2, [r7, #12]
 8004304:	2225      	movs	r2, #37	; 0x25
 8004306:	701a      	strb	r2, [r3, #0]
				  break;
 8004308:	bf00      	nop
			}
			fmt++;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3301      	adds	r3, #1
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	e007      	b.n	8004322 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	60fa      	str	r2, [r7, #12]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	1c51      	adds	r1, r2, #1
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	7812      	ldrb	r2, [r2, #0]
 8004320:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f47f af7d 	bne.w	8004226 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	461a      	mov	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	1ad3      	subs	r3, r2, r3
}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop

08004344 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8004344:	b40e      	push	{r1, r2, r3}
 8004346:	b580      	push	{r7, lr}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800434e:	f107 0320 	add.w	r3, r7, #32
 8004352:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	69f9      	ldr	r1, [r7, #28]
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff5b 	bl	8004214 <ts_formatstring>
 800435e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8004360:	68fb      	ldr	r3, [r7, #12]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800436c:	b003      	add	sp, #12
 800436e:	4770      	bx	lr

08004370 <__libc_init_array>:
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <__libc_init_array+0x3c>)
 8004372:	b570      	push	{r4, r5, r6, lr}
 8004374:	461e      	mov	r6, r3
 8004376:	4c0e      	ldr	r4, [pc, #56]	; (80043b0 <__libc_init_array+0x40>)
 8004378:	2500      	movs	r5, #0
 800437a:	1ae4      	subs	r4, r4, r3
 800437c:	10a4      	asrs	r4, r4, #2
 800437e:	42a5      	cmp	r5, r4
 8004380:	d004      	beq.n	800438c <__libc_init_array+0x1c>
 8004382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004386:	4798      	blx	r3
 8004388:	3501      	adds	r5, #1
 800438a:	e7f8      	b.n	800437e <__libc_init_array+0xe>
 800438c:	f001 f83c 	bl	8005408 <_init>
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <__libc_init_array+0x44>)
 8004392:	4c09      	ldr	r4, [pc, #36]	; (80043b8 <__libc_init_array+0x48>)
 8004394:	461e      	mov	r6, r3
 8004396:	1ae4      	subs	r4, r4, r3
 8004398:	10a4      	asrs	r4, r4, #2
 800439a:	2500      	movs	r5, #0
 800439c:	42a5      	cmp	r5, r4
 800439e:	d004      	beq.n	80043aa <__libc_init_array+0x3a>
 80043a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043a4:	4798      	blx	r3
 80043a6:	3501      	adds	r5, #1
 80043a8:	e7f8      	b.n	800439c <__libc_init_array+0x2c>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	08005b44 	.word	0x08005b44
 80043b0:	08005b44 	.word	0x08005b44
 80043b4:	08005b44 	.word	0x08005b44
 80043b8:	08005b48 	.word	0x08005b48

080043bc <exp2>:
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	2000      	movs	r0, #0
 80043c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80043c6:	f000 b801 	b.w	80043cc <pow>
	...

080043cc <pow>:
 80043cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d0:	b08f      	sub	sp, #60	; 0x3c
 80043d2:	461d      	mov	r5, r3
 80043d4:	4682      	mov	sl, r0
 80043d6:	468b      	mov	fp, r1
 80043d8:	4614      	mov	r4, r2
 80043da:	f000 f95d 	bl	8004698 <__ieee754_pow>
 80043de:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8004694 <pow+0x2c8>
 80043e2:	e9cd 0100 	strd	r0, r1, [sp]
 80043e6:	f999 3000 	ldrsb.w	r3, [r9]
 80043ea:	46c8      	mov	r8, r9
 80043ec:	9302      	str	r3, [sp, #8]
 80043ee:	3301      	adds	r3, #1
 80043f0:	f000 813d 	beq.w	800466e <pow+0x2a2>
 80043f4:	4622      	mov	r2, r4
 80043f6:	462b      	mov	r3, r5
 80043f8:	4620      	mov	r0, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	f7fc fb1a 	bl	8000a34 <__aeabi_dcmpun>
 8004400:	4606      	mov	r6, r0
 8004402:	2800      	cmp	r0, #0
 8004404:	f040 8133 	bne.w	800466e <pow+0x2a2>
 8004408:	4652      	mov	r2, sl
 800440a:	465b      	mov	r3, fp
 800440c:	4650      	mov	r0, sl
 800440e:	4659      	mov	r1, fp
 8004410:	f7fc fb10 	bl	8000a34 <__aeabi_dcmpun>
 8004414:	9003      	str	r0, [sp, #12]
 8004416:	b1d0      	cbz	r0, 800444e <pow+0x82>
 8004418:	2200      	movs	r2, #0
 800441a:	2300      	movs	r3, #0
 800441c:	4620      	mov	r0, r4
 800441e:	4629      	mov	r1, r5
 8004420:	f7fc fad6 	bl	80009d0 <__aeabi_dcmpeq>
 8004424:	2800      	cmp	r0, #0
 8004426:	f000 8122 	beq.w	800466e <pow+0x2a2>
 800442a:	2301      	movs	r3, #1
 800442c:	9304      	str	r3, [sp, #16]
 800442e:	4b92      	ldr	r3, [pc, #584]	; (8004678 <pow+0x2ac>)
 8004430:	2200      	movs	r2, #0
 8004432:	9305      	str	r3, [sp, #20]
 8004434:	4b91      	ldr	r3, [pc, #580]	; (800467c <pow+0x2b0>)
 8004436:	960c      	str	r6, [sp, #48]	; 0x30
 8004438:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800443c:	9b02      	ldr	r3, [sp, #8]
 800443e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004442:	2b02      	cmp	r3, #2
 8004444:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004448:	f040 8084 	bne.w	8004554 <pow+0x188>
 800444c:	e10c      	b.n	8004668 <pow+0x29c>
 800444e:	2600      	movs	r6, #0
 8004450:	2700      	movs	r7, #0
 8004452:	4632      	mov	r2, r6
 8004454:	463b      	mov	r3, r7
 8004456:	4650      	mov	r0, sl
 8004458:	4659      	mov	r1, fp
 800445a:	f7fc fab9 	bl	80009d0 <__aeabi_dcmpeq>
 800445e:	2800      	cmp	r0, #0
 8004460:	d03f      	beq.n	80044e2 <pow+0x116>
 8004462:	4632      	mov	r2, r6
 8004464:	463b      	mov	r3, r7
 8004466:	4620      	mov	r0, r4
 8004468:	4629      	mov	r1, r5
 800446a:	f7fc fab1 	bl	80009d0 <__aeabi_dcmpeq>
 800446e:	4680      	mov	r8, r0
 8004470:	b198      	cbz	r0, 800449a <pow+0xce>
 8004472:	2301      	movs	r3, #1
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	4b80      	ldr	r3, [pc, #512]	; (8004678 <pow+0x2ac>)
 8004478:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800447c:	9305      	str	r3, [sp, #20]
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004484:	930c      	str	r3, [sp, #48]	; 0x30
 8004486:	9b02      	ldr	r3, [sp, #8]
 8004488:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	d061      	beq.n	8004554 <pow+0x188>
 8004490:	4b7a      	ldr	r3, [pc, #488]	; (800467c <pow+0x2b0>)
 8004492:	2200      	movs	r2, #0
 8004494:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004498:	e0e0      	b.n	800465c <pow+0x290>
 800449a:	4620      	mov	r0, r4
 800449c:	4629      	mov	r1, r5
 800449e:	f000 fe9c 	bl	80051da <finite>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	f000 80e3 	beq.w	800466e <pow+0x2a2>
 80044a8:	4632      	mov	r2, r6
 80044aa:	463b      	mov	r3, r7
 80044ac:	4620      	mov	r0, r4
 80044ae:	4629      	mov	r1, r5
 80044b0:	f7fc fa98 	bl	80009e4 <__aeabi_dcmplt>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	f000 80da 	beq.w	800466e <pow+0x2a2>
 80044ba:	2301      	movs	r3, #1
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	4b6e      	ldr	r3, [pc, #440]	; (8004678 <pow+0x2ac>)
 80044c0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80044c4:	9305      	str	r3, [sp, #20]
 80044c6:	f999 3000 	ldrsb.w	r3, [r9]
 80044ca:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80044ce:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d030      	beq.n	8004538 <pow+0x16c>
 80044d6:	496a      	ldr	r1, [pc, #424]	; (8004680 <pow+0x2b4>)
 80044d8:	2000      	movs	r0, #0
 80044da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044de:	2b02      	cmp	r3, #2
 80044e0:	e037      	b.n	8004552 <pow+0x186>
 80044e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044e6:	f000 fe78 	bl	80051da <finite>
 80044ea:	9002      	str	r0, [sp, #8]
 80044ec:	2800      	cmp	r0, #0
 80044ee:	f040 808a 	bne.w	8004606 <pow+0x23a>
 80044f2:	4650      	mov	r0, sl
 80044f4:	4659      	mov	r1, fp
 80044f6:	f000 fe70 	bl	80051da <finite>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	f000 8083 	beq.w	8004606 <pow+0x23a>
 8004500:	4620      	mov	r0, r4
 8004502:	4629      	mov	r1, r5
 8004504:	f000 fe69 	bl	80051da <finite>
 8004508:	2800      	cmp	r0, #0
 800450a:	d07c      	beq.n	8004606 <pow+0x23a>
 800450c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f7fc fa8e 	bl	8000a34 <__aeabi_dcmpun>
 8004518:	f999 9000 	ldrsb.w	r9, [r9]
 800451c:	4b56      	ldr	r3, [pc, #344]	; (8004678 <pow+0x2ac>)
 800451e:	b310      	cbz	r0, 8004566 <pow+0x19a>
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	9b02      	ldr	r3, [sp, #8]
 8004524:	2201      	movs	r2, #1
 8004526:	9204      	str	r2, [sp, #16]
 8004528:	930c      	str	r3, [sp, #48]	; 0x30
 800452a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800452e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004532:	f1b9 0f00 	cmp.w	r9, #0
 8004536:	d102      	bne.n	800453e <pow+0x172>
 8004538:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800453c:	e00a      	b.n	8004554 <pow+0x188>
 800453e:	4632      	mov	r2, r6
 8004540:	463b      	mov	r3, r7
 8004542:	4630      	mov	r0, r6
 8004544:	4639      	mov	r1, r7
 8004546:	f7fc f905 	bl	8000754 <__aeabi_ddiv>
 800454a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800454e:	f1b9 0f02 	cmp.w	r9, #2
 8004552:	d004      	beq.n	800455e <pow+0x192>
 8004554:	a804      	add	r0, sp, #16
 8004556:	f000 fe46 	bl	80051e6 <matherr>
 800455a:	2800      	cmp	r0, #0
 800455c:	d17e      	bne.n	800465c <pow+0x290>
 800455e:	f000 ff4d 	bl	80053fc <__errno>
 8004562:	2321      	movs	r3, #33	; 0x21
 8004564:	e079      	b.n	800465a <pow+0x28e>
 8004566:	2203      	movs	r2, #3
 8004568:	9204      	str	r2, [sp, #16]
 800456a:	9305      	str	r3, [sp, #20]
 800456c:	900c      	str	r0, [sp, #48]	; 0x30
 800456e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004572:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004576:	f1b9 0f00 	cmp.w	r9, #0
 800457a:	d122      	bne.n	80045c2 <pow+0x1f6>
 800457c:	4b41      	ldr	r3, [pc, #260]	; (8004684 <pow+0x2b8>)
 800457e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004582:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004586:	4650      	mov	r0, sl
 8004588:	4632      	mov	r2, r6
 800458a:	463b      	mov	r3, r7
 800458c:	4659      	mov	r1, fp
 800458e:	f7fc fa29 	bl	80009e4 <__aeabi_dcmplt>
 8004592:	2800      	cmp	r0, #0
 8004594:	d05a      	beq.n	800464c <pow+0x280>
 8004596:	2200      	movs	r2, #0
 8004598:	4b3b      	ldr	r3, [pc, #236]	; (8004688 <pow+0x2bc>)
 800459a:	4620      	mov	r0, r4
 800459c:	4629      	mov	r1, r5
 800459e:	f7fb ffaf 	bl	8000500 <__aeabi_dmul>
 80045a2:	4604      	mov	r4, r0
 80045a4:	460d      	mov	r5, r1
 80045a6:	f000 fe27 	bl	80051f8 <rint>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4620      	mov	r0, r4
 80045b0:	4629      	mov	r1, r5
 80045b2:	f7fc fa0d 	bl	80009d0 <__aeabi_dcmpeq>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d144      	bne.n	8004644 <pow+0x278>
 80045ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80045be:	4b33      	ldr	r3, [pc, #204]	; (800468c <pow+0x2c0>)
 80045c0:	e01e      	b.n	8004600 <pow+0x234>
 80045c2:	4b33      	ldr	r3, [pc, #204]	; (8004690 <pow+0x2c4>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80045ca:	4650      	mov	r0, sl
 80045cc:	4632      	mov	r2, r6
 80045ce:	463b      	mov	r3, r7
 80045d0:	4659      	mov	r1, fp
 80045d2:	f7fc fa07 	bl	80009e4 <__aeabi_dcmplt>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d034      	beq.n	8004644 <pow+0x278>
 80045da:	2200      	movs	r2, #0
 80045dc:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <pow+0x2bc>)
 80045de:	4620      	mov	r0, r4
 80045e0:	4629      	mov	r1, r5
 80045e2:	f7fb ff8d 	bl	8000500 <__aeabi_dmul>
 80045e6:	4604      	mov	r4, r0
 80045e8:	460d      	mov	r5, r1
 80045ea:	f000 fe05 	bl	80051f8 <rint>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fc f9eb 	bl	80009d0 <__aeabi_dcmpeq>
 80045fa:	bb18      	cbnz	r0, 8004644 <pow+0x278>
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <pow+0x2b4>)
 80045fe:	2200      	movs	r2, #0
 8004600:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004604:	e01e      	b.n	8004644 <pow+0x278>
 8004606:	2600      	movs	r6, #0
 8004608:	2700      	movs	r7, #0
 800460a:	4632      	mov	r2, r6
 800460c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004610:	463b      	mov	r3, r7
 8004612:	f7fc f9dd 	bl	80009d0 <__aeabi_dcmpeq>
 8004616:	b350      	cbz	r0, 800466e <pow+0x2a2>
 8004618:	4650      	mov	r0, sl
 800461a:	4659      	mov	r1, fp
 800461c:	f000 fddd 	bl	80051da <finite>
 8004620:	b328      	cbz	r0, 800466e <pow+0x2a2>
 8004622:	4620      	mov	r0, r4
 8004624:	4629      	mov	r1, r5
 8004626:	f000 fdd8 	bl	80051da <finite>
 800462a:	b300      	cbz	r0, 800466e <pow+0x2a2>
 800462c:	2304      	movs	r3, #4
 800462e:	9304      	str	r3, [sp, #16]
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <pow+0x2ac>)
 8004632:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8004636:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800463a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800463e:	9305      	str	r3, [sp, #20]
 8004640:	2300      	movs	r3, #0
 8004642:	930c      	str	r3, [sp, #48]	; 0x30
 8004644:	f998 3000 	ldrsb.w	r3, [r8]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d003      	beq.n	8004654 <pow+0x288>
 800464c:	a804      	add	r0, sp, #16
 800464e:	f000 fdca 	bl	80051e6 <matherr>
 8004652:	b918      	cbnz	r0, 800465c <pow+0x290>
 8004654:	f000 fed2 	bl	80053fc <__errno>
 8004658:	2322      	movs	r3, #34	; 0x22
 800465a:	6003      	str	r3, [r0, #0]
 800465c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800465e:	b11b      	cbz	r3, 8004668 <pow+0x29c>
 8004660:	f000 fecc 	bl	80053fc <__errno>
 8004664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004666:	6003      	str	r3, [r0, #0]
 8004668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800466c:	e001      	b.n	8004672 <pow+0x2a6>
 800466e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004672:	b00f      	add	sp, #60	; 0x3c
 8004674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004678:	08005af0 	.word	0x08005af0
 800467c:	3ff00000 	.word	0x3ff00000
 8004680:	fff00000 	.word	0xfff00000
 8004684:	47efffff 	.word	0x47efffff
 8004688:	3fe00000 	.word	0x3fe00000
 800468c:	c7efffff 	.word	0xc7efffff
 8004690:	7ff00000 	.word	0x7ff00000
 8004694:	20000024 	.word	0x20000024

08004698 <__ieee754_pow>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	b091      	sub	sp, #68	; 0x44
 800469e:	e9cd 2300 	strd	r2, r3, [sp]
 80046a2:	e89d 0208 	ldmia.w	sp, {r3, r9}
 80046a6:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80046aa:	4607      	mov	r7, r0
 80046ac:	4682      	mov	sl, r0
 80046ae:	ea56 0003 	orrs.w	r0, r6, r3
 80046b2:	460c      	mov	r4, r1
 80046b4:	4688      	mov	r8, r1
 80046b6:	f000 8496 	beq.w	8004fe6 <__ieee754_pow+0x94e>
 80046ba:	4abd      	ldr	r2, [pc, #756]	; (80049b0 <__ieee754_pow+0x318>)
 80046bc:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80046c0:	4295      	cmp	r5, r2
 80046c2:	dc08      	bgt.n	80046d6 <__ieee754_pow+0x3e>
 80046c4:	d102      	bne.n	80046cc <__ieee754_pow+0x34>
 80046c6:	b937      	cbnz	r7, 80046d6 <__ieee754_pow+0x3e>
 80046c8:	f000 bc98 	b.w	8004ffc <__ieee754_pow+0x964>
 80046cc:	4296      	cmp	r6, r2
 80046ce:	dc02      	bgt.n	80046d6 <__ieee754_pow+0x3e>
 80046d0:	4296      	cmp	r6, r2
 80046d2:	d10e      	bne.n	80046f2 <__ieee754_pow+0x5a>
 80046d4:	b16b      	cbz	r3, 80046f2 <__ieee754_pow+0x5a>
 80046d6:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80046da:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80046de:	ea55 000a 	orrs.w	r0, r5, sl
 80046e2:	f000 8480 	beq.w	8004fe6 <__ieee754_pow+0x94e>
 80046e6:	48b3      	ldr	r0, [pc, #716]	; (80049b4 <__ieee754_pow+0x31c>)
 80046e8:	b011      	add	sp, #68	; 0x44
 80046ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ee:	f000 bd7d 	b.w	80051ec <nan>
 80046f2:	f1b8 0f00 	cmp.w	r8, #0
 80046f6:	da2a      	bge.n	800474e <__ieee754_pow+0xb6>
 80046f8:	4aaf      	ldr	r2, [pc, #700]	; (80049b8 <__ieee754_pow+0x320>)
 80046fa:	4296      	cmp	r6, r2
 80046fc:	dc24      	bgt.n	8004748 <__ieee754_pow+0xb0>
 80046fe:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 8004702:	4296      	cmp	r6, r2
 8004704:	dd23      	ble.n	800474e <__ieee754_pow+0xb6>
 8004706:	1532      	asrs	r2, r6, #20
 8004708:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800470c:	2a14      	cmp	r2, #20
 800470e:	dd0c      	ble.n	800472a <__ieee754_pow+0x92>
 8004710:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 8004714:	fa23 f102 	lsr.w	r1, r3, r2
 8004718:	fa01 f202 	lsl.w	r2, r1, r2
 800471c:	4293      	cmp	r3, r2
 800471e:	d116      	bne.n	800474e <__ieee754_pow+0xb6>
 8004720:	f001 0101 	and.w	r1, r1, #1
 8004724:	f1c1 0b02 	rsb	fp, r1, #2
 8004728:	e013      	b.n	8004752 <__ieee754_pow+0xba>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d155      	bne.n	80047da <__ieee754_pow+0x142>
 800472e:	f1c2 0214 	rsb	r2, r2, #20
 8004732:	fa46 f102 	asr.w	r1, r6, r2
 8004736:	fa01 f202 	lsl.w	r2, r1, r2
 800473a:	4296      	cmp	r6, r2
 800473c:	d12a      	bne.n	8004794 <__ieee754_pow+0xfc>
 800473e:	f001 0101 	and.w	r1, r1, #1
 8004742:	f1c1 0b02 	rsb	fp, r1, #2
 8004746:	e026      	b.n	8004796 <__ieee754_pow+0xfe>
 8004748:	f04f 0b02 	mov.w	fp, #2
 800474c:	e001      	b.n	8004752 <__ieee754_pow+0xba>
 800474e:	f04f 0b00 	mov.w	fp, #0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d143      	bne.n	80047de <__ieee754_pow+0x146>
 8004756:	4a96      	ldr	r2, [pc, #600]	; (80049b0 <__ieee754_pow+0x318>)
 8004758:	4296      	cmp	r6, r2
 800475a:	d11c      	bne.n	8004796 <__ieee754_pow+0xfe>
 800475c:	f105 4240 	add.w	r2, r5, #3221225472	; 0xc0000000
 8004760:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 8004764:	ea52 020a 	orrs.w	r2, r2, sl
 8004768:	f000 843e 	beq.w	8004fe8 <__ieee754_pow+0x950>
 800476c:	4b93      	ldr	r3, [pc, #588]	; (80049bc <__ieee754_pow+0x324>)
 800476e:	429d      	cmp	r5, r3
 8004770:	dd07      	ble.n	8004782 <__ieee754_pow+0xea>
 8004772:	f1b9 0f00 	cmp.w	r9, #0
 8004776:	f280 8439 	bge.w	8004fec <__ieee754_pow+0x954>
 800477a:	2300      	movs	r3, #0
 800477c:	4619      	mov	r1, r3
 800477e:	f000 bc42 	b.w	8005006 <__ieee754_pow+0x96e>
 8004782:	f1b9 0f00 	cmp.w	r9, #0
 8004786:	daf8      	bge.n	800477a <__ieee754_pow+0xe2>
 8004788:	9a01      	ldr	r2, [sp, #4]
 800478a:	9b00      	ldr	r3, [sp, #0]
 800478c:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8004790:	f000 bc39 	b.w	8005006 <__ieee754_pow+0x96e>
 8004794:	469b      	mov	fp, r3
 8004796:	4b8a      	ldr	r3, [pc, #552]	; (80049c0 <__ieee754_pow+0x328>)
 8004798:	429e      	cmp	r6, r3
 800479a:	d108      	bne.n	80047ae <__ieee754_pow+0x116>
 800479c:	f1b9 0f00 	cmp.w	r9, #0
 80047a0:	f280 8427 	bge.w	8004ff2 <__ieee754_pow+0x95a>
 80047a4:	463a      	mov	r2, r7
 80047a6:	4623      	mov	r3, r4
 80047a8:	2000      	movs	r0, #0
 80047aa:	4985      	ldr	r1, [pc, #532]	; (80049c0 <__ieee754_pow+0x328>)
 80047ac:	e03e      	b.n	800482c <__ieee754_pow+0x194>
 80047ae:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80047b2:	d105      	bne.n	80047c0 <__ieee754_pow+0x128>
 80047b4:	463a      	mov	r2, r7
 80047b6:	4623      	mov	r3, r4
 80047b8:	4638      	mov	r0, r7
 80047ba:	4621      	mov	r1, r4
 80047bc:	f000 bc10 	b.w	8004fe0 <__ieee754_pow+0x948>
 80047c0:	4b80      	ldr	r3, [pc, #512]	; (80049c4 <__ieee754_pow+0x32c>)
 80047c2:	4599      	cmp	r9, r3
 80047c4:	d10b      	bne.n	80047de <__ieee754_pow+0x146>
 80047c6:	f1b8 0f00 	cmp.w	r8, #0
 80047ca:	db08      	blt.n	80047de <__ieee754_pow+0x146>
 80047cc:	4638      	mov	r0, r7
 80047ce:	4621      	mov	r1, r4
 80047d0:	b011      	add	sp, #68	; 0x44
 80047d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d6:	f000 bc53 	b.w	8005080 <__ieee754_sqrt>
 80047da:	f04f 0b00 	mov.w	fp, #0
 80047de:	4638      	mov	r0, r7
 80047e0:	4621      	mov	r1, r4
 80047e2:	f000 fcf7 	bl	80051d4 <fabs>
 80047e6:	f1ba 0f00 	cmp.w	sl, #0
 80047ea:	d12a      	bne.n	8004842 <__ieee754_pow+0x1aa>
 80047ec:	b125      	cbz	r5, 80047f8 <__ieee754_pow+0x160>
 80047ee:	4b74      	ldr	r3, [pc, #464]	; (80049c0 <__ieee754_pow+0x328>)
 80047f0:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d124      	bne.n	8004842 <__ieee754_pow+0x1aa>
 80047f8:	f1b9 0f00 	cmp.w	r9, #0
 80047fc:	da05      	bge.n	800480a <__ieee754_pow+0x172>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	2000      	movs	r0, #0
 8004804:	496e      	ldr	r1, [pc, #440]	; (80049c0 <__ieee754_pow+0x328>)
 8004806:	f7fb ffa5 	bl	8000754 <__aeabi_ddiv>
 800480a:	f1b8 0f00 	cmp.w	r8, #0
 800480e:	f280 83f3 	bge.w	8004ff8 <__ieee754_pow+0x960>
 8004812:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004816:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800481a:	ea55 030b 	orrs.w	r3, r5, fp
 800481e:	d108      	bne.n	8004832 <__ieee754_pow+0x19a>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	f7fb fcb8 	bl	8000198 <__aeabi_dsub>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	f7fb ff92 	bl	8000754 <__aeabi_ddiv>
 8004830:	e3e2      	b.n	8004ff8 <__ieee754_pow+0x960>
 8004832:	f1bb 0f01 	cmp.w	fp, #1
 8004836:	4603      	mov	r3, r0
 8004838:	f040 83e5 	bne.w	8005006 <__ieee754_pow+0x96e>
 800483c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004840:	e3e1      	b.n	8005006 <__ieee754_pow+0x96e>
 8004842:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8004846:	f108 33ff 	add.w	r3, r8, #4294967295
 800484a:	930d      	str	r3, [sp, #52]	; 0x34
 800484c:	ea5b 0303 	orrs.w	r3, fp, r3
 8004850:	d104      	bne.n	800485c <__ieee754_pow+0x1c4>
 8004852:	463a      	mov	r2, r7
 8004854:	4623      	mov	r3, r4
 8004856:	4638      	mov	r0, r7
 8004858:	4621      	mov	r1, r4
 800485a:	e7e3      	b.n	8004824 <__ieee754_pow+0x18c>
 800485c:	4b5a      	ldr	r3, [pc, #360]	; (80049c8 <__ieee754_pow+0x330>)
 800485e:	429e      	cmp	r6, r3
 8004860:	dd6d      	ble.n	800493e <__ieee754_pow+0x2a6>
 8004862:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004866:	429e      	cmp	r6, r3
 8004868:	dd0b      	ble.n	8004882 <__ieee754_pow+0x1ea>
 800486a:	4b54      	ldr	r3, [pc, #336]	; (80049bc <__ieee754_pow+0x324>)
 800486c:	429d      	cmp	r5, r3
 800486e:	dc0e      	bgt.n	800488e <__ieee754_pow+0x1f6>
 8004870:	f1b9 0f00 	cmp.w	r9, #0
 8004874:	da81      	bge.n	800477a <__ieee754_pow+0xe2>
 8004876:	a344      	add	r3, pc, #272	; (adr r3, 8004988 <__ieee754_pow+0x2f0>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	4610      	mov	r0, r2
 800487e:	4619      	mov	r1, r3
 8004880:	e3ae      	b.n	8004fe0 <__ieee754_pow+0x948>
 8004882:	4b52      	ldr	r3, [pc, #328]	; (80049cc <__ieee754_pow+0x334>)
 8004884:	429d      	cmp	r5, r3
 8004886:	ddf3      	ble.n	8004870 <__ieee754_pow+0x1d8>
 8004888:	4b4d      	ldr	r3, [pc, #308]	; (80049c0 <__ieee754_pow+0x328>)
 800488a:	429d      	cmp	r5, r3
 800488c:	dd03      	ble.n	8004896 <__ieee754_pow+0x1fe>
 800488e:	f1b9 0f00 	cmp.w	r9, #0
 8004892:	dcf0      	bgt.n	8004876 <__ieee754_pow+0x1de>
 8004894:	e771      	b.n	800477a <__ieee754_pow+0xe2>
 8004896:	2200      	movs	r2, #0
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <__ieee754_pow+0x328>)
 800489a:	f7fb fc7d 	bl	8000198 <__aeabi_dsub>
 800489e:	a33c      	add	r3, pc, #240	; (adr r3, 8004990 <__ieee754_pow+0x2f8>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	4604      	mov	r4, r0
 80048a6:	460d      	mov	r5, r1
 80048a8:	f7fb fe2a 	bl	8000500 <__aeabi_dmul>
 80048ac:	a33a      	add	r3, pc, #232	; (adr r3, 8004998 <__ieee754_pow+0x300>)
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	4606      	mov	r6, r0
 80048b4:	460f      	mov	r7, r1
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	f7fb fe21 	bl	8000500 <__aeabi_dmul>
 80048be:	2200      	movs	r2, #0
 80048c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048c4:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <__ieee754_pow+0x338>)
 80048c6:	4620      	mov	r0, r4
 80048c8:	4629      	mov	r1, r5
 80048ca:	f7fb fe19 	bl	8000500 <__aeabi_dmul>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	a133      	add	r1, pc, #204	; (adr r1, 80049a0 <__ieee754_pow+0x308>)
 80048d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048d8:	f7fb fc5e 	bl	8000198 <__aeabi_dsub>
 80048dc:	4622      	mov	r2, r4
 80048de:	462b      	mov	r3, r5
 80048e0:	f7fb fe0e 	bl	8000500 <__aeabi_dmul>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	2000      	movs	r0, #0
 80048ea:	4936      	ldr	r1, [pc, #216]	; (80049c4 <__ieee754_pow+0x32c>)
 80048ec:	f7fb fc54 	bl	8000198 <__aeabi_dsub>
 80048f0:	4622      	mov	r2, r4
 80048f2:	462b      	mov	r3, r5
 80048f4:	4680      	mov	r8, r0
 80048f6:	4689      	mov	r9, r1
 80048f8:	4620      	mov	r0, r4
 80048fa:	4629      	mov	r1, r5
 80048fc:	f7fb fe00 	bl	8000500 <__aeabi_dmul>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4640      	mov	r0, r8
 8004906:	4649      	mov	r1, r9
 8004908:	f7fb fdfa 	bl	8000500 <__aeabi_dmul>
 800490c:	a326      	add	r3, pc, #152	; (adr r3, 80049a8 <__ieee754_pow+0x310>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb fdf5 	bl	8000500 <__aeabi_dmul>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800491e:	f7fb fc3b 	bl	8000198 <__aeabi_dsub>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4604      	mov	r4, r0
 8004928:	460d      	mov	r5, r1
 800492a:	4630      	mov	r0, r6
 800492c:	4639      	mov	r1, r7
 800492e:	f7fb fc35 	bl	800019c <__adddf3>
 8004932:	2000      	movs	r0, #0
 8004934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004938:	4632      	mov	r2, r6
 800493a:	463b      	mov	r3, r7
 800493c:	e1a7      	b.n	8004c8e <__ieee754_pow+0x5f6>
 800493e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	da05      	bge.n	8004954 <__ieee754_pow+0x2bc>
 8004948:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <__ieee754_pow+0x33c>)
 800494a:	f7fb fdd9 	bl	8000500 <__aeabi_dmul>
 800494e:	460d      	mov	r5, r1
 8004950:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004954:	152b      	asrs	r3, r5, #20
 8004956:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800495a:	4413      	add	r3, r2
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <__ieee754_pow+0x340>)
 800495e:	9307      	str	r3, [sp, #28]
 8004960:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004964:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8004968:	4293      	cmp	r3, r2
 800496a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800496e:	dd07      	ble.n	8004980 <__ieee754_pow+0x2e8>
 8004970:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <__ieee754_pow+0x344>)
 8004972:	4293      	cmp	r3, r2
 8004974:	dd34      	ble.n	80049e0 <__ieee754_pow+0x348>
 8004976:	9b07      	ldr	r3, [sp, #28]
 8004978:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800497c:	3301      	adds	r3, #1
 800497e:	9307      	str	r3, [sp, #28]
 8004980:	f04f 0a00 	mov.w	sl, #0
 8004984:	e02e      	b.n	80049e4 <__ieee754_pow+0x34c>
 8004986:	bf00      	nop
 8004988:	8800759c 	.word	0x8800759c
 800498c:	7e37e43c 	.word	0x7e37e43c
 8004990:	60000000 	.word	0x60000000
 8004994:	3ff71547 	.word	0x3ff71547
 8004998:	f85ddf44 	.word	0xf85ddf44
 800499c:	3e54ae0b 	.word	0x3e54ae0b
 80049a0:	55555555 	.word	0x55555555
 80049a4:	3fd55555 	.word	0x3fd55555
 80049a8:	652b82fe 	.word	0x652b82fe
 80049ac:	3ff71547 	.word	0x3ff71547
 80049b0:	7ff00000 	.word	0x7ff00000
 80049b4:	08005b39 	.word	0x08005b39
 80049b8:	433fffff 	.word	0x433fffff
 80049bc:	3fefffff 	.word	0x3fefffff
 80049c0:	3ff00000 	.word	0x3ff00000
 80049c4:	3fe00000 	.word	0x3fe00000
 80049c8:	41e00000 	.word	0x41e00000
 80049cc:	3feffffe 	.word	0x3feffffe
 80049d0:	3fd00000 	.word	0x3fd00000
 80049d4:	43400000 	.word	0x43400000
 80049d8:	0003988e 	.word	0x0003988e
 80049dc:	000bb679 	.word	0x000bb679
 80049e0:	f04f 0a01 	mov.w	sl, #1
 80049e4:	4629      	mov	r1, r5
 80049e6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80049ea:	930c      	str	r3, [sp, #48]	; 0x30
 80049ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049ee:	4bd0      	ldr	r3, [pc, #832]	; (8004d30 <__ieee754_pow+0x698>)
 80049f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049f4:	4413      	add	r3, r2
 80049f6:	cb18      	ldmia	r3, {r3, r4}
 80049f8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80049fc:	461a      	mov	r2, r3
 80049fe:	4623      	mov	r3, r4
 8004a00:	f7fb fbca 	bl	8000198 <__aeabi_dsub>
 8004a04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a08:	4606      	mov	r6, r0
 8004a0a:	460f      	mov	r7, r1
 8004a0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a10:	f7fb fbc4 	bl	800019c <__adddf3>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	2000      	movs	r0, #0
 8004a1a:	49c6      	ldr	r1, [pc, #792]	; (8004d34 <__ieee754_pow+0x69c>)
 8004a1c:	f7fb fe9a 	bl	8000754 <__aeabi_ddiv>
 8004a20:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4630      	mov	r0, r6
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fb fd68 	bl	8000500 <__aeabi_dmul>
 8004a30:	106d      	asrs	r5, r5, #1
 8004a32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004a3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a42:	2300      	movs	r3, #0
 8004a44:	9302      	str	r3, [sp, #8]
 8004a46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004a4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	4614      	mov	r4, r2
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	f7fb fd50 	bl	8000500 <__aeabi_dmul>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4630      	mov	r0, r6
 8004a66:	4639      	mov	r1, r7
 8004a68:	f7fb fb96 	bl	8000198 <__aeabi_dsub>
 8004a6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a70:	4606      	mov	r6, r0
 8004a72:	460f      	mov	r7, r1
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb fb8e 	bl	8000198 <__aeabi_dsub>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a84:	f7fb fb88 	bl	8000198 <__aeabi_dsub>
 8004a88:	4642      	mov	r2, r8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	f7fb fd38 	bl	8000500 <__aeabi_dmul>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4630      	mov	r0, r6
 8004a96:	4639      	mov	r1, r7
 8004a98:	f7fb fb7e 	bl	8000198 <__aeabi_dsub>
 8004a9c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004aa0:	f7fb fd2e 	bl	8000500 <__aeabi_dmul>
 8004aa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f7fb fd26 	bl	8000500 <__aeabi_dmul>
 8004ab4:	a38c      	add	r3, pc, #560	; (adr r3, 8004ce8 <__ieee754_pow+0x650>)
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	4604      	mov	r4, r0
 8004abc:	460d      	mov	r5, r1
 8004abe:	f7fb fd1f 	bl	8000500 <__aeabi_dmul>
 8004ac2:	a38b      	add	r3, pc, #556	; (adr r3, 8004cf0 <__ieee754_pow+0x658>)
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f7fb fb68 	bl	800019c <__adddf3>
 8004acc:	4622      	mov	r2, r4
 8004ace:	462b      	mov	r3, r5
 8004ad0:	f7fb fd16 	bl	8000500 <__aeabi_dmul>
 8004ad4:	a388      	add	r3, pc, #544	; (adr r3, 8004cf8 <__ieee754_pow+0x660>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f7fb fb5f 	bl	800019c <__adddf3>
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	f7fb fd0d 	bl	8000500 <__aeabi_dmul>
 8004ae6:	a386      	add	r3, pc, #536	; (adr r3, 8004d00 <__ieee754_pow+0x668>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f7fb fb56 	bl	800019c <__adddf3>
 8004af0:	4622      	mov	r2, r4
 8004af2:	462b      	mov	r3, r5
 8004af4:	f7fb fd04 	bl	8000500 <__aeabi_dmul>
 8004af8:	a383      	add	r3, pc, #524	; (adr r3, 8004d08 <__ieee754_pow+0x670>)
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f7fb fb4d 	bl	800019c <__adddf3>
 8004b02:	4622      	mov	r2, r4
 8004b04:	462b      	mov	r3, r5
 8004b06:	f7fb fcfb 	bl	8000500 <__aeabi_dmul>
 8004b0a:	a381      	add	r3, pc, #516	; (adr r3, 8004d10 <__ieee754_pow+0x678>)
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f7fb fb44 	bl	800019c <__adddf3>
 8004b14:	4622      	mov	r2, r4
 8004b16:	4606      	mov	r6, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f7fb fcee 	bl	8000500 <__aeabi_dmul>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4630      	mov	r0, r6
 8004b2a:	4639      	mov	r1, r7
 8004b2c:	f7fb fce8 	bl	8000500 <__aeabi_dmul>
 8004b30:	4604      	mov	r4, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	f7fb fb2e 	bl	800019c <__adddf3>
 8004b40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b44:	f7fb fcdc 	bl	8000500 <__aeabi_dmul>
 8004b48:	4622      	mov	r2, r4
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	f7fb fb26 	bl	800019c <__adddf3>
 8004b50:	4642      	mov	r2, r8
 8004b52:	4606      	mov	r6, r0
 8004b54:	460f      	mov	r7, r1
 8004b56:	464b      	mov	r3, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	f7fb fcd0 	bl	8000500 <__aeabi_dmul>
 8004b60:	2200      	movs	r2, #0
 8004b62:	4b75      	ldr	r3, [pc, #468]	; (8004d38 <__ieee754_pow+0x6a0>)
 8004b64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b68:	f7fb fb18 	bl	800019c <__adddf3>
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	463b      	mov	r3, r7
 8004b70:	f7fb fb14 	bl	800019c <__adddf3>
 8004b74:	9802      	ldr	r0, [sp, #8]
 8004b76:	460d      	mov	r5, r1
 8004b78:	4604      	mov	r4, r0
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4640      	mov	r0, r8
 8004b80:	4649      	mov	r1, r9
 8004b82:	f7fb fcbd 	bl	8000500 <__aeabi_dmul>
 8004b86:	2200      	movs	r2, #0
 8004b88:	4680      	mov	r8, r0
 8004b8a:	4689      	mov	r9, r1
 8004b8c:	4b6a      	ldr	r3, [pc, #424]	; (8004d38 <__ieee754_pow+0x6a0>)
 8004b8e:	4620      	mov	r0, r4
 8004b90:	4629      	mov	r1, r5
 8004b92:	f7fb fb01 	bl	8000198 <__aeabi_dsub>
 8004b96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b9a:	f7fb fafd 	bl	8000198 <__aeabi_dsub>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	f7fb faf7 	bl	8000198 <__aeabi_dsub>
 8004baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bae:	f7fb fca7 	bl	8000500 <__aeabi_dmul>
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	460f      	mov	r7, r1
 8004bb8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f7fb fc9f 	bl	8000500 <__aeabi_dmul>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	4639      	mov	r1, r7
 8004bca:	f7fb fae7 	bl	800019c <__adddf3>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	460f      	mov	r7, r1
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	4649      	mov	r1, r9
 8004bda:	f7fb fadf 	bl	800019c <__adddf3>
 8004bde:	a34e      	add	r3, pc, #312	; (adr r3, 8004d18 <__ieee754_pow+0x680>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	9802      	ldr	r0, [sp, #8]
 8004be6:	460d      	mov	r5, r1
 8004be8:	4604      	mov	r4, r0
 8004bea:	f7fb fc89 	bl	8000500 <__aeabi_dmul>
 8004bee:	4642      	mov	r2, r8
 8004bf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7fb facd 	bl	8000198 <__aeabi_dsub>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4630      	mov	r0, r6
 8004c04:	4639      	mov	r1, r7
 8004c06:	f7fb fac7 	bl	8000198 <__aeabi_dsub>
 8004c0a:	a345      	add	r3, pc, #276	; (adr r3, 8004d20 <__ieee754_pow+0x688>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb fc76 	bl	8000500 <__aeabi_dmul>
 8004c14:	a344      	add	r3, pc, #272	; (adr r3, 8004d28 <__ieee754_pow+0x690>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	460f      	mov	r7, r1
 8004c1e:	4620      	mov	r0, r4
 8004c20:	4629      	mov	r1, r5
 8004c22:	f7fb fc6d 	bl	8000500 <__aeabi_dmul>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	f7fb fab5 	bl	800019c <__adddf3>
 8004c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c34:	4b41      	ldr	r3, [pc, #260]	; (8004d3c <__ieee754_pow+0x6a4>)
 8004c36:	4413      	add	r3, r2
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f7fb faae 	bl	800019c <__adddf3>
 8004c40:	4604      	mov	r4, r0
 8004c42:	9807      	ldr	r0, [sp, #28]
 8004c44:	460d      	mov	r5, r1
 8004c46:	f7fb fbf5 	bl	8000434 <__aeabi_i2d>
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460f      	mov	r7, r1
 8004c4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c54:	4b3a      	ldr	r3, [pc, #232]	; (8004d40 <__ieee754_pow+0x6a8>)
 8004c56:	4413      	add	r3, r2
 8004c58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	462b      	mov	r3, r5
 8004c60:	f7fb fa9c 	bl	800019c <__adddf3>
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	f7fb fa98 	bl	800019c <__adddf3>
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	463b      	mov	r3, r7
 8004c70:	f7fb fa94 	bl	800019c <__adddf3>
 8004c74:	9802      	ldr	r0, [sp, #8]
 8004c76:	4632      	mov	r2, r6
 8004c78:	463b      	mov	r3, r7
 8004c7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c7e:	f7fb fa8b 	bl	8000198 <__aeabi_dsub>
 8004c82:	4642      	mov	r2, r8
 8004c84:	464b      	mov	r3, r9
 8004c86:	f7fb fa87 	bl	8000198 <__aeabi_dsub>
 8004c8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c8e:	f7fb fa83 	bl	8000198 <__aeabi_dsub>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4620      	mov	r0, r4
 8004c98:	4629      	mov	r1, r5
 8004c9a:	f7fb fa7d 	bl	8000198 <__aeabi_dsub>
 8004c9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ca0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	bf0c      	ite	eq
 8004ca8:	4c26      	ldreq	r4, [pc, #152]	; (8004d44 <__ieee754_pow+0x6ac>)
 8004caa:	4c22      	ldrne	r4, [pc, #136]	; (8004d34 <__ieee754_pow+0x69c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004cb2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004cb6:	2400      	movs	r4, #0
 8004cb8:	4606      	mov	r6, r0
 8004cba:	460f      	mov	r7, r1
 8004cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	f7fb fa68 	bl	8000198 <__aeabi_dsub>
 8004cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ccc:	f7fb fc18 	bl	8000500 <__aeabi_dmul>
 8004cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004cd4:	4680      	mov	r8, r0
 8004cd6:	4689      	mov	r9, r1
 8004cd8:	4630      	mov	r0, r6
 8004cda:	4639      	mov	r1, r7
 8004cdc:	f7fb fc10 	bl	8000500 <__aeabi_dmul>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	e031      	b.n	8004d48 <__ieee754_pow+0x6b0>
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	4a454eef 	.word	0x4a454eef
 8004cec:	3fca7e28 	.word	0x3fca7e28
 8004cf0:	93c9db65 	.word	0x93c9db65
 8004cf4:	3fcd864a 	.word	0x3fcd864a
 8004cf8:	a91d4101 	.word	0xa91d4101
 8004cfc:	3fd17460 	.word	0x3fd17460
 8004d00:	518f264d 	.word	0x518f264d
 8004d04:	3fd55555 	.word	0x3fd55555
 8004d08:	db6fabff 	.word	0xdb6fabff
 8004d0c:	3fdb6db6 	.word	0x3fdb6db6
 8004d10:	33333303 	.word	0x33333303
 8004d14:	3fe33333 	.word	0x3fe33333
 8004d18:	e0000000 	.word	0xe0000000
 8004d1c:	3feec709 	.word	0x3feec709
 8004d20:	dc3a03fd 	.word	0xdc3a03fd
 8004d24:	3feec709 	.word	0x3feec709
 8004d28:	145b01f5 	.word	0x145b01f5
 8004d2c:	be3e2fe0 	.word	0xbe3e2fe0
 8004d30:	08005b18 	.word	0x08005b18
 8004d34:	3ff00000 	.word	0x3ff00000
 8004d38:	40080000 	.word	0x40080000
 8004d3c:	08005b08 	.word	0x08005b08
 8004d40:	08005af8 	.word	0x08005af8
 8004d44:	bff00000 	.word	0xbff00000
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	f7fb fa25 	bl	800019c <__adddf3>
 8004d52:	4622      	mov	r2, r4
 8004d54:	462b      	mov	r3, r5
 8004d56:	4680      	mov	r8, r0
 8004d58:	4689      	mov	r9, r1
 8004d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d5e:	f7fb fbcf 	bl	8000500 <__aeabi_dmul>
 8004d62:	4604      	mov	r4, r0
 8004d64:	460d      	mov	r5, r1
 8004d66:	460b      	mov	r3, r1
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	e9cd 4500 	strd	r4, r5, [sp]
 8004d72:	f7fb fa13 	bl	800019c <__adddf3>
 8004d76:	4bbc      	ldr	r3, [pc, #752]	; (8005068 <__ieee754_pow+0x9d0>)
 8004d78:	4682      	mov	sl, r0
 8004d7a:	4299      	cmp	r1, r3
 8004d7c:	460f      	mov	r7, r1
 8004d7e:	460e      	mov	r6, r1
 8004d80:	dd26      	ble.n	8004dd0 <__ieee754_pow+0x738>
 8004d82:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004d86:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004d8a:	4303      	orrs	r3, r0
 8004d8c:	d115      	bne.n	8004dba <__ieee754_pow+0x722>
 8004d8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8005010 <__ieee754_pow+0x978>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	4640      	mov	r0, r8
 8004d96:	4649      	mov	r1, r9
 8004d98:	f7fb fa00 	bl	800019c <__adddf3>
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004da2:	462b      	mov	r3, r5
 8004da4:	4650      	mov	r0, sl
 8004da6:	4639      	mov	r1, r7
 8004da8:	f7fb f9f6 	bl	8000198 <__aeabi_dsub>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004db4:	f7fb fe34 	bl	8000a20 <__aeabi_dcmpgt>
 8004db8:	b348      	cbz	r0, 8004e0e <__ieee754_pow+0x776>
 8004dba:	a397      	add	r3, pc, #604	; (adr r3, 8005018 <__ieee754_pow+0x980>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc4:	f7fb fb9c 	bl	8000500 <__aeabi_dmul>
 8004dc8:	a393      	add	r3, pc, #588	; (adr r3, 8005018 <__ieee754_pow+0x980>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	e107      	b.n	8004fe0 <__ieee754_pow+0x948>
 8004dd0:	4ba6      	ldr	r3, [pc, #664]	; (800506c <__ieee754_pow+0x9d4>)
 8004dd2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004dd6:	429f      	cmp	r7, r3
 8004dd8:	dd19      	ble.n	8004e0e <__ieee754_pow+0x776>
 8004dda:	4ba5      	ldr	r3, [pc, #660]	; (8005070 <__ieee754_pow+0x9d8>)
 8004ddc:	440b      	add	r3, r1
 8004dde:	4303      	orrs	r3, r0
 8004de0:	d10a      	bne.n	8004df8 <__ieee754_pow+0x760>
 8004de2:	4622      	mov	r2, r4
 8004de4:	462b      	mov	r3, r5
 8004de6:	f7fb f9d7 	bl	8000198 <__aeabi_dsub>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4640      	mov	r0, r8
 8004df0:	4649      	mov	r1, r9
 8004df2:	f7fb fe01 	bl	80009f8 <__aeabi_dcmple>
 8004df6:	b150      	cbz	r0, 8004e0e <__ieee754_pow+0x776>
 8004df8:	a389      	add	r3, pc, #548	; (adr r3, 8005020 <__ieee754_pow+0x988>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e02:	f7fb fb7d 	bl	8000500 <__aeabi_dmul>
 8004e06:	a386      	add	r3, pc, #536	; (adr r3, 8005020 <__ieee754_pow+0x988>)
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	e0e8      	b.n	8004fe0 <__ieee754_pow+0x948>
 8004e0e:	4a99      	ldr	r2, [pc, #612]	; (8005074 <__ieee754_pow+0x9dc>)
 8004e10:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004e14:	4293      	cmp	r3, r2
 8004e16:	dd25      	ble.n	8004e64 <__ieee754_pow+0x7cc>
 8004e18:	151b      	asrs	r3, r3, #20
 8004e1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004e1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004e22:	fa4a f303 	asr.w	r3, sl, r3
 8004e26:	4433      	add	r3, r6
 8004e28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004e2c:	4f92      	ldr	r7, [pc, #584]	; (8005078 <__ieee754_pow+0x9e0>)
 8004e2e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004e32:	4117      	asrs	r7, r2
 8004e34:	ea23 0107 	bic.w	r1, r3, r7
 8004e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e3c:	ea43 030a 	orr.w	r3, r3, sl
 8004e40:	2000      	movs	r0, #0
 8004e42:	f1c2 0a14 	rsb	sl, r2, #20
 8004e46:	fa43 fa0a 	asr.w	sl, r3, sl
 8004e4a:	2e00      	cmp	r6, #0
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4620      	mov	r0, r4
 8004e52:	4629      	mov	r1, r5
 8004e54:	bfb8      	it	lt
 8004e56:	f1ca 0a00 	rsblt	sl, sl, #0
 8004e5a:	f7fb f99d 	bl	8000198 <__aeabi_dsub>
 8004e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8004e62:	e001      	b.n	8004e68 <__ieee754_pow+0x7d0>
 8004e64:	f04f 0a00 	mov.w	sl, #0
 8004e68:	4642      	mov	r2, r8
 8004e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e6e:	464b      	mov	r3, r9
 8004e70:	f7fb f994 	bl	800019c <__adddf3>
 8004e74:	a36c      	add	r3, pc, #432	; (adr r3, 8005028 <__ieee754_pow+0x990>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	460d      	mov	r5, r1
 8004e80:	f7fb fb3e 	bl	8000500 <__aeabi_dmul>
 8004e84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e88:	4606      	mov	r6, r0
 8004e8a:	460f      	mov	r7, r1
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f7fb f982 	bl	8000198 <__aeabi_dsub>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	f7fb f97c 	bl	8000198 <__aeabi_dsub>
 8004ea0:	a363      	add	r3, pc, #396	; (adr r3, 8005030 <__ieee754_pow+0x998>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb fb2b 	bl	8000500 <__aeabi_dmul>
 8004eaa:	a363      	add	r3, pc, #396	; (adr r3, 8005038 <__ieee754_pow+0x9a0>)
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	4680      	mov	r8, r0
 8004eb2:	4689      	mov	r9, r1
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	f7fb fb22 	bl	8000500 <__aeabi_dmul>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4640      	mov	r0, r8
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	f7fb f96a 	bl	800019c <__adddf3>
 8004ec8:	4604      	mov	r4, r0
 8004eca:	460d      	mov	r5, r1
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	f7fb f962 	bl	800019c <__adddf3>
 8004ed8:	4632      	mov	r2, r6
 8004eda:	463b      	mov	r3, r7
 8004edc:	4680      	mov	r8, r0
 8004ede:	4689      	mov	r9, r1
 8004ee0:	f7fb f95a 	bl	8000198 <__aeabi_dsub>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4629      	mov	r1, r5
 8004eec:	f7fb f954 	bl	8000198 <__aeabi_dsub>
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	4640      	mov	r0, r8
 8004efa:	4649      	mov	r1, r9
 8004efc:	f7fb fb00 	bl	8000500 <__aeabi_dmul>
 8004f00:	a34f      	add	r3, pc, #316	; (adr r3, 8005040 <__ieee754_pow+0x9a8>)
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	4604      	mov	r4, r0
 8004f08:	460d      	mov	r5, r1
 8004f0a:	f7fb faf9 	bl	8000500 <__aeabi_dmul>
 8004f0e:	a34e      	add	r3, pc, #312	; (adr r3, 8005048 <__ieee754_pow+0x9b0>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f7fb f940 	bl	8000198 <__aeabi_dsub>
 8004f18:	4622      	mov	r2, r4
 8004f1a:	462b      	mov	r3, r5
 8004f1c:	f7fb faf0 	bl	8000500 <__aeabi_dmul>
 8004f20:	a34b      	add	r3, pc, #300	; (adr r3, 8005050 <__ieee754_pow+0x9b8>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb f939 	bl	800019c <__adddf3>
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	f7fb fae7 	bl	8000500 <__aeabi_dmul>
 8004f32:	a349      	add	r3, pc, #292	; (adr r3, 8005058 <__ieee754_pow+0x9c0>)
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f7fb f92e 	bl	8000198 <__aeabi_dsub>
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	462b      	mov	r3, r5
 8004f40:	f7fb fade 	bl	8000500 <__aeabi_dmul>
 8004f44:	a346      	add	r3, pc, #280	; (adr r3, 8005060 <__ieee754_pow+0x9c8>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f7fb f927 	bl	800019c <__adddf3>
 8004f4e:	4622      	mov	r2, r4
 8004f50:	462b      	mov	r3, r5
 8004f52:	f7fb fad5 	bl	8000500 <__aeabi_dmul>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	f7fb f91b 	bl	8000198 <__aeabi_dsub>
 8004f62:	4604      	mov	r4, r0
 8004f64:	460d      	mov	r5, r1
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	f7fb fac7 	bl	8000500 <__aeabi_dmul>
 8004f72:	2200      	movs	r2, #0
 8004f74:	e9cd 0100 	strd	r0, r1, [sp]
 8004f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb f90a 	bl	8000198 <__aeabi_dsub>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f8c:	f7fb fbe2 	bl	8000754 <__aeabi_ddiv>
 8004f90:	4632      	mov	r2, r6
 8004f92:	4604      	mov	r4, r0
 8004f94:	460d      	mov	r5, r1
 8004f96:	463b      	mov	r3, r7
 8004f98:	4640      	mov	r0, r8
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	f7fb fab0 	bl	8000500 <__aeabi_dmul>
 8004fa0:	4632      	mov	r2, r6
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	f7fb f8fa 	bl	800019c <__adddf3>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4620      	mov	r0, r4
 8004fae:	4629      	mov	r1, r5
 8004fb0:	f7fb f8f2 	bl	8000198 <__aeabi_dsub>
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	f7fb f8ee 	bl	8000198 <__aeabi_dsub>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	492e      	ldr	r1, [pc, #184]	; (800507c <__ieee754_pow+0x9e4>)
 8004fc4:	f7fb f8e8 	bl	8000198 <__aeabi_dsub>
 8004fc8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004fcc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004fd0:	da03      	bge.n	8004fda <__ieee754_pow+0x942>
 8004fd2:	4652      	mov	r2, sl
 8004fd4:	f000 f99c 	bl	8005310 <scalbn>
 8004fd8:	e000      	b.n	8004fdc <__ieee754_pow+0x944>
 8004fda:	4621      	mov	r1, r4
 8004fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe0:	f7fb fa8e 	bl	8000500 <__aeabi_dmul>
 8004fe4:	e008      	b.n	8004ff8 <__ieee754_pow+0x960>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4924      	ldr	r1, [pc, #144]	; (800507c <__ieee754_pow+0x9e4>)
 8004fea:	e00c      	b.n	8005006 <__ieee754_pow+0x96e>
 8004fec:	9b00      	ldr	r3, [sp, #0]
 8004fee:	9901      	ldr	r1, [sp, #4]
 8004ff0:	e009      	b.n	8005006 <__ieee754_pow+0x96e>
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	e006      	b.n	8005006 <__ieee754_pow+0x96e>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	e004      	b.n	8005006 <__ieee754_pow+0x96e>
 8004ffc:	42ae      	cmp	r6, r5
 8004ffe:	f73f ab72 	bgt.w	80046e6 <__ieee754_pow+0x4e>
 8005002:	f7ff bb65 	b.w	80046d0 <__ieee754_pow+0x38>
 8005006:	4618      	mov	r0, r3
 8005008:	b011      	add	sp, #68	; 0x44
 800500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500e:	bf00      	nop
 8005010:	652b82fe 	.word	0x652b82fe
 8005014:	3c971547 	.word	0x3c971547
 8005018:	8800759c 	.word	0x8800759c
 800501c:	7e37e43c 	.word	0x7e37e43c
 8005020:	c2f8f359 	.word	0xc2f8f359
 8005024:	01a56e1f 	.word	0x01a56e1f
 8005028:	00000000 	.word	0x00000000
 800502c:	3fe62e43 	.word	0x3fe62e43
 8005030:	fefa39ef 	.word	0xfefa39ef
 8005034:	3fe62e42 	.word	0x3fe62e42
 8005038:	0ca86c39 	.word	0x0ca86c39
 800503c:	be205c61 	.word	0xbe205c61
 8005040:	72bea4d0 	.word	0x72bea4d0
 8005044:	3e663769 	.word	0x3e663769
 8005048:	c5d26bf1 	.word	0xc5d26bf1
 800504c:	3ebbbd41 	.word	0x3ebbbd41
 8005050:	af25de2c 	.word	0xaf25de2c
 8005054:	3f11566a 	.word	0x3f11566a
 8005058:	16bebd93 	.word	0x16bebd93
 800505c:	3f66c16c 	.word	0x3f66c16c
 8005060:	5555553e 	.word	0x5555553e
 8005064:	3fc55555 	.word	0x3fc55555
 8005068:	408fffff 	.word	0x408fffff
 800506c:	4090cbff 	.word	0x4090cbff
 8005070:	3f6f3400 	.word	0x3f6f3400
 8005074:	3fe00000 	.word	0x3fe00000
 8005078:	000fffff 	.word	0x000fffff
 800507c:	3ff00000 	.word	0x3ff00000

08005080 <__ieee754_sqrt>:
 8005080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005084:	4f52      	ldr	r7, [pc, #328]	; (80051d0 <__ieee754_sqrt+0x150>)
 8005086:	f8df c148 	ldr.w	ip, [pc, #328]	; 80051d0 <__ieee754_sqrt+0x150>
 800508a:	400f      	ands	r7, r1
 800508c:	4567      	cmp	r7, ip
 800508e:	4606      	mov	r6, r0
 8005090:	460d      	mov	r5, r1
 8005092:	4686      	mov	lr, r0
 8005094:	460c      	mov	r4, r1
 8005096:	460b      	mov	r3, r1
 8005098:	4602      	mov	r2, r0
 800509a:	d108      	bne.n	80050ae <__ieee754_sqrt+0x2e>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	f7fb fa2e 	bl	8000500 <__aeabi_dmul>
 80050a4:	4632      	mov	r2, r6
 80050a6:	462b      	mov	r3, r5
 80050a8:	f7fb f878 	bl	800019c <__adddf3>
 80050ac:	e08d      	b.n	80051ca <__ieee754_sqrt+0x14a>
 80050ae:	2900      	cmp	r1, #0
 80050b0:	dc0e      	bgt.n	80050d0 <__ieee754_sqrt+0x50>
 80050b2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80050b6:	4307      	orrs	r7, r0
 80050b8:	f000 8087 	beq.w	80051ca <__ieee754_sqrt+0x14a>
 80050bc:	b141      	cbz	r1, 80050d0 <__ieee754_sqrt+0x50>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	f7fb f869 	bl	8000198 <__aeabi_dsub>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	f7fb fb43 	bl	8000754 <__aeabi_ddiv>
 80050ce:	e07c      	b.n	80051ca <__ieee754_sqrt+0x14a>
 80050d0:	1524      	asrs	r4, r4, #20
 80050d2:	d112      	bne.n	80050fa <__ieee754_sqrt+0x7a>
 80050d4:	b91b      	cbnz	r3, 80050de <__ieee754_sqrt+0x5e>
 80050d6:	0ad3      	lsrs	r3, r2, #11
 80050d8:	3c15      	subs	r4, #21
 80050da:	0552      	lsls	r2, r2, #21
 80050dc:	e7fa      	b.n	80050d4 <__ieee754_sqrt+0x54>
 80050de:	2100      	movs	r1, #0
 80050e0:	02d8      	lsls	r0, r3, #11
 80050e2:	d402      	bmi.n	80050ea <__ieee754_sqrt+0x6a>
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	3101      	adds	r1, #1
 80050e8:	e7fa      	b.n	80050e0 <__ieee754_sqrt+0x60>
 80050ea:	1e48      	subs	r0, r1, #1
 80050ec:	1a24      	subs	r4, r4, r0
 80050ee:	f1c1 0020 	rsb	r0, r1, #32
 80050f2:	fa22 f000 	lsr.w	r0, r2, r0
 80050f6:	4303      	orrs	r3, r0
 80050f8:	408a      	lsls	r2, r1
 80050fa:	f04f 0e00 	mov.w	lr, #0
 80050fe:	4677      	mov	r7, lr
 8005100:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005108:	07e1      	lsls	r1, r4, #31
 800510a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510e:	bf42      	ittt	mi
 8005110:	005b      	lslmi	r3, r3, #1
 8005112:	eb03 73d2 	addmi.w	r3, r3, r2, lsr #31
 8005116:	0052      	lslmi	r2, r2, #1
 8005118:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 800511c:	440b      	add	r3, r1
 800511e:	0056      	lsls	r6, r2, #1
 8005120:	1064      	asrs	r4, r4, #1
 8005122:	2216      	movs	r2, #22
 8005124:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005128:	1878      	adds	r0, r7, r1
 800512a:	4298      	cmp	r0, r3
 800512c:	bfde      	ittt	le
 800512e:	1a1b      	suble	r3, r3, r0
 8005130:	1847      	addle	r7, r0, r1
 8005132:	448e      	addle	lr, r1
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	3a01      	subs	r2, #1
 8005138:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 800513c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005140:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8005144:	d1f0      	bne.n	8005128 <__ieee754_sqrt+0xa8>
 8005146:	4694      	mov	ip, r2
 8005148:	2520      	movs	r5, #32
 800514a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800514e:	429f      	cmp	r7, r3
 8005150:	eb01 000c 	add.w	r0, r1, ip
 8005154:	db02      	blt.n	800515c <__ieee754_sqrt+0xdc>
 8005156:	d116      	bne.n	8005186 <__ieee754_sqrt+0x106>
 8005158:	42b0      	cmp	r0, r6
 800515a:	d813      	bhi.n	8005184 <__ieee754_sqrt+0x104>
 800515c:	2800      	cmp	r0, #0
 800515e:	eb00 0c01 	add.w	ip, r0, r1
 8005162:	da05      	bge.n	8005170 <__ieee754_sqrt+0xf0>
 8005164:	f1bc 0f00 	cmp.w	ip, #0
 8005168:	db02      	blt.n	8005170 <__ieee754_sqrt+0xf0>
 800516a:	f107 0801 	add.w	r8, r7, #1
 800516e:	e000      	b.n	8005172 <__ieee754_sqrt+0xf2>
 8005170:	46b8      	mov	r8, r7
 8005172:	1bdb      	subs	r3, r3, r7
 8005174:	42b0      	cmp	r0, r6
 8005176:	bf88      	it	hi
 8005178:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800517c:	1a36      	subs	r6, r6, r0
 800517e:	440a      	add	r2, r1
 8005180:	4647      	mov	r7, r8
 8005182:	e000      	b.n	8005186 <__ieee754_sqrt+0x106>
 8005184:	463b      	mov	r3, r7
 8005186:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 800518a:	3d01      	subs	r5, #1
 800518c:	4403      	add	r3, r0
 800518e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8005192:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005196:	d1da      	bne.n	800514e <__ieee754_sqrt+0xce>
 8005198:	4333      	orrs	r3, r6
 800519a:	d007      	beq.n	80051ac <__ieee754_sqrt+0x12c>
 800519c:	1c53      	adds	r3, r2, #1
 800519e:	bf0b      	itete	eq
 80051a0:	462a      	moveq	r2, r5
 80051a2:	f002 0301 	andne.w	r3, r2, #1
 80051a6:	f10e 0e01 	addeq.w	lr, lr, #1
 80051aa:	18d2      	addne	r2, r2, r3
 80051ac:	0852      	lsrs	r2, r2, #1
 80051ae:	f01e 0f01 	tst.w	lr, #1
 80051b2:	bf18      	it	ne
 80051b4:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
 80051b8:	4610      	mov	r0, r2
 80051ba:	ea4f 036e 	mov.w	r3, lr, asr #1
 80051be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80051c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80051c6:	eb03 5104 	add.w	r1, r3, r4, lsl #20
 80051ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ce:	bf00      	nop
 80051d0:	7ff00000 	.word	0x7ff00000

080051d4 <fabs>:
 80051d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80051d8:	4770      	bx	lr

080051da <finite>:
 80051da:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80051de:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80051e2:	0fc0      	lsrs	r0, r0, #31
 80051e4:	4770      	bx	lr

080051e6 <matherr>:
 80051e6:	2000      	movs	r0, #0
 80051e8:	4770      	bx	lr
	...

080051ec <nan>:
 80051ec:	2000      	movs	r0, #0
 80051ee:	4901      	ldr	r1, [pc, #4]	; (80051f4 <nan+0x8>)
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	7ff80000 	.word	0x7ff80000

080051f8 <rint>:
 80051f8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80051fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051fe:	f2ac 3eff 	subw	lr, ip, #1023	; 0x3ff
 8005202:	f1be 0f13 	cmp.w	lr, #19
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4607      	mov	r7, r0
 800520c:	460c      	mov	r4, r1
 800520e:	4606      	mov	r6, r0
 8005210:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005214:	dc44      	bgt.n	80052a0 <rint+0xa8>
 8005216:	f1be 0f00 	cmp.w	lr, #0
 800521a:	da26      	bge.n	800526a <rint+0x72>
 800521c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005220:	4301      	orrs	r1, r0
 8005222:	d06d      	beq.n	8005300 <rint+0x108>
 8005224:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8005228:	430f      	orrs	r7, r1
 800522a:	427b      	negs	r3, r7
 800522c:	431f      	orrs	r7, r3
 800522e:	4b36      	ldr	r3, [pc, #216]	; (8005308 <rint+0x110>)
 8005230:	0b3f      	lsrs	r7, r7, #12
 8005232:	0c64      	lsrs	r4, r4, #17
 8005234:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 8005238:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800523c:	0464      	lsls	r4, r4, #17
 800523e:	ea47 0104 	orr.w	r1, r7, r4
 8005242:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005246:	4632      	mov	r2, r6
 8005248:	463b      	mov	r3, r7
 800524a:	f7fa ffa7 	bl	800019c <__adddf3>
 800524e:	e9cd 0100 	strd	r0, r1, [sp]
 8005252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005256:	4632      	mov	r2, r6
 8005258:	463b      	mov	r3, r7
 800525a:	f7fa ff9d 	bl	8000198 <__aeabi_dsub>
 800525e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005262:	4602      	mov	r2, r0
 8005264:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 8005268:	e04a      	b.n	8005300 <rint+0x108>
 800526a:	4928      	ldr	r1, [pc, #160]	; (800530c <rint+0x114>)
 800526c:	fa41 f10e 	asr.w	r1, r1, lr
 8005270:	ea03 0001 	and.w	r0, r3, r1
 8005274:	4310      	orrs	r0, r2
 8005276:	d043      	beq.n	8005300 <rint+0x108>
 8005278:	084b      	lsrs	r3, r1, #1
 800527a:	ea04 0203 	and.w	r2, r4, r3
 800527e:	ea52 0607 	orrs.w	r6, r2, r7
 8005282:	d029      	beq.n	80052d8 <rint+0xe0>
 8005284:	ea24 0303 	bic.w	r3, r4, r3
 8005288:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800528c:	f1be 0f13 	cmp.w	lr, #19
 8005290:	fa44 f40e 	asr.w	r4, r4, lr
 8005294:	bf0c      	ite	eq
 8005296:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800529a:	2600      	movne	r6, #0
 800529c:	431c      	orrs	r4, r3
 800529e:	e01b      	b.n	80052d8 <rint+0xe0>
 80052a0:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 80052a4:	dd05      	ble.n	80052b2 <rint+0xba>
 80052a6:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 80052aa:	d129      	bne.n	8005300 <rint+0x108>
 80052ac:	f7fa ff76 	bl	800019c <__adddf3>
 80052b0:	e028      	b.n	8005304 <rint+0x10c>
 80052b2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80052b6:	f04f 31ff 	mov.w	r1, #4294967295
 80052ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80052be:	4208      	tst	r0, r1
 80052c0:	d01e      	beq.n	8005300 <rint+0x108>
 80052c2:	084b      	lsrs	r3, r1, #1
 80052c4:	4218      	tst	r0, r3
 80052c6:	bf1f      	itttt	ne
 80052c8:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80052cc:	ea20 0303 	bicne.w	r3, r0, r3
 80052d0:	fa46 fc0c 	asrne.w	ip, r6, ip
 80052d4:	ea4c 0603 	orrne.w	r6, ip, r3
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <rint+0x110>)
 80052da:	4621      	mov	r1, r4
 80052dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80052e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80052e4:	4630      	mov	r0, r6
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	f7fa ff57 	bl	800019c <__adddf3>
 80052ee:	e9cd 0100 	strd	r0, r1, [sp]
 80052f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052f6:	4622      	mov	r2, r4
 80052f8:	462b      	mov	r3, r5
 80052fa:	f7fa ff4d 	bl	8000198 <__aeabi_dsub>
 80052fe:	e001      	b.n	8005304 <rint+0x10c>
 8005300:	4610      	mov	r0, r2
 8005302:	4619      	mov	r1, r3
 8005304:	b003      	add	sp, #12
 8005306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005308:	08005b28 	.word	0x08005b28
 800530c:	000fffff 	.word	0x000fffff

08005310 <scalbn>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	4616      	mov	r6, r2
 8005314:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005318:	4604      	mov	r4, r0
 800531a:	460d      	mov	r5, r1
 800531c:	460b      	mov	r3, r1
 800531e:	b98a      	cbnz	r2, 8005344 <scalbn+0x34>
 8005320:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005324:	4303      	orrs	r3, r0
 8005326:	d050      	beq.n	80053ca <scalbn+0xba>
 8005328:	2200      	movs	r2, #0
 800532a:	4b2d      	ldr	r3, [pc, #180]	; (80053e0 <scalbn+0xd0>)
 800532c:	f7fb f8e8 	bl	8000500 <__aeabi_dmul>
 8005330:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <scalbn+0xd4>)
 8005332:	4604      	mov	r4, r0
 8005334:	4296      	cmp	r6, r2
 8005336:	460d      	mov	r5, r1
 8005338:	460b      	mov	r3, r1
 800533a:	db34      	blt.n	80053a6 <scalbn+0x96>
 800533c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005340:	3a36      	subs	r2, #54	; 0x36
 8005342:	e008      	b.n	8005356 <scalbn+0x46>
 8005344:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005348:	42ba      	cmp	r2, r7
 800534a:	d104      	bne.n	8005356 <scalbn+0x46>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	f7fa ff24 	bl	800019c <__adddf3>
 8005354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005356:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800535a:	4432      	add	r2, r6
 800535c:	428a      	cmp	r2, r1
 800535e:	dd02      	ble.n	8005366 <scalbn+0x56>
 8005360:	4622      	mov	r2, r4
 8005362:	462b      	mov	r3, r5
 8005364:	e011      	b.n	800538a <scalbn+0x7a>
 8005366:	2a00      	cmp	r2, #0
 8005368:	dd06      	ble.n	8005378 <scalbn+0x68>
 800536a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800536e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005372:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005376:	e028      	b.n	80053ca <scalbn+0xba>
 8005378:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800537c:	da17      	bge.n	80053ae <scalbn+0x9e>
 800537e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005382:	429e      	cmp	r6, r3
 8005384:	4622      	mov	r2, r4
 8005386:	462b      	mov	r3, r5
 8005388:	dd08      	ble.n	800539c <scalbn+0x8c>
 800538a:	a111      	add	r1, pc, #68	; (adr r1, 80053d0 <scalbn+0xc0>)
 800538c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005390:	f000 f82c 	bl	80053ec <copysign>
 8005394:	a30e      	add	r3, pc, #56	; (adr r3, 80053d0 <scalbn+0xc0>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	e013      	b.n	80053c4 <scalbn+0xb4>
 800539c:	a10e      	add	r1, pc, #56	; (adr r1, 80053d8 <scalbn+0xc8>)
 800539e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053a2:	f000 f823 	bl	80053ec <copysign>
 80053a6:	a30c      	add	r3, pc, #48	; (adr r3, 80053d8 <scalbn+0xc8>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	e00a      	b.n	80053c4 <scalbn+0xb4>
 80053ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80053b2:	3236      	adds	r2, #54	; 0x36
 80053b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80053bc:	4620      	mov	r0, r4
 80053be:	4629      	mov	r1, r5
 80053c0:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <scalbn+0xd8>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	f7fb f89c 	bl	8000500 <__aeabi_dmul>
 80053c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ca:	4620      	mov	r0, r4
 80053cc:	4629      	mov	r1, r5
 80053ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d0:	8800759c 	.word	0x8800759c
 80053d4:	7e37e43c 	.word	0x7e37e43c
 80053d8:	c2f8f359 	.word	0xc2f8f359
 80053dc:	01a56e1f 	.word	0x01a56e1f
 80053e0:	43500000 	.word	0x43500000
 80053e4:	ffff3cb0 	.word	0xffff3cb0
 80053e8:	3c900000 	.word	0x3c900000

080053ec <copysign>:
 80053ec:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80053f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	ea42 0103 	orr.w	r1, r2, r3
 80053f8:	4770      	bx	lr
	...

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	; (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000088 	.word	0x20000088

08005408 <_init>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr

08005414 <_fini>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr
